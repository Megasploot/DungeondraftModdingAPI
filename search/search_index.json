{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Modding Dungeondraft allows you to customize your software to have new tools, features, export formats, or appearances. Dungeondraft mods are compatible with version 1.1.0.0 newborn phoenix and higher.</p> <p>Dungeondraft mods work by talking to Dungeondraft through a language similar to Python native to the Godot Engine called GDScript. You can familiarize yourself by reading the official GDScript documentation.</p>"},{"location":"#structure","title":"Structure","text":"<p>Every mod consists of a folder, a .ddmod file inside, and any number of .gd GDSCript files. Dungeondraft will automatically parse every .gd file inside a mod folder and call its start() function. There is no extra step needed to point to their paths. The .ddmod file exists to inform Dungeondraft's filesystem about your mod. It details your mod's name, version, author, unique id, minimum Dungeondraft version, and a description. It is written in the JSON format. The dependencies is optional and only necessary if you use scripts from other mods. See example:</p> <pre><code>{\n\"name\": \"Test Mod\",\n\"unique_id\": \"Megasploot.TestMod\",\n\"version\": \"1.0.0\",\n\"author\": \"Megasploot\",\n\"description\": \"Description here\",\n\"dd_version\": \"1.1.0.0\",\n\"dependencies\": [ \"Megasploot.ParentMod\" ]\n}\n</code></pre> <p>You can also include a PNG file named preview.png with 256x320 pixels to give any potential users of your mod a quick idea of what to expect. You can study an update-to-date structure here: https://github.com/Megasploot/Dungeondraft/tree/master/ddmods/toolmod</p>"},{"location":"#scripting","title":"Scripting","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Scripting</p> <p>Globals</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Serializing Mod Data</p>"},{"location":"#development-environment","title":"Development Environment","text":"<p>The recommended IDE for writing script is Visual Studio Code with the Godot Tools plugin installed. You can find the download for both here:</p> <p>https://code.visualstudio.com/</p> <p>https://marketplace.visualstudio.com/items?itemName=geequlim.godot-tools</p> <p>By using this setup, you will have access to syntax highlighting and intellisense for the Godot Engine.</p>"},{"location":"#script-types","title":"Script Types","text":"<p>The backbone of a Dungeondraft mod is the scripting. Dungeondraft scripts come in 2 flavors.</p>"},{"location":"#tool-script","title":"Tool Script","text":"<p>Example new tool script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_new_tool.gd</p> <p>Example tool extension script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_extend_tool.gd</p> <p>A tool script allows you to add a new tool onto the toolbar and extend a current tool featureset or invent completely new ones. You can add UI elements to the tool panel to the left side and also access the object or path library panels on the right.</p>"},{"location":"#export-format-script","title":"Export Format Script","text":"<p>Example export format script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/export_formats/example_export_format.gd</p> <p>Export format script allows you to add a new export format to the Dungeondraft export options. You can embed additional information to a PNG, JPG, or WEBP style export. Or you can extract additional information like LOS data to create your own VTT export format.</p>"},{"location":"AssetCategories/","title":"Asset Categories","text":"<p>The following are the String names of the categories you can reference anywhere a category is required:</p> <pre><code>Terrain\nPatterns\nPatterns Colorable\nCaves\nRoofs\nObjects\nWalls\nMaterials\nPortals\nPaths\nLights\nSimple Tiles\nSmart Tiles\nSmart Tiles Double\n</code></pre>"},{"location":"AssetInstance/","title":"Asset Instance","text":"<p>An asset instance in Dungeondraft is under-the-hood a Node of various types in Godot but with a unique id assigned. Any instance must be modified with care, verifying that the modifications do not cause bugs.</p> <p>Best practice is to modify an asset instance through a given function from a Tool rather than accessing its properties directly, with the exception of its transform (ie. position, rotation, and scale).</p> <p>All asset instances are also Godot Node2Ds and therefore, you will be able to access the functionality here in the Godot docs: Node2D</p>"},{"location":"AssetInstance/#function","title":"Function","text":"<pre><code>int GetNodeID\n</code></pre> <p>Get the unique ID assigned by Dungeondraft.</p>"},{"location":"Globals/","title":"Globals","text":"<p>This page documents how your mod script can interface with Dungeondraft. You can pass and receive data using the Globals such as the Tools or the World to perform tasks.</p>"},{"location":"Globals/#core","title":"Core","text":"<p>Functions and properties in this section are available to all scripts.</p>"},{"location":"Globals/#properties","title":"Properties","text":"<p><pre><code>Array&lt;Tool&gt; Global.Editor.Tools\n</code></pre> Provides access to every tool in Dungeondraft by name. For example, you can access the Object Tool by indexing the variable in this manner <code>Global.Editor.Tools[\"ObjectTool\"]</code>.</p> <p>Valid tool names are:</p> <ul> <li>SelectTool</li> <li>TextTool</li> <li>PrefabTool</li> <li>FloorShapeTool</li> <li>PatternShapeTool</li> <li>WallTool</li> <li>PortalTool</li> <li>RoofTool</li> <li>PathTool</li> <li>ObjectTool</li> <li>ScatterTool</li> <li>CaveBrush</li> <li>WaterBrush</li> <li>TerrainBrush</li> <li>MaterialBrush</li> <li>Environment</li> <li>LightTool</li> <li>MapSettings</li> <li>TraceImage</li> </ul>"},{"location":"Globals/#editor","title":"Editor","text":"<p>Functions and properties in this category are related to the tools and user interface of Dungeondraft. They are accessed through Global.Editor.VariableName.</p>"},{"location":"Globals/#world","title":"World","text":"<p><code>Global.World</code> Functions and properties in this category are related to the map. They are accessed through Global.World.VariableName.</p>"},{"location":"Globals/#worldui","title":"WorldUI","text":"<p><code>Global.WorldUI</code> The class where many of the on map UI elements are accessed. They are accessed through Global.WorldUI.</p>"},{"location":"Globals/#exporter","title":"Exporter","text":"<p><code>Global.Exporter</code> The class used to export maps to various image and data formats.</p>"},{"location":"Globals/#level","title":"Level","text":"<p><pre><code>Global.World.GetCurrentLevel()\n</code></pre> The class used to hold and modify the map itself. Most easily accessible through Globa.World.GetCurrentLevel() and other Global.World properties.</p>"},{"location":"Globals/#root","title":"Root","text":"<p>This name is base directory of the mod a script is packaged in. It is helpful for locating other files inside a mod, like a PNG file for icons. For example, you can assign a variable to a PNG filename by combining the Root name with a known relative path like so: <pre><code>var icon = Global.Root + \"icons/example_tool.png\"\n</code></pre></p>"},{"location":"Globals/#camera","title":"Camera","text":"<p><code>Global.Camera</code> The object that frames the area of the map to display to the window.</p>"},{"location":"Globals/#header","title":"Header","text":"<p><code>Global.Header</code> The object that holds meta information about each map.</p>"},{"location":"Globals/#functions","title":"Functions","text":"<p><pre><code>ToolPanel Global.Editor.Toolset.CreateModTool(Reference script_instance, String category, String id, String name, String icon)\n</code></pre> Creates a new tool inside Dungeondraft and automatically generates a Tool Panel as the return.</p> <p>The category is the set of tools the new tool will show under. Valid options are:</p> <ul> <li>Design</li> <li>Terrain</li> <li>Objects</li> <li>Effects</li> <li>Settings</li> </ul> <p>The id is the internal tool name, while the name is displayed to the end user.</p> <p>The icon is the path to a PNG to use as the button.</p>"},{"location":"Globals/#script","title":"Script","text":"<p>Functions in this category are specialized for modding Dungeondraft. They are accessed through Script.VariableName.</p>"},{"location":"Globals/#functions_1","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetActiveMods()\n</code></pre> Returns an Array of Strings of unique IDs of all active mods.</p>"},{"location":"Globals/#tool-script","title":"Tool Script","text":"<p>Functions and properties in this section are available only to tool scripts.</p>"},{"location":"Globals/#script_1","title":"Script","text":""},{"location":"Globals/#functions_2","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetAssetList(String category)\n</code></pre> Returns an Array of Strings populated by the path to all the assets of that category.</p> <p>Valid categories are Asset Categories</p>"},{"location":"Scripting/","title":"Scripting","text":""},{"location":"Scripting/#overview","title":"Overview","text":"<p>A script file is a fully enclosed that does not require any other script or file to use. Dungeondraft will poll each script at load, but can also poll every tick or input input based on the way you configure it. From those methods, you can communicate to Dungeondraft through API calls. It is through this back-and-forth communication that Dungeondraft can be modded.</p>"},{"location":"Scripting/#mod-load-time","title":"Mod Load Time","text":"<p>A mod is loaded and therefore, a script is loaded just after a new map or saved map finished loading and the canvas displays. By the time a script is initialized.</p>"},{"location":"Scripting/#minimum-viable-script","title":"Minimum Viable Script","text":"<p>The following code is the smallest scripts for the 2 script types.</p> <p>Tool Script <pre><code>var script_class = \"tool\"\nfunc start():\npass\n</code></pre></p> <p>The variable script_class is a string that Dungeondraft inspects to see what type of script has been loaded.</p> <p>The start() method is called after an instance of the script has been created and just after all of the assets needed for drawing has been loaded. It is not called in the welcome screen before a new map has been created.</p> <p>Export Format Script <pre><code>var script_class = \"export_format\"\nvar export_format_name = \"Export Format Name\"\nvar export_file_extension = \"myexportextension\"\nvar export_image_format = \"webp\"\nvar show_quality_slider = true\nfunc start():\npass\nfunc process(path : String, image : File, ppi : int):\npass\n</code></pre></p> <p>The variable export_format_name is a string that is displayed to users in the export window.</p> <p>The variable export_file_extension is the file extension your custom format will save with.</p> <p>The variable export_image_format is the type of image the export will use. Valid options are: \"png\", \"jpg\", and \"webp\".</p> <p>The variable show_quality_slider displays the quality slider in the export window, useful for png and webp.</p> <p>The process() method is only called within an Export Format script and is called just after the imaging step of the export process has been completed. It allows you to manipulate the end result of the image. This is an ideal script type to add specialized export to a custom VTT.</p>"},{"location":"reference/ArcVector2/","title":"ArcVector2","text":"<p>Extends: Object</p>"},{"location":"reference/ArcVector2/#description","title":"Description","text":"<p>WorldUI helper class used to render the polyline for walls, paths, etc.</p>"},{"location":"reference/ArcVector2/#properties","title":"Properties","text":"<p> Vector2 Position Vector2 ArcPoint bool HasArcPoint </p>"},{"location":"reference/ArcVector2/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Vector2 Position:   Gets or sets the position of the ArcVector2. </li> </ul> <ul> <li>Vector2 ArcPoint:   Gets or sets the helper point that allows the current segment to curve. </li> </ul> <ul> <li>bool HasArcPoint:   Gets or sets if the current position has an arc point. </li> </ul>"},{"location":"reference/AssetPack/","title":"AssetPack","text":"<p>Extends: Reference</p>"},{"location":"reference/AssetPack/#description","title":"Description","text":"<p>This is the wrappper class for a custom asset pack. Holds its meta data and path information.</p> <p>Accessed by <code>Global.Header</code>.</p>"},{"location":"reference/AssetPack/#properties","title":"Properties","text":"<p> String Name String ID String Version String Author Texture Preview String Keywords bool AllowThirdPartyUse bool OverrideCustomColor float MinRedness float MinSaturation float RedTolerance String Path </p>"},{"location":"reference/AssetPack/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>String Name:   Gets the name of the pack. </li> </ul> <ul> <li>String ID:   Gets the unique ID of the pack. </li> </ul> <ul> <li>String Version:   Gets the version of the pack. </li> </ul> <ul> <li>String Author:   Gets the author of the pack. </li> </ul> <ul> <li>Texture Preview:   Gets the preview image of the pack. </li> </ul> <ul> <li>String Keywords:   Gets keywords set by the author of the pack. </li> </ul> <ul> <li>bool AllowThirdPartyUse:   Gets if the pack author is permitting other mapping software to use this pack. </li> </ul> <ul> <li>bool OverrideCustomColor:   Gets if the author intends to override the default custom color settings. </li> </ul> <ul> <li>float MinRedness:   Gets the minimum redness before a pixel is considered a custom color. </li> </ul> <ul> <li>float MinSaturation:   Gets the minimum saturation of red before a pixel is considered a custom color. </li> </ul> <ul> <li>float RedTolerance:   Gets how far a red can deviate from red before it is no longer a custom color. </li> </ul> <ul> <li>String Path:   Gets the resource path of pack. </li> </ul>"},{"location":"reference/BorderedMesh/","title":"BorderedMesh","text":"<p>Extends: MarchingSquaresMesh &lt; MeshInstance2D</p>"},{"location":"reference/BorderedMesh/#description","title":"Description","text":"<p>Bordered Mesh is the base class for visual object that draws the Materials for Dungeondraft.</p>"},{"location":"reference/BorderedMesh/#properties","title":"Properties","text":"<p> Line2D[] Borders Texture BorderTexture bool Smooth bool isMeshesDirty bool IsMeshWorkerBusy int joint </p>"},{"location":"reference/BorderedMesh/#methods","title":"Methods","text":"<p> void SetBorderTexture ( Texture texture ) void FinalizeMeshAndBorders ( ) void UpdateBorders ( ) Line2D AddBorder ( Vector2[] points ) void SmoothMesh ( ) void ForceUpdateMesh ( ) </p>"},{"location":"reference/BorderedMesh/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Line2D[] Borders:   The Line2D that draws the border of the mesh. </li> </ul> <ul> <li>Texture BorderTexture:   The texture of the border. Does not get automatically updated when set. </li> </ul> <ul> <li>bool Smooth:   Toggle the smoothness of the mesh. Does not get automatically updated when set. </li> </ul> <ul> <li>bool isMeshesDirty:   Gets if the mesh has been modified but not yet visually updated. </li> </ul> <ul> <li>bool IsMeshWorkerBusy:   Gets if the mesh is under a heavy workload to update the mesh. Read only. </li> </ul> <ul> <li>int joint:   The joint mode of the border. Mesh update the border to see it reflected. 0 = Sharp, 1 = Bevel, 2 Round. </li> </ul>"},{"location":"reference/BorderedMesh/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetBorderTexture ( Texture texture ):   Change the mesh border if applicable. </li> </ul> <ul> <li>void FinalizeMeshAndBorders ( ):   Automatically called by OnDrawingEnd() to calculate the mesh. Heavy CPU load. </li> </ul> <ul> <li>void UpdateBorders ( ):   Clear the existing borders and remake to reflect changes to the mesh. Called by FinalizeMeshAndBorders(). </li> </ul> <ul> <li>Line2D AddBorder ( Vector2[] points ):   Create the border based on these points. Automatically called, so changes to the border through this method will be replaced whenever the user draws again. </li> </ul> <ul> <li>void SmoothMesh ( ):   Smooth the edge of the mesh after the mesh has been recreated. Called by FinalizeMeshAndBorders() if the Smooth property is set. </li> </ul> <ul> <li>void ForceUpdateMesh ( ):   Force the mesh to be updated.  Heavy. </li> </ul>"},{"location":"reference/Camera/","title":"Camera","text":"<p>Extends: Camera2D</p>"},{"location":"reference/Camera/#description","title":"Description","text":"<p>The wrapper class that adjusts the Camera2D class for use in Dungeondraft.</p> <p>Accessed by <code>Global.Exporter</code>.</p>"},{"location":"reference/Camera/#properties","title":"Properties","text":"<p> bool IsPanning </p>"},{"location":"reference/Camera/#methods","title":"Methods","text":"<p> void Pan ( Vector2 position ) void SetZoom ( float zoom ) void SetRawZoom ( float zoom ) void MouseZoom ( float zoom ) </p>"},{"location":"reference/Camera/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool IsPanning:   Get if the camera is being panned. </li> </ul>"},{"location":"reference/Camera/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Pan ( Vector2 position ):   Pan the camera. </li> </ul> <ul> <li>void SetZoom ( float zoom ):   Zoom the camera using inverted values. </li> </ul> <ul> <li>void SetRawZoom ( float zoom ):   Zoom the camera using raw values. </li> </ul> <ul> <li>void MouseZoom ( float zoom ):   Called by the mouse input to zoom the camera with the focus on the mouse cursor. </li> </ul>"},{"location":"reference/CaveBrush/","title":"CaveBrush","text":"<p>Extends: MeshBrush &lt; Tool &lt; Object</p>"},{"location":"reference/CaveBrush/#description","title":"Description","text":"<p>The tool used to edit caves.</p> <p>Accessed by <code>Global.Editor.Tools[\"CaveBrush\"]</code>.</p>"},{"location":"reference/CaveBrush/#properties","title":"Properties","text":"<p> Color GroundColor Color WallColor int Mode bool ShowBlastOpenedArea </p>"},{"location":"reference/CaveBrush/#methods","title":"Methods","text":"<p> void SetShowBlastOpenedArea ( bool value ) void ChangeTexture ( Texture texture, String name ) </p>"},{"location":"reference/CaveBrush/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color GroundColor:   Change the ground color. Write only. </li> </ul> <ul> <li>Color WallColor:   Change the wall color. Write only. </li> </ul> <ul> <li>int Mode:   Gets or sets if the brush is digging or blasting open a wall. 0 = Digs, 1 = Blasts Open </li> </ul> <ul> <li>bool ShowBlastOpenedArea:   Gets if the blast opened area is shown. Read only. Call SetShowBlastOpenedArea() to set. </li> </ul>"},{"location":"reference/CaveBrush/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetShowBlastOpenedArea ( bool value ):   Toggles if the blast opened area is shown. </li> </ul> <ul> <li>void ChangeTexture ( Texture texture, String name ):   Changes the cave texure. The parameter name is not used. </li> </ul>"},{"location":"reference/CaveMesh/","title":"CaveMesh","text":"<p>Extends: MarchingSquaresMesh &lt; MeshInstance2D</p>"},{"location":"reference/CaveMesh/#description","title":"Description","text":"<p>Cave Mesh is the visual object that draws the caves for Dungeondraft.</p>"},{"location":"reference/CaveMesh/#properties","title":"Properties","text":"<p> Texture CaveFloor Texture CaveWall bool Colorable Level Level Wall[] Walls bool isMeshesDirty bool IsMeshWorkerBusy Color GroundColor Color WallColor BitMap entranceBitmap BitMap previousEntranceBitmap bool IsDigging </p>"},{"location":"reference/CaveMesh/#methods","title":"Methods","text":"<p> void FinalizeMeshAndBorders ( ) void CreateNewEntranceBitmap ( ) void SetEntranceBitmap ( BitMap bitmap ) void SetGroundColor ( Color color ) void SetWallColor ( Color color ) void SetFloorTexture ( Texture floor ) void SimpleClipWalls ( ) void FullClipWalls ( ) </p>"},{"location":"reference/CaveMesh/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture CaveFloor:   Get the cave floor texture. Call SetFloorTexture() to set. </li> </ul> <ul> <li>Texture CaveWall:   Get the cave wall texture. </li> </ul> <ul> <li>bool Colorable:   Get or set if this cave is colorable. Automatically set by Dungeondraft. </li> </ul> <ul> <li>Level Level:   Get the level in which this cave is part of. </li> </ul> <ul> <li>Wall[] Walls:   Get the collection of Walls this cave automatically generated. </li> </ul> <ul> <li>bool isMeshesDirty:   Gets if the mesh has been modified but not yet visually updated. </li> </ul> <ul> <li>bool IsMeshWorkerBusy:   Gets if the mesh is under a heavy workload to update the mesh. Read only. </li> </ul> <ul> <li>Color GroundColor:   Get the color of the ground. Call SetGroundColor() to set. </li> </ul> <ul> <li>Color WallColor:   Get the color of the wall. Call SetWallColor() to set. </li> </ul> <ul> <li>BitMap entranceBitmap:   Get the bitmap that is used to denote blasted open areas. </li> </ul> <ul> <li>BitMap previousEntranceBitmap:   Get the previous version of the blasted open area bitmap. Used only to record undo history. </li> </ul> <ul> <li>bool IsDigging:   Get whether or not the user enabled dig mode. </li> </ul>"},{"location":"reference/CaveMesh/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void FinalizeMeshAndBorders ( ):   Automatically called by OnDrawingEnd() to calculate the mesh. Heavy CPU load. </li> </ul> <ul> <li>void CreateNewEntranceBitmap ( ):   Automatically called to initialize the cave. </li> </ul> <ul> <li>void SetEntranceBitmap ( BitMap bitmap ):   Replace the blasted open area bitmap with another one. Used by undo history. </li> </ul> <ul> <li>void SetGroundColor ( Color color ):   Set the ground color. </li> </ul> <ul> <li>void SetWallColor ( Color color ):   Set the wall color. </li> </ul> <ul> <li>void SetFloorTexture ( Texture floor ):   Set the floor texture. </li> </ul> <ul> <li>void SimpleClipWalls ( ):   Calculate the cave shape and create walls for it when there is no dungeon walls. </li> </ul> <ul> <li>void FullClipWalls ( ):   Calculate the cave shape and create walls for it when there is dungeon walls. Heavy CPU load. </li> </ul>"},{"location":"reference/ColorPalette/","title":"ColorPalette","text":"<p>Extends: HBoxContainer</p>"},{"location":"reference/ColorPalette/#description","title":"Description","text":"<p>Dungeondraft unique UI Control that allows the user to set a color for the tool and create a color palette.</p>"},{"location":"reference/ColorPalette/#properties","title":"Properties","text":"<p> ColorRect colorRect TextureRect iconRect Button paletteButton Button instantButton Popup popup ItemList colorList Popup colorPickerPopup ColorPicker colorPicker PopupMenu menu Color color </p>"},{"location":"reference/ColorPalette/#methods","title":"Methods","text":"<p> String[] Save ( ) void Load ( String[] data ) void SetColor ( Color color, bool emitSignal = true ) void AddPresets ( String[] hexcodes ) void ShowPalette ( ) void ShowPicker ( ) </p>"},{"location":"reference/ColorPalette/#signals","title":"Signals","text":"<ul> <li>color_changed ( ):   Signal emitted when the color is changed. Returns a Color. Not used but is emitted. </li> </ul>"},{"location":"reference/ColorPalette/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>ColorRect colorRect:   The box that shows the selected color to the user. </li> </ul> <ul> <li>TextureRect iconRect:   The dropdown arrow icon. Does not affect use. </li> </ul> <ul> <li>Button paletteButton:   The button the user presses to show the palette. </li> </ul> <ul> <li>Button instantButton:   The button the user presses to open the color picker. </li> </ul> <ul> <li>Popup popup:   The popup where the presets are displayed. </li> </ul> <ul> <li>ItemList colorList:   The ItemList that holds the individual preset colors. </li> </ul> <ul> <li>Popup colorPickerPopup:   The color picker popup. </li> </ul> <ul> <li>ColorPicker colorPicker:   Godot ColorPicker used by this Control to add new colors. </li> </ul> <ul> <li>PopupMenu menu:   The right-click context menu where the user can remove a color preset. </li> </ul> <ul> <li>Color color:   Color currently selected. Use SetColor() to change color. ONLY SAFE TO READ. </li> </ul>"},{"location":"reference/ColorPalette/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>String[] Save ( ):   Saves and returns the presets as an Array of hexcodes. </li> </ul> <ul> <li>void Load ( String[] data ):   Loads the presets from an Array of hexcodes. Calls AddPresets() internally. </li> </ul> <ul> <li>void SetColor ( Color color, bool emitSignal = true ):   Force the ColorPalette to set a specific color. If emitSignal is set, it emits the color_changed signal. </li> </ul> <ul> <li>void AddPresets ( String[] hexcodes ):   Takes an Array of hexcodes and adds them as colors to the color palette. </li> </ul> <ul> <li>void ShowPalette ( ):   Show the color palette selector </li> </ul> <ul> <li>void ShowPicker ( ):   Show the color picker </li> </ul>"},{"location":"reference/Editor/","title":"Editor","text":"<p>Extends: CanvasLayer</p>"},{"location":"reference/Editor/#description","title":"Description","text":"<p>The core class where editing and UI elements of Dungeondraft are held.</p> <p>Accessed by <code>Global.Editor</code>.</p>"},{"location":"reference/Editor/#properties","title":"Properties","text":"<p> Tool ActiveTool String ActiveToolName Toolset Toolset bool SuppressTool PreviewContainer Preview Dictionary TagsPanels ObjectLibraryPanel ObjectLibraryPanel PathLibraryPanel PathLibraryPanel bool IsSnapping String CurrentMapFile bool SearchHasFocus Dictionary Tools Dictionary Windows Control floatBar MenuButton menuButton Button newButton Button openButton Button saveButton Button exportButton Button undoButton Button redoButton Button assetsButton Button modsButton Button reloadModsButton Button aboutButton PopupMenu openRecentMenu Control content CheckBox CompareToggle Sprite PackPreview Node windowsNode Panel WindowShade bool isSettingGuide bool isMeasuring CheckBox GridToggle CheckBox LightingToggle OptionButton ZoomOptions OptionButton LevelOptions float[] ZoomLevels </p>"},{"location":"reference/Editor/#methods","title":"Methods","text":"<p> void DisableMenuButtons ( ) void EnableMapButtons ( ) void EnableTools ( bool value ) void OnSelectTool ( String tool ) void OnDeselectTool ( ) bool IsToolActive ( String tool ) void OnWindowOpen ( WindowDialog window ) void OnWindowClose ( WindowDialog window ) bool IsActiveModal ( Control control ) void OnOpenedOrSaved ( String path = \"\" ) void OnUpdateTitle ( String title ) void SetCursorShape ( int shape ) void SetDisableCompareToggle ( bool disable ) void SaveMap ( bool saveAs ) void OpenMap ( ) void InitMenu ( ) void UpdateOpenRecent ( ) void UpdateLevelOptions ( ) void SetLevelOptionsByID ( int ID ) void ToggleGrid ( bool enabled ) void ToggleLighting ( bool enabled ) void SetZoomOptionByRaw ( float zoom ) void OnLevelChanged ( ) void OpenTagsBrowser ( ) void Warn ( String title, String text ) void OnFilesDropped ( String[] files ) void ForceOpenMap ( String file ) void EnlargeControls ( Node parent ) void EnlargeButton ( Button button ) </p>"},{"location":"reference/Editor/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Tool ActiveTool:   Get the currently active tool. Change with OnSelectTool(). </li> </ul> <ul> <li>String ActiveToolName:   Get the name of the currently active tool. </li> </ul> <ul> <li>Toolset Toolset:   Get the toolset. </li> </ul> <ul> <li>bool SuppressTool:   Get or set if the active tool is blocked from being used. </li> </ul> <ul> <li>PreviewContainer Preview:   Get the preview container used by the object library. </li> </ul> <ul> <li>Dictionary TagsPanels:   Lookup table for tag panels. Valid options are: \"ObjectTool\" and \"ScatterTool\". </li> </ul> <ul> <li>ObjectLibraryPanel ObjectLibraryPanel:   Gets the panel that displays the object library menu. </li> </ul> <ul> <li>PathLibraryPanel PathLibraryPanel:   Gets the panel that displays the path library menu. </li> </ul> <ul> <li>bool IsSnapping:   Get the if the user has grid snapping enabled. </li> </ul> <ul> <li>String CurrentMapFile:   Get the path of the current opened map. </li> </ul> <ul> <li>bool SearchHasFocus:   Gets if the search has the user input focus. </li> </ul> <ul> <li>Dictionary Tools:   A Dictionary of String key - Tool value pairs to find a tool by its name. See ../../Global for a list of Tools. </li> </ul> <ul> <li>Dictionary Windows:   A Dictionary of String key - WindowDialog value pairs to find a window by its name. </li> </ul> <ul> <li>Control floatBar:   Parent of the bottom bar. </li> </ul> <ul> <li>MenuButton menuButton:   The main menu button on the top bar. </li> </ul> <ul> <li>Button newButton:   The new button on the top bar. </li> </ul> <ul> <li>Button openButton:   The open button on the top bar. </li> </ul> <ul> <li>Button saveButton:   The save button on the top bar. </li> </ul> <ul> <li>Button exportButton:   The export button on the top bar. </li> </ul> <ul> <li>Button undoButton:   The undo button on the top bar. </li> </ul> <ul> <li>Button redoButton:   The redo button on the top bar. </li> </ul> <ul> <li>Button assetsButton:   The assets button on the top bar. </li> </ul> <ul> <li>Button modsButton:   The mods button on the top bar. </li> </ul> <ul> <li>Button reloadModsButton:   The reload mods button on the top bar. </li> </ul> <ul> <li>Button aboutButton:   The about button on the top bar. </li> </ul> <ul> <li>PopupMenu openRecentMenu:   The sub menu inside the main menu to open recently opened maps. </li> </ul> <ul> <li>Control content:"},{"location":"reference/Editor/#_1","title":"Editor","text":"<ul> <li>CheckBox CompareToggle:   The toggle to turn on level comparisons. </li> </ul> <ul> <li>Sprite PackPreview:   The image displayed when the mouse hovers over an Asset Pack preview image. </li> </ul> <ul> <li>Node windowsNode:   Parent node of all the windows. </li> </ul> <ul> <li>Panel WindowShade:   A box that darkens the window behind a modal window when it is opened. </li> </ul> <ul> <li>bool isSettingGuide:   Get if the user is in the process of adding a guide line </li> </ul> <ul> <li>bool isMeasuring:   Gets if the user is in the process of adding a ruler. </li> </ul> <ul> <li>CheckBox GridToggle:   The toggle that controls if the grid is visible. </li> </ul> <ul> <li>CheckBox LightingToggle:   The toggle that controls if the lighting is enabled. </li> </ul> <ul> <li>OptionButton ZoomOptions:   The bottom bar dropdown used to select a map zoom level. </li> </ul> <ul> <li>OptionButton LevelOptions:   The bottom bar dropdown used change the level/floor of the map. </li> </ul> <ul> <li>float[] ZoomLevels:   Read only array of zoom levels used by Dungeondraft. </li> </ul>"},{"location":"reference/Editor/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void DisableMenuButtons ( ):   Disable the top menu bar. </li> </ul> <ul> <li>void EnableMapButtons ( ):   Enable the top menu bar and enable the map options in the main menu. </li> </ul> <ul> <li>void EnableTools ( bool value ):   Enable tool usage. </li> </ul> <ul> <li>void OnSelectTool ( String tool ):   Set the properties to a new tool. Called by ToolbarButton. </li> </ul> <ul> <li>void OnDeselectTool ( ):   Clear the tool properties after deselecting a tool. </li> </ul> <ul> <li>bool IsToolActive ( String tool ):   Check if the a certain tool is active by its name. </li> </ul> <ul> <li>void OnWindowOpen ( WindowDialog window ):   Called by modal windows when they are about_to_show. You can connect a new window you made and its about_to_show signal to this method to also make it modal when it is opened. </li> </ul> <ul> <li>void OnWindowClose ( WindowDialog window ):   Called by modal windows when they closing. You can connect a new window you made and its popup_hide signal to this method to also make it no longer modal when it is closed. </li> </ul> <ul> <li>bool IsActiveModal ( Control control ):   Check if this control or window is what is the top modal UI element. </li> </ul> <ul> <li>void OnOpenedOrSaved ( String path = \"\" ):   Tell Dungeondraft a map does not have any new changes and the same as the file. </li> </ul> <ul> <li>void OnUpdateTitle ( String title ):   Change the title of the OS window. </li> </ul> <ul> <li>void SetCursorShape ( int shape ):   Change the cursor when the mouse is over the map. See https://docs.godotengine.org/en/3.4/classes/class_input.html#enum-input-cursorshape. </li> </ul> <ul> <li>void SetDisableCompareToggle ( bool disable ):   Disable the compare toggle button. </li> </ul> <ul> <li>void SaveMap ( bool saveAs ):   Save the map. If the map is new, prompt the user for a map file name. </li> </ul> <ul> <li>void OpenMap ( ):   Prompt the user to open a new map. </li> </ul> <ul> <li>void InitMenu ( ):   Initialize the main menu. Called once on Launch. </li> </ul> <ul> <li>void UpdateOpenRecent ( ):   Initialize the recently opened sub menu in the main menu </li> </ul> <ul> <li>void UpdateLevelOptions ( ):   Update the LevelOptions menu to reflect the currently selected level. </li> </ul> <ul> <li>void SetLevelOptionsByID ( int ID ):   Change the LevelOptions menu to select a different level manually. Does not change level. </li> </ul> <ul> <li>void ToggleGrid ( bool enabled ):   Toggle the grid. </li> </ul> <ul> <li>void ToggleLighting ( bool enabled ):   Toggle the lighting. </li> </ul> <ul> <li>void SetZoomOptionByRaw ( float zoom ):   Set the camera by a raw zoom value and have the ZoomOptions menu reflect the change. </li> </ul> <ul> <li>void OnLevelChanged ( ):   Called when the level is changed by the user to inform the active tool that the level changed. </li> </ul> <ul> <li>void OpenTagsBrowser ( ):   Opens the Tags Browser. </li> </ul> <ul> <li>void Warn ( String title, String text ):   Prompts the user with a warning text box. </li> </ul> <ul> <li>void OnFilesDropped ( String[] files ):   Trigger files being dropped. Will open a map if dropped, and will embed an image as a Prop if dropped. </li> </ul> <ul> <li>void ForceOpenMap ( String file ):   Force opens a map by its file path. </li> </ul> <ul> <li>void EnlargeControls ( Node parent ):   Doubles the size of a UI element and all its children. Use with care. </li> </ul> <ul> <li>void EnlargeButton ( Button button ):   Look for a double sized icon for a button if available. </li> </ul>"},{"location":"reference/Environment/","title":"Environment","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/Environment/#description","title":"Description","text":"<p>The tool used to edit the environment. Only affects the ambient light.</p> <p>Accessed by <code>Global.Editor.Tools[\"Environment\"]</code>.</p>"},{"location":"reference/Environment/#properties","title":"Properties","text":"<p> Color AmbientLight </p>"},{"location":"reference/Environment/#methods","title":"Methods","text":"<p> void SetAmbientLight ( Color color ) </p>"},{"location":"reference/Environment/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color AmbientLight:   Gets or sets the ambient light color </li> </ul>"},{"location":"reference/Environment/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetAmbientLight ( Color color ):   Sets the ambient light color. Already called by AmbientLight property when you set it. </li> </ul>"},{"location":"reference/Exporter/","title":"Exporter","text":"<p>Extends: Object</p>"},{"location":"reference/Exporter/#description","title":"Description","text":"<p>The class instance that exports maps to images and other formats.</p> <p>Accessed by <code>Global.Exporter</code>.</p>"},{"location":"reference/Exporter/#properties","title":"Properties","text":"<p> Viewport Viewport ViewportContainer ViewportContainer Camera Camera int Quality bool UseCustomChunkSize Vector2 exportOrigin Vector2 exportSize </p>"},{"location":"reference/Exporter/#methods","title":"Methods","text":"<p> void Start ( int mode, int ppi, String path ) void WriteForVTT ( int ppi, String path ) void WriteJSON ( Dictionary data, String path ) void WriteForMod ( int ppi, String path ) Dictionary ExportForVTT ( int ppi, File image = null ) Dictionary ExportResolution ( int ppi ) Array[] ExportLOS ( ) Array[] ExportObjectsLOS ( ) String ExportImageBase64 ( File image ) Dictionary[] ExportPortals ( ) Dictionary[] ExportLights ( ) Vector2 GetCustomChunkSize ( ) void SetCustomChunkSize ( Vector2 size ) </p>"},{"location":"reference/Exporter/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Viewport Viewport:   Gets the main viewport that display </li> </ul> <ul> <li>ViewportContainer ViewportContainer:   Gets the container that holds the viewport of the map. </li> </ul> <ul> <li>Camera Camera:   Gets the map camera. </li> </ul> <ul> <li>int Quality:   Get or set the quality of the export from 1 to 100 if using an applicable format. </li> </ul> <ul> <li>bool UseCustomChunkSize:   Toggle is the exporter will export in chunks of a custom size. </li> </ul> <ul> <li>Vector2 exportOrigin:   Gets the export start position in world space. Read only. </li> </ul> <ul> <li>Vector2 exportSize:   Gets the export size in world space. Read only. </li> </ul>"},{"location":"reference/Exporter/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Start ( int mode, int ppi, String path ):   Starts the export process. Runs on separate thread. The parameter mode sets which format to export to. Valid options are: 0 = PNG, 1 = JPEG, 2 = WEBP, 3 = UniversalVTT, 4 = Mod. </li> </ul> <ul> <li>void WriteForVTT ( int ppi, String path ):   Called by the Exporter whenever VTT info baking is required. </li> </ul> <ul> <li>void WriteJSON ( Dictionary data, String path ):   Called by the Exporter to convert a Dictionary to a JSON file. </li> </ul> <ul> <li>void WriteForMod ( int ppi, String path ):   Called by the Exporter to process any mod processes. </li> </ul> <ul> <li>Dictionary ExportForVTT ( int ppi, File image = null ):   Called by the Exporter to pull any map data into a Dictionary before saving as JSON. </li> </ul> <ul> <li>Dictionary ExportResolution ( int ppi ):   Called by ExportForVTT() to parse map resolution data into a Dictionary. </li> </ul> <ul> <li>Array[] ExportLOS ( ):   Called by ExportForVTT() to parse LOS data into an Array of Array of Vector2 points. </li> </ul> <ul> <li>Array[] ExportObjectsLOS ( ):   Called by ExportForVTT() to parse object LOS data into an Array of Array of Vector2 points. </li> </ul> <ul> <li>String ExportImageBase64 ( File image ):   Convert an image into a base64 string. </li> </ul> <ul> <li>Dictionary[] ExportPortals ( ):   Called by ExportForVTT() to parse portals meta data into an Array of portal data. </li> </ul> <ul> <li>Dictionary[] ExportLights ( ):   Called by ExportForVTT() to parse lights meta data into an Array of light data. </li> </ul> <ul> <li>Vector2 GetCustomChunkSize ( ):   Gets the custom camera chunk size if enabled. </li> </ul> <ul> <li>void SetCustomChunkSize ( Vector2 size ):   Sets the custom camera chunk size if enabled. </li> </ul>"},{"location":"reference/FloorShapeTool/","title":"FloorShapeTool","text":"<p>Extends: ShapeTool &lt; Tool &lt; Object</p>"},{"location":"reference/FloorShapeTool/#description","title":"Description","text":"<p>The tool used to edit floor shapes. Use World.Level.FloorShapes if you want to create floor shapes instead.</p> <p>Accessed by <code>Global.Editor.Tools[\"FloorShapeTool\"]</code>.</p>"},{"location":"reference/FloorShapeTool/#properties","title":"Properties","text":"<p> int SmartTileId Texture WallTexture Color WallColor bool Bevel Button EditPoints bool isDragging </p>"},{"location":"reference/FloorShapeTool/#methods","title":"Methods","text":"<p> void ChangeColor ( Color color, String name ) Color GetWallColor ( Texture texture = null ) void SetWallColor ( Color color ) </p>"},{"location":"reference/FloorShapeTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int SmartTileId:   Gets and sets the floor style id </li> </ul> <ul> <li>Texture WallTexture:   Gets and sets the wall texture/style </li> </ul> <ul> <li>Color WallColor:   Gets and sets the wall color </li> </ul> <ul> <li>bool Bevel:   Gets and sets whether the walls should have beveled corners. </li> </ul> <ul> <li>Button EditPoints:   The UI control that determines if the user is editing existing points instead of creating new shapes. </li> </ul> <ul> <li>bool isDragging:   Is the user actively dragging a point on an existing floor shape. </li> </ul>"},{"location":"reference/FloorShapeTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void ChangeColor ( Color color, String name ):   Changes the floor colors. Valid entries for names are: \"FloorColor\" and \"WallColor\". </li> </ul> <ul> <li>Color GetWallColor ( Texture texture = null ):   Get the current selected wall style's color if applicable. </li> </ul> <ul> <li>void SetWallColor ( Color color ):   Set the current selected wall style's color if applicable. </li> </ul>"},{"location":"reference/FloorShapes/","title":"FloorShapes","text":"<p>Extends: Shapes &lt; Plexigon2D &lt; Node2D</p>"},{"location":"reference/FloorShapes/#description","title":"Description","text":"<p>A type of Shapes that draws the floor tiles and automatically adds border walls.</p>"},{"location":"reference/FloorShapes/#properties","title":"Properties","text":"<p> Level Level Wall[] Walls bool SuppressHistory Vector2[] newestShape </p>"},{"location":"reference/FloorShapes/#methods","title":"Methods","text":"<p> bool ClipWalls ( ) void ReplacePortal ( Portal portal ) void Restore ( Dictionary data ) void ForgetWall ( Wall wall ) </p>"},{"location":"reference/FloorShapes/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this instance belongs in. </li> </ul> <ul> <li>Wall[] Walls:   The walls auto-generated by this class. </li> </ul> <ul> <li>bool SuppressHistory:   When enabled, stops recording undo history. </li> </ul> <ul> <li>Vector2[] newestShape:   The points of the last shape that was added by the user or another script. </li> </ul>"},{"location":"reference/FloorShapes/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>bool ClipWalls ( ):   Called automatically when the FloorShapeTool updates this Shapes or by the parent method FinalizeOutlines() to generate a set of border walls. Returns true if walls had to change and false is nothing had to change. </li> </ul> <ul> <li>void ReplacePortal ( Portal portal ):   Called by ClipWalls() whenever a wall is updated so that any Portal is recreated in the proper location. Not called directly. </li> </ul> <ul> <li>void Restore ( Dictionary data ):   Recreate a wall from a serialized data. Used by undo history. </li> </ul> <ul> <li>void ForgetWall ( Wall wall ):   Remove a deleted Wall from memory. DO NOT CALL DIRECTLY. </li> </ul>"},{"location":"reference/FloorTileCamera/","title":"FloorTileCamera","text":"<p>Extends: Camera2D</p>"},{"location":"reference/FloorTileCamera/#description","title":"Description","text":"<p>Helper camera class that is a Camera2D but copies any pan, zoom, or anchor mode changes of the main camera. No options available.</p>"},{"location":"reference/FloorTileCamera/#methods","title":"Methods","text":"<p> void UpdateCamera ( ) </p>"},{"location":"reference/FloorTileCamera/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void UpdateCamera ( ):   Clone the pan and zoom of the main camera. </li> </ul>"},{"location":"reference/FloorTileMap/","title":"FloorTileMap","text":"<p>Extends: TileMap</p>"},{"location":"reference/FloorTileMap/#description","title":"Description","text":""},{"location":"reference/FloorTileMap/#properties","title":"Properties","text":"<p> Level Level Vector2 CellSize int width int height </p>"},{"location":"reference/FloorTileMap/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) Dictionary GetUsedTileTextures ( ) void AddRect ( Rect2 rect, bool invertAction ) void UpdateRect ( Rect2 rect ) </p>"},{"location":"reference/FloorTileMap/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   Level in which this floor tile map belongs. Read only. </li> </ul> <ul> <li>Vector2 CellSize:   Cached size of a cell. Read only. </li> </ul> <ul> <li>int width:   Width of the map in cells. Read only. </li> </ul> <ul> <li>int height:   Height of the map in cells. Read only. </li> </ul>"},{"location":"reference/FloorTileMap/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Save the FloorTileMap into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved FloorTileMap data. Used by a saved map file to load existing floor tiles. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>Dictionary GetUsedTileTextures ( ):   Returns a Dictionary of int key - Texture value pairs that indicate the tile id and texture of tiles used in this map. </li> </ul> <ul> <li>void AddRect ( Rect2 rect, bool invertAction ):   Draw or erase a region of floor tiles using the FloorShapeTool's SmartTileID property as the tile id. </li> </ul> <ul> <li>void UpdateRect ( Rect2 rect ):   Call on the region last modified to visually update the to use the correct Smart tile directions. </li> </ul>"},{"location":"reference/GridMenu/","title":"GridMenu","text":"<p>Extends: ItemList</p>"},{"location":"reference/GridMenu/#description","title":"Description","text":"<p>Custom Dungeondraft UI element that is meant to display assets. The underlying Godot type is Texture.</p>"},{"location":"reference/GridMenu/#properties","title":"Properties","text":"<p> bool ShowsPreview bool CustomColorPreview bool IsPatterns bool ShowsItemText Dictionary Lookup String category Texture Selected </p>"},{"location":"reference/GridMenu/#methods","title":"Methods","text":"<p> void Load ( String category ) void Reset ( ) void ShowSet ( Texture[] thumbnails ) void SelectTexture ( Texture texture ) void MultiselectTexture ( Texture texture ) void OnItemSelected ( int index ) void OnMultiSelected ( int index, bool selected ) void SelectPrevious ( ) void SelectNext ( ) Texture[] GetMultiselectedTextures ( ) void SetCustomColor ( Color color ) </p>"},{"location":"reference/GridMenu/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool ShowsPreview:   Show a preview of the asset when the user mouses over. </li> </ul> <ul> <li>bool CustomColorPreview:   Colorize the icons whenever it is of an asset that can be custom colored. </li> </ul> <ul> <li>bool IsPatterns:   Must be enabled if you loaded a category of assets that is a pattern. </li> </ul> <ul> <li>bool ShowsItemText:   Display the name of the asset below its icon. </li> </ul> <ul> <li>Dictionary Lookup:   A Dictionary of String, int pairs that keys an asset's relative resource path to the index number in this menu. DO NOT MODIFY. </li> </ul> <ul> <li>String category:   The category of assets that was loaded. DO NOT MODIFY. </li> </ul> <ul> <li>Texture Selected:   Get the current selected asset as a Godot Texture. </li> </ul>"},{"location":"reference/GridMenu/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Load ( String category ):   Load a category of assets into this GridMenu. Must be called for this to work. Valid Asset Categories. </li> </ul> <ul> <li>void Reset ( ):   Reload the assets. </li> </ul> <ul> <li>void ShowSet ( Texture[] thumbnails ):   Show only a certain subset of assets. Takes an array of thumbnail Texture only. Finicky. </li> </ul> <ul> <li>void SelectTexture ( Texture texture ):   Single-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void MultiselectTexture ( Texture texture ):   Multi-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void OnItemSelected ( int index ):   Called by the UI control when a user single-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void OnMultiSelected ( int index, bool selected ):   Called by the UI control when a user multi-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void SelectPrevious ( ):   Select the previous asset from the current cursor position. </li> </ul> <ul> <li>void SelectNext ( ):   Select the next asset from the current cursor position. </li> </ul> <ul> <li>Texture[] GetMultiselectedTextures ( ):   Get all the selected textures. </li> </ul> <ul> <li>void SetCustomColor ( Color color ):   Sets the preview color for custom color assets </li> </ul>"},{"location":"reference/Header/","title":"Header","text":"<p>Extends: Reference</p>"},{"location":"reference/Header/#description","title":"Description","text":"<p>Meta data class that holds information for a map.</p> <p>Accessed by <code>Global.Header</code>.</p>"},{"location":"reference/Header/#properties","title":"Properties","text":"<p> String CreationBuild Dictionary CreationDate bool UsesDefaultAssets AssetPack[] AssetManifest Dictionary EditorState </p>"},{"location":"reference/Header/#methods","title":"Methods","text":"<p> Dictionary Save ( ) </p>"},{"location":"reference/Header/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>String CreationBuild:   Gets the build name of Dungeondraft used to create this map. </li> </ul> <ul> <li>Dictionary CreationDate:   Gets a Dictionary of Datetime when this map was created in String key - String value format. </li> </ul> <ul> <li>bool UsesDefaultAssets:   Gets if this map is using default assets. </li> </ul> <ul> <li>AssetPack[] AssetManifest:   Gets an Array of custom asset packs that this pack uses. </li> </ul> <ul> <li>Dictionary EditorState:   A Dictionary that holds various user editor state when they last closed the program. </li> </ul>"},{"location":"reference/Header/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Serialize the metadata of the current map header in JSON format. </li> </ul>"},{"location":"reference/Level/","title":"Level","text":"<p>Extends: Node2D</p>"},{"location":"reference/Level/#description","title":"Description","text":"<p>This object holds nearly every visible asset or item you can place onto a map. Consider it a floor of your dungeon.</p>"},{"location":"reference/Level/#properties","title":"Properties","text":"<p> int ID FloorTileMap TileMap FloorShapes FloorShapes PatternShapes PatternShapes CaveMesh CaveMesh Terrain Terrain WaterMesh WaterMesh Walls Walls Node2D Portals Pathways Pathways Objects Objects Roofs Roofs Lights Lights Texts Texts Node2D MaterialMeshes Dictionary MeshLookup Dictionary Data bool WasLoaded bool Cloning String Label Viewport FloorRT FloorTileCamera FloorTileCamera ColorRect LightPassRender BackBufferCopy LightPassBBC </p>"},{"location":"reference/Level/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void CreateDefaultLockedLayers ( ) void CreateDefaultUserLayers ( ) Dictionary SaveLayers ( ) void LoadLayers ( Dictionary data ) MaterialMesh GetOrMakeMaterialMesh ( int layer, Texture texture, bool smoothDefault ) void AddMaterialLayer ( int layer ) void CleanMaterialMeshes ( ) bool IsMeshEmpty ( int layer, Texture texture ) Dictionary SaveMaterialMeshes ( ) void LoadMaterialMeshes ( Dictionary data ) void CreateFreestandingPortal ( Texture texture, Vector2 position, bool closed, float radius, float rotation ) Dictionary[] SaveFreestandingPortals ( ) void LoadFreestandingPortals ( Dictionary[] data ) Portal LoadFreestandingPortal ( Dictionary item ) Dictionary SaveEnvironment ( ) void LoadEnvironment ( Dictionary data ) void UpdateFloorRT ( Vector2 size ) void ToggleLighting ( bool value ) Dictionary Deserialize ( String text ) Rect2 GetSelectionRect ( Dictionary things ) </p>"},{"location":"reference/Level/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int ID:   Numerical ID of the level </li> </ul> <ul> <li>FloorTileMap TileMap:   Gets the tilemap that draws the tiling style of floor shapes. </li> </ul> <ul> <li>FloorShapes FloorShapes:   Gets the parent of the polygons that draw the tilemap for floors. </li> </ul> <ul> <li>PatternShapes PatternShapes:   Gets the parent of the pattern shapes. </li> </ul> <ul> <li>CaveMesh CaveMesh:   Gets the cave mesh. </li> </ul> <ul> <li>Terrain Terrain:   Gets the terrain. </li> </ul> <ul> <li>WaterMesh WaterMesh:   Gets the water mesh. </li> </ul> <ul> <li>Walls Walls:   Gets the parent of the walls. </li> </ul> <ul> <li>Node2D Portals:   Gets the parent of the portals. </li> </ul> <ul> <li>Pathways Pathways:   Gets the parent of the pathways. </li> </ul> <ul> <li>Objects Objects:   Gets the parent of the objects. </li> </ul> <ul> <li>Roofs Roofs:   Gets the parent of the roofs. </li> </ul> <ul> <li>Lights Lights:   Gets the parent of the lights. </li> </ul> <ul> <li>Texts Texts:   Gets the parent of the texts. </li> </ul> <ul> <li>Node2D MaterialMeshes:   Gets the parent of the materials. </li> </ul> <ul> <li>Dictionary MeshLookup:   Table of String key - MarchingSquaresMesh value pairs to lookup meshes by their IDs. Cave is specifically labelled \"Cave\", while Materials are auto-generated and need to be referenced by their LookupID. </li> </ul> <ul> <li>Dictionary Data:   Gets or sets the saved data that was used to load this Level. </li> </ul> <ul> <li>bool WasLoaded:   Gets if this Level was loaded from saved data. Read only. </li> </ul> <ul> <li>bool Cloning:   Gets if this Level is one that is a clone still in the process of cloning. Read only. </li> </ul> <ul> <li>String Label:   Get or set the name of the level. </li> </ul> <ul> <li>Viewport FloorRT:   Offscreen viewport to render any floor tiles. </li> </ul> <ul> <li>FloorTileCamera FloorTileCamera:   Offscreen camera to render floor tiles to a texture that will be used in the main viewport as a ViewportTexture. </li> </ul> <ul> <li>ColorRect LightPassRender:   Full screen rect used to combine lighting into a single deferred pass. </li> </ul> <ul> <li>BackBufferCopy LightPassBBC:   Special Godot class used to render the viewport to a texture to use for lighting. </li> </ul>"},{"location":"reference/Level/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Save the level into the save file format and return it as a Dictionary. Calls the Save() method in all the assets inside this level as well. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved level data. Used by a saved map file to load existing levels. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void CreateDefaultLockedLayers ( ):   Called automatically upon creation to create the locked layers to protect layers used by special assets. </li> </ul> <ul> <li>void CreateDefaultUserLayers ( ):   Called automatically upon creation to create the user layers. </li> </ul> <ul> <li>Dictionary SaveLayers ( ):   Save any assets in layers into the save file format and return it as a Dictionary. Calls the Save() method in all the assets inside this level as well. </li> </ul> <ul> <li>void LoadLayers ( Dictionary data ):   Load a saved level's layers data. Used by a saved map file to load existing levels. </li> </ul> <ul> <li>MaterialMesh GetOrMakeMaterialMesh ( int layer, Texture texture, bool smoothDefault ):   Gets the MaterialMesh at the layer with the specified texture. If non-existent, then create a new one. </li> </ul> <ul> <li>void AddMaterialLayer ( int layer ):   Create a new material layer </li> </ul> <ul> <li>void CleanMaterialMeshes ( ):   Delete any material meshes that no longer have any shapes painted. </li> </ul> <ul> <li>bool IsMeshEmpty ( int layer, Texture texture ):   Checks if any material texture at a certain layer is empty of shapes. </li> </ul> <ul> <li>Dictionary SaveMaterialMeshes ( ):   Save materials into the save file format and return it as a Dictionary. Called by the Save() method. </li> </ul> <ul> <li>void LoadMaterialMeshes ( Dictionary data ):   Load a saved level's materials data. Used by a saved map file to load existing levels. Called by the Load() method. </li> </ul> <ul> <li>void CreateFreestandingPortal ( Texture texture, Vector2 position, bool closed, float radius, float rotation ):   Create a freestanding portal in this level </li> </ul> <ul> <li>Dictionary[] SaveFreestandingPortals ( ):   Save freestanding portals into the save file format and return it as an Array. Called by the Save() method. </li> </ul> <ul> <li>void LoadFreestandingPortals ( Dictionary[] data ):   Load a saved level's freestanding portals data. Used by a saved map file to load existing levels. Called by the Load() method. </li> </ul> <ul> <li>Portal LoadFreestandingPortal ( Dictionary item ):   Load a single freestanding portals data. Used by a saved map file to load existing levels. Called by the Load() method. </li> </ul> <ul> <li>Dictionary SaveEnvironment ( ):   Save the environment into the save file format and return it as a Dictionary. Called by the Save() method. </li> </ul> <ul> <li>void LoadEnvironment ( Dictionary data ):   Load a saved level's environment data. Used by a saved map file to load existing levels. Called by the Load() method. </li> </ul> <ul> <li>void UpdateFloorRT ( Vector2 size ):   Called by Resize() to update the FloorRT viewport. </li> </ul> <ul> <li>void ToggleLighting ( bool value ):   Toggle the lighting visibility. </li> </ul> <ul> <li>Dictionary Deserialize ( String text ):   Load instances of placed assets in prefab data format and return it as a Dictionary with Node2D key - int value pairs, the int being its SelectableType. </li> </ul> <ul> <li>Rect2 GetSelectionRect ( Dictionary things ):   Measure and return the Rect2 that would enclose a Dictionary of selectable things. The Dictionary is of Node2D key - int value pairs, the int being its SelectableType. </li> </ul>"},{"location":"reference/LightTool/","title":"LightTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/LightTool/#description","title":"Description","text":"<p>The tool used to edit lights.</p> <p>Accessed by <code>Global.Editor.Tools[\"LightTool\"]</code>.</p>"},{"location":"reference/LightTool/#properties","title":"Properties","text":"<p> Range Range float Intensity Color Color bool Shadows bool Widgets Texture texture Light2D preview </p>"},{"location":"reference/LightTool/#methods","title":"Methods","text":"<p> void CreatePreview ( ) void ChangeColor ( Color color, String name ) void SetShadows ( bool shadows ) </p>"},{"location":"reference/LightTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range Range:   Gets and sets the range of the lights placed. </li> </ul> <ul> <li>float Intensity:   Gets and sets the intensity of the lights placed. </li> </ul> <ul> <li>Color Color:   Gets and sets whether the tool will place lights that cast LOS shadows. Will not update active light. Set with ChangeColor() instead if you need to update active light. </li> </ul> <ul> <li>bool Shadows:   Gets and sets whether the tool will place lights that cast LOS shadows. Will not update active light. Set with SetShadows() instead if you need to update active light. </li> </ul> <ul> <li>bool Widgets:   Gets and sets whether the tool will display a widget over the light. </li> </ul> <ul> <li>Texture texture:  Light2D of the asset selected. Used automatically by the UI controls. Does not update the preview link:<code>Light2D</code> automatically. </li> </ul> <ul> <li>Light2D preview:   Gets the preview Light before it is placed. DO NOT MODIFY. </li> </ul>"},{"location":"reference/LightTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void CreatePreview ( ):   Create a new light as a preview and store it in the preview property. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Sets the color of the light and subsequent light placements. The param name is not used. </li> </ul> <ul> <li>void SetShadows ( bool shadows ):   Sets whether the tool will place lights that cast LOS shadows. </li> </ul>"},{"location":"reference/Lights/","title":"Lights","text":"<p>Extends: Node2D</p>"},{"location":"reference/Lights/#description","title":"Description","text":"<p>The parent class holding all Light2D of a Level.</p>"},{"location":"reference/Lights/#properties","title":"Properties","text":"<p> Level Level Environment environment </p>"},{"location":"reference/Lights/#methods","title":"Methods","text":"<p> Light2D CreateLight ( bool showWidget = false ) Dictionary[] Save ( ) void Load ( Dictionary[] data ) Dictionary SaveLight ( Light2D light, bool copy = false ) Light2D LoadLight ( Dictionary data ) void EnableWidgets ( bool value, bool enableAttention = false ) void Resize ( int x, int y, int w, int h ) </p>"},{"location":"reference/Lights/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul> <ul> <li>Environment environment:   Get the reference to the Environment of this Level. </li> </ul>"},{"location":"reference/Lights/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Light2D CreateLight ( bool showWidget = false ):   Create a new Light2D and add it as a child. </li> </ul> <ul> <li>Dictionary[] Save ( ):   Save all lights in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved light data. Used by a saved map file to load existing lights. </li> </ul> <ul> <li>Dictionary SaveLight ( Light2D light, bool copy = false ):   Save the Prop into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>Light2D LoadLight ( Dictionary data ):   Load a saved Light data. Used by a saved map file to load existing lights. Called by Load(). </li> </ul> <ul> <li>void EnableWidgets ( bool value, bool enableAttention = false ):   Toggle if the UI widget for the light is visible. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul>"},{"location":"reference/MapSettings/","title":"MapSettings","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/MapSettings/#description","title":"Description","text":"<p>The tool used to edit the map settings.</p> <p>Accessed by <code>Global.Editor.Tools[\"MapSettings\"]</code>.</p>"},{"location":"reference/MapSettings/#properties","title":"Properties","text":"<p> Color GridColor </p>"},{"location":"reference/MapSettings/#methods","title":"Methods","text":"<p> void SetGridColor ( Color color ) void SetCameraFilter ( int filter ) void SetGridStyle ( int style ) void UpdateStyleFromWorld ( ) void SetBuildingWear ( int index ) </p>"},{"location":"reference/MapSettings/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color GridColor:   Gets or sets the grid color. Safe to both read and write. </li> </ul>"},{"location":"reference/MapSettings/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetGridColor ( Color color ):   Set the camera filter type. 0 is off. 1 is sepia, and 2 is vignette. </li> </ul> <ul> <li>void SetCameraFilter ( int filter ):   Set the camera filter type. 0 is off. 1 is sepia, and 2 is vignette. </li> </ul> <ul> <li>void SetGridStyle ( int style ):   Set the grid texture used to display a pattern. </li> </ul> <ul> <li>void UpdateStyleFromWorld ( ):   Called when this tool is enabled to update the UI controls to reflect a loaded map's settings. </li> </ul> <ul> <li>void SetBuildingWear ( int index ):   Set the building wear texture applied on walls and floors. 0 is off. </li> </ul>"},{"location":"reference/MarchingSquaresMesh/","title":"MarchingSquaresMesh","text":"<p>Extends: MeshInstance2D</p>"},{"location":"reference/MarchingSquaresMesh/#description","title":"Description","text":"<p>This class converts a 2d array of bits into a shape using an algorithm called March Squares.</p>"},{"location":"reference/MarchingSquaresMesh/#properties","title":"Properties","text":"<p> String LookupID bool IsDrawing bool IsEmpty ArrayMesh arrayMesh BitMap bitmap int MapWidth int MapHeight float CellSize float OffsetScale BitMap[] brushes BitMap previousBitmap </p>"},{"location":"reference/MarchingSquaresMesh/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void OnDrawingBegin ( ) void OnDrawingEnd ( ) void CreateNewBitmap ( ) void SetBitmap ( BitMap bitmap ) void Clear ( ) void SetCircle ( Vector2 position, int size, bool value ) void UpdateMesh ( ) </p>"},{"location":"reference/MarchingSquaresMesh/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>String LookupID:   Used by the Level to identify the mesh. </li> </ul> <ul> <li>bool IsDrawing:   Check if the user is currently drawing onto this mesh. </li> </ul> <ul> <li>bool IsEmpty:   Check if the mesh is empty. READ ONLY. </li> </ul> <ul> <li>ArrayMesh arrayMesh:   The internal Godot class that actually draws the mesh onto the screen. </li> </ul> <ul> <li>BitMap bitmap:   Reference to the bits that is read by the algorithm to draw the shape. </li> </ul> <ul> <li>int MapWidth:   Width of the bitmap. Automatically set based on canvas size. DO NOT MODIFY. </li> </ul> <ul> <li>int MapHeight:   Height of the bitmap. Automatically set based on canvas size. DO NOT MODIFY. </li> </ul> <ul> <li>float CellSize:   Gets the size of each cell of the mesh. READ ONLY. </li> </ul> <ul> <li>float OffsetScale:   Gets or sets the amount of jitter to randomize the positions of each mesh cell point. </li> </ul> <ul> <li>BitMap[] brushes:   Gets the list of BitMaps representing the different brush sizes. </li> </ul> <ul> <li>BitMap previousBitmap:   Gets the previous bitmap just before the latest edit. Used to record Undo history. </li> </ul>"},{"location":"reference/MarchingSquaresMesh/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Save the mesh into the save file format and return it as a Dictionary. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved mesh data. Used by a saved map file to load existing meshes. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void OnDrawingBegin ( ):   Prepares the mesh for drawing. </li> </ul> <ul> <li>void OnDrawingEnd ( ):   Finishes the mesh for drawing and records an Undo history. </li> </ul> <ul> <li>void CreateNewBitmap ( ):   Create or replace the bitmap with an empty one of the right size. </li> </ul> <ul> <li>void SetBitmap ( BitMap bitmap ):   Replace the bitmap with a specific one and updates the visuals. WARNING: THE SIZE MUST MATCH! </li> </ul> <ul> <li>void Clear ( ):   Delete the visuals and data of this mesh without destroying the instance. </li> </ul> <ul> <li>void SetCircle ( Vector2 position, int size, bool value ):   Draws a circle at the position onto the mesh if value is true or erase if false. </li> </ul> <ul> <li>void UpdateMesh ( ):   Update the mesh. Heavy CPU workload. </li> </ul>"},{"location":"reference/MaterialBrush/","title":"MaterialBrush","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/MaterialBrush/#description","title":"Description","text":"<p>The tool used to edit the materials.</p> <p>Accessed by <code>Global.Editor.Tools[\"MaterialBrush\"]</code>.</p>"},{"location":"reference/MaterialBrush/#properties","title":"Properties","text":"<p> Texture Texture MaterialMesh Mesh int Size OptionButton LayerMenu int ActiveLayer bool Smooth bool MoveToFront GridMenu textureMenu </p>"},{"location":"reference/MaterialBrush/#methods","title":"Methods","text":"<p> float UpdateBrushRadius ( ) void SetMaterial ( Texture texture ) void SetLayer ( int index ) void SetSmooth ( bool value ) </p>"},{"location":"reference/MaterialBrush/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture Texture:   Gets or sets the next material's texture/style. </li> </ul> <ul> <li>MaterialMesh Mesh:   The mesh this tool is editing. </li> </ul> <ul> <li>int Size:   Get or set the size of the brush. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Material Brush when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next material will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>bool Smooth:   Smooths rough edges in the material. Call SetSmooth() to set instead. </li> </ul> <ul> <li>bool MoveToFront:   When the user next paints, the painted material will get moved to the front of the canvas. </li> </ul> <ul> <li>GridMenu textureMenu:   The menu that selects textures for this tool. DO NOT MODIFY. </li> </ul>"},{"location":"reference/MaterialBrush/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>float UpdateBrushRadius ( ):   Update the brush cursor to reflect the new size. Automatically called when Size is set. Returns the radius. </li> </ul> <ul> <li>void SetMaterial ( Texture texture ):   Change the material the tool will be editing. </li> </ul> <ul> <li>void SetLayer ( int index ):   Change the layer the tool will be editing. </li> </ul> <ul> <li>void SetSmooth ( bool value ):   Toggles if the currently edited material and layer combination will be smoothed. </li> </ul>"},{"location":"reference/MaterialMesh/","title":"MaterialMesh","text":"<p>Extends: BorderedMesh &lt; MarchingSquaresMesh &lt; MeshInstance2D</p>"},{"location":"reference/MaterialMesh/#description","title":"Description","text":"<p>Material Mesh is the visual object that draws the Materials for Dungeondraft.</p>"},{"location":"reference/MaterialMesh/#properties","title":"Properties","text":"<p> ShaderMaterial ShaderMaterial Texture TileTexture </p>"},{"location":"reference/MaterialMesh/#methods","title":"Methods","text":"<p> ShaderMaterial InitShaderMaterial ( ) void SetTileTexture ( Texture texture ) </p>"},{"location":"reference/MaterialMesh/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>ShaderMaterial ShaderMaterial:   The Godot Material used to shade this Material. Note that Godot Material is not the same concept as a Dungeondraft Material. The identical name is a coincidence. </li> </ul> <ul> <li>Texture TileTexture:   The tiling texture for this material. Read only. Set using SetTileTexture(). </li> </ul>"},{"location":"reference/MaterialMesh/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>ShaderMaterial InitShaderMaterial ( ):   Called automatically to set up the shader. </li> </ul> <ul> <li>void SetTileTexture ( Texture texture ):   Change the material's texture and its border if applicable. </li> </ul>"},{"location":"reference/MeshBrush/","title":"MeshBrush","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/MeshBrush/#description","title":"Description","text":"<p>The abstract tool used to edit meshes.</p>"},{"location":"reference/MeshBrush/#properties","title":"Properties","text":"<p> MarchingSquaresMesh Mesh int Size </p>"},{"location":"reference/MeshBrush/#methods","title":"Methods","text":"<p> float UpdateBrushRadius ( ) </p>"},{"location":"reference/MeshBrush/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>MarchingSquaresMesh Mesh:   The mesh this tool is editing. </li> </ul> <ul> <li>int Size:   Get or set the size of the brush. </li> </ul>"},{"location":"reference/MeshBrush/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>float UpdateBrushRadius ( ):   Update the brush cursor to reflect the new size. Automatically called when Size is set. Returns the radius. </li> </ul>"},{"location":"reference/ObjectLibraryPanel/","title":"ObjectLibraryPanel","text":"<p>Extends: PanelContainer</p>"},{"location":"reference/ObjectLibraryPanel/#description","title":"Description","text":"<p>This is panel that displays the menu of Props.</p> <p>Accessed by 'Global.Editor.ObjectLibraryPanel'.</p>"},{"location":"reference/ObjectLibraryPanel/#properties","title":"Properties","text":"<p> Button allButton Button usedButton Button tagsButton GridMenu objectMenu Control filters HSlider strictness ObjectTool ObjectTool ScatterTool ScatterTool Dictionary searchEngine Dictionary regexEngine </p>"},{"location":"reference/ObjectLibraryPanel/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) void Init ( ) void ShowAllObjects ( ) void ShowUsedObjects ( ) void ShowObjectsArray ( Texture[] textures ) void ShowNoObjects ( ) void Select ( int index ) </p>"},{"location":"reference/ObjectLibraryPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Button allButton:   The All objects button. </li> </ul> <ul> <li>Button usedButton:   The Used objects button. </li> </ul> <ul> <li>Button tagsButton:   The Tags objects button. </li> </ul> <ul> <li>GridMenu objectMenu:   The menu that contains the objects to display. </li> </ul> <ul> <li>Control filters:   The parent of the search UI elements. </li> </ul> <ul> <li>HSlider strictness:   The slider to determine how strict the search bar should be. Low value allows for misspellings to still catch the terms. </li> </ul> <ul> <li>ObjectTool ObjectTool:   Reference of the ObjectTool. </li> </ul> <ul> <li>ScatterTool ScatterTool:   Reference of the ScatterTool. </li> </ul> <ul> <li>Dictionary searchEngine:   Lookup table for the standard search engine. Dictionary of String key - Array[Texture] value. </li> </ul> <ul> <li>Dictionary regexEngine:   Lookup table for the regex engine. Dictionary of String key - Texture value. </li> </ul>"},{"location":"reference/ObjectLibraryPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Serialize the last state of the panel to be restored in the future. No need to call manually. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load the last state of the panel to be restored in the future. No need to call manually. </li> </ul> <ul> <li>void Init ( ):   Initialize the menu and load the assets. </li> </ul> <ul> <li>void ShowAllObjects ( ):   Show all object assets in the menu. </li> </ul> <ul> <li>void ShowUsedObjects ( ):   Show only used object assets in the menu. </li> </ul> <ul> <li>void ShowObjectsArray ( Texture[] textures ):   Show a custom set of object assets in the menu. </li> </ul> <ul> <li>void ShowNoObjects ( ):   Show nothing in the menu. </li> </ul> <ul> <li>void Select ( int index ):   Select a specific object asset in the menu. Index is the item order. </li> </ul>"},{"location":"reference/ObjectTool/","title":"ObjectTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/ObjectTool/#description","title":"Description","text":"<p>The tool used to edit objects.</p> <p>Accessed by <code>Global.Editor.Tools[\"ObjectTool\"]</code>.</p>"},{"location":"reference/ObjectTool/#properties","title":"Properties","text":"<p> Texture texture Prop Preview Range Rotation Range Scale OptionButton LayerMenu int ActiveLayer int Sorting bool Shadow bool BlockLight GridMenu GridMenu Dictionary LibraryMemory </p>"},{"location":"reference/ObjectTool/#methods","title":"Methods","text":"<p> void Record ( Prop obj ) void Next ( ) void SetLayer ( int index ) void SetShadow ( bool value ) void ChangeColor ( Color color, String name ) void Confirm ( ) void PromoteCustomColor ( ) void SetSorting ( int sorting ) void EmbebObject ( String file ) void SetBlockLight ( bool value ) </p>"},{"location":"reference/ObjectTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture texture:  Texture of the asset selected. Used automatically by the UI controls. Does not update the preview link:<code>Prop</code> automatically. </li> </ul> <ul> <li>Prop Preview:   Gets the preview Prop. This is the object that follows the user's cursor before it is actually placed. Call confirm to force it to place. </li> </ul> <ul> <li>Range Rotation:  Range that determines the rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range Scale:  Range that determines the scale of the objects placed. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Object Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next object will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>int Sorting:   Where the next object will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the tool will place objects with shadows. Read only. Set with SetShadow() instead. </li> </ul> <ul> <li>bool BlockLight:   Gets and sets whether the tool will place objects that block light. Read only. Set with SetBlockLight() instead. </li> </ul> <ul> <li>GridMenu GridMenu:   The menu in the Object Library Panel that selects textures for this tool. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul>"},{"location":"reference/ObjectTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Record ( Prop obj ):   Change this link:<code>Prop</code> from preview to real, assign it an NodeID, and then record the action to undo history. </li> </ul> <ul> <li>void Next ( ):   Create a new preview link:<code>Prop</code> using the last known options and texture selected. </li> </ul> <ul> <li>void SetLayer ( int index ):   Set layer option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Change the custom color if it applies. Update the Object Library Panel icons to reflect it as well if enabled. </li> </ul> <ul> <li>void Confirm ( ):   Finalize the preview into the map and create a new preview Prop. Calls Record() and Next() internally. </li> </ul> <ul> <li>void PromoteCustomColor ( ):   Update the preview Prop to reflect the custom color. Better to call ChangeColor() than this function directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul> <ul> <li>void EmbebObject ( String file ):   Embed a PNG file directly into the map. Bloats the file size, use wisely. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Set the preview Prop to block light. </li> </ul>"},{"location":"reference/Objects/","title":"Objects","text":"<p>Extends: Node2D</p>"},{"location":"reference/Objects/#description","title":"Description","text":"<p>The parent class holding all Prop of a Level.</p>"},{"location":"reference/Objects/#properties","title":"Properties","text":"<p> Level Level </p>"},{"location":"reference/Objects/#methods","title":"Methods","text":"<p> Prop CreateObject ( int sorting ) Dictionary[] Save ( ) void Load ( Dictionary[] data ) PatternShape LoadObject ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void AddToSearchTable ( Prop prop, bool movedToBack ) void RemoveFromSearchTable ( Prop prop ) </p>"},{"location":"reference/Objects/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul>"},{"location":"reference/Objects/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Prop CreateObject ( int sorting ):   Creates a Prop with the following options and adds it as a child. For the parameter sorting, valid options are: 0 = Over, 1 = Under. </li> </ul> <ul> <li>Dictionary[] Save ( ):   Save all Props in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved Prop data. Used by a saved map file to load existing Props. </li> </ul> <ul> <li>PatternShape LoadObject ( Dictionary data ):   Load a single Prop into this level. Called by Load() as it loads all the Props. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void AddToSearchTable ( Prop prop, bool movedToBack ):   Adds a Prop to a table that makes it faster to find Props in the SelectTool. Called automatically by LoadObject() and when a Prop is created by the ObjectTool and ScatterTool. If you are directly creating a new Prop using CreateObject(), you must call this method manually afterwards. The parameter movedToBack lets the table know if you placed the Prop in the front or in the back of other Props. </li> </ul> <ul> <li>void RemoveFromSearchTable ( Prop prop ):   Removes a Prop from the search table. Called automatically by a Prop that is deleted. No need to call manually. </li> </ul>"},{"location":"reference/PathLibraryPanel/","title":"PathLibraryPanel","text":"<p>Extends: PanelContainer</p>"},{"location":"reference/PathLibraryPanel/#description","title":"Description","text":"<p>This is panel that displays the menu of Paths.</p> <p>Accessed by 'Global.Editor.PathLibraryPanel'.</p>"},{"location":"reference/PathLibraryPanel/#properties","title":"Properties","text":"<p> GridMenu PathMenu Control filters HSlider strictness PathTool PathTool Dictionary searchEngine Dictionary regexEngine </p>"},{"location":"reference/PathLibraryPanel/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) void Init ( ) void ShowAllObjects ( ) void ShowObjectsArray ( Texture[] textures ) void ShowNoObjects ( ) void Select ( int index ) void SelectTexture ( Texture texture ) </p>"},{"location":"reference/PathLibraryPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>GridMenu PathMenu:   The menu that contains the paths to display. </li> </ul> <ul> <li>Control filters:   The parent of the search UI elements. </li> </ul> <ul> <li>HSlider strictness:   The slider to determine how strict the search bar should be. Low value allows for misspellings to still catch the terms. </li> </ul> <ul> <li>PathTool PathTool:   Reference of the PathTool. </li> </ul> <ul> <li>Dictionary searchEngine:   Lookup table for the standard search engine. Dictionary of String key - Array[Texture] value. </li> </ul> <ul> <li>Dictionary regexEngine:   Lookup table for the regex engine. Dictionary of String key - Texture value. </li> </ul>"},{"location":"reference/PathLibraryPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Serialize the last state of the panel to be restored in the future. No need to call manually. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load the last state of the panel to be restored in the future. No need to call manually. </li> </ul> <ul> <li>void Init ( ):   Initialize the menu and load the assets. </li> </ul> <ul> <li>void ShowAllObjects ( ):   Show all path assets in the menu. </li> </ul> <ul> <li>void ShowObjectsArray ( Texture[] textures ):   Show a custom set of path assets in the menu. </li> </ul> <ul> <li>void ShowNoObjects ( ):   Show nothing in the menu. </li> </ul> <ul> <li>void Select ( int index ):   Select a specific path asset in the menu. Index is the item order. </li> </ul> <ul> <li>void SelectTexture ( Texture texture ):   Select a specific path asset in the menu by the texture. </li> </ul>"},{"location":"reference/PathTool/","title":"PathTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/PathTool/#description","title":"Description","text":"<p>The tool used to edit paths.</p> <p>Accessed by <code>Global.Editor.Tools[\"PathTool\"]</code>.</p>"},{"location":"reference/PathTool/#properties","title":"Properties","text":"<p> int Sorting float Smoothness bool fadeIn bool fadeOut bool grow bool shrink Texture Texture OptionButton LayerMenu int ActiveLayer float Width bool isDrawing Pathway ActivePath bool BlockLight Dictionary LibraryMemory </p>"},{"location":"reference/PathTool/#methods","title":"Methods","text":"<p> void SetLayer ( int index ) void StartPath ( ) void UpdatePath ( ) void Confirm ( ) void EndPath ( bool loop ) void SetSorting ( int sorting ) void SetFadeIn ( bool value ) void SetFadeOut ( bool value ) void SetTransitionIn ( int value ) void SetTransitionOut ( int value ) void SetBlockLight ( bool value ) </p>"},{"location":"reference/PathTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Sorting:   Where the next path will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>float Smoothness:   Gets or sets the next path's smoothness. 0 to 1. </li> </ul> <ul> <li>bool fadeIn:   Gets or sets the next path's fade in. Better to use SetFadeIn() to set. </li> </ul> <ul> <li>bool fadeOut:   Gets or sets the next path's fade in. Better to use SetFadeOut() to set. </li> </ul> <ul> <li>bool grow:   Gets or sets the next path's fade in. Better to use SetTransitionIn()/SetTransitionOut() to set. </li> </ul> <ul> <li>bool shrink:   Gets or sets the next path's fade in. Better to use SetTransitionIn()/SetTransitionOut() to set. </li> </ul> <ul> <li>Texture Texture:   Gets and sets the texture used for the next path drawn. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Path Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   Gets and sets whether the tool's layer. </li> </ul> <ul> <li>float Width:   Gets and sets the width used for the next path drawn. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>Pathway ActivePath:   Gets the current unfinished Pathway (path). </li> </ul> <ul> <li>bool BlockLight:   Allows the user to adjust blocking light. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul>"},{"location":"reference/PathTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetLayer ( int index ):   Set layer option and update the active link:Pathway` to reflect it. </li> </ul> <ul> <li>void StartPath ( ):   Create a new path with zero points and sets it as the ActivePath. </li> </ul> <ul> <li>void UpdatePath ( ):   Updates the visuals of the current unfinished path. </li> </ul> <ul> <li>void Confirm ( ):   Finishes any path started and closes loops if possible. Calls EndPath() internally. </li> </ul> <ul> <li>void EndPath ( bool loop ):   Called by Confirm(). Better to not call directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul> <ul> <li>void SetFadeIn ( bool value ):   Marks future paths to fade in. </li> </ul> <ul> <li>void SetFadeOut ( bool value ):   Marks future paths to fade out. </li> </ul> <ul> <li>void SetTransitionIn ( int value ):   Sets the type of transition for the fade. 0 is disable, 1 is fade in, 2 is grow/shrink. </li> </ul> <ul> <li>void SetTransitionOut ( int value ):   Sets the type of transition for the fade. 0 is disable, 1 is fade in, 2 is grow/shrink. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Updates whether the current unfinished path should block light. </li> </ul>"},{"location":"reference/Pathway/","title":"Pathway","text":"<p>Extends: Line2D</p>"},{"location":"reference/Pathway/#description","title":"Description","text":"<p>A Pathway is a Dungeondraft asset instance of what the user sees as an path from the PathTool. See Asset Instance.</p>"},{"location":"reference/Pathway/#properties","title":"Properties","text":"<p> float Smoothness Rect2 GlobalRect Vector2[] EditPoints Vector2[] GlobalEditPoints bool FadeIn bool FadeOut bool Grow bool Shrink bool BlockLight LightOccluder2D occluder OccluderPolygon2D occluderPolygon </p>"},{"location":"reference/Pathway/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void UpdateGradient ( ) void UpdateOccluder ( ) void SetBlockLight ( bool value ) void SetEditPoints ( Vector2[] points ) void InsertPoint ( int index, Vector2 point ) void DeletePoint ( int index ) void ModifyPoint ( int index, Vector2 point ) void Smooth ( ) void GrowShrinkEnds ( int distance ) void SetWidthScale ( float widthScale ) bool IsMouseWithin ( Vector2 mousePos ) </p>"},{"location":"reference/Pathway/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>float Smoothness:   Gets or sets the path's smoothness. Call Smooth() if subsequent methods you use to do update the Pathway. </li> </ul> <ul> <li>Rect2 GlobalRect:   The global Rect2 that encloses this path. READ ONLY. </li> </ul> <ul> <li>Vector2[] EditPoints:   The edit points of the path in local space. Not normally set here. Call SetEditPoints() instead. </li> </ul> <ul> <li>Vector2[] GlobalEditPoints:   The edit points of the path in world space. READ ONLY. </li> </ul> <ul> <li>bool FadeIn:   Gets or sets the path fade in. Not normally set here. Better to call SetFadeIn() from the PathTool. </li> </ul> <ul> <li>bool FadeOut:   Gets or sets the path fade out. Not normally set here. Better to call SetFadeOut() from the PathTool. </li> </ul> <ul> <li>bool Grow:   Gets or sets the path taper. Not normally set here. Better to call SetTransitionIn()/SetTransitionOut() from the PathTool. </li> </ul> <ul> <li>bool Shrink:   Gets or sets the path taper. Not normally set here. Better to call SetTransitionIn()/SetTransitionOut()  from the PathTool. </li> </ul> <ul> <li>bool BlockLight:   Gets the flag that indicates if this object blocks light. </li> </ul> <ul> <li>LightOccluder2D occluder:   The object that blocks light. </li> </ul> <ul> <li>OccluderPolygon2D occluderPolygon:   The special shape that the occluder uses to block light with. </li> </ul>"},{"location":"reference/Pathway/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Pathway into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Pathway data. Used by a saved map file to load existing paths. </li> </ul> <ul> <li>void UpdateGradient ( ):   Update the path visuals to reflect changes in fade in and fade out changes. </li> </ul> <ul> <li>void UpdateOccluder ( ):   Automatically called to update the light blocker to user point position changes. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Toggle whether this Pathway blocks lights. </li> </ul> <ul> <li>void SetEditPoints ( Vector2[] points ):   Set or replace the entire set of edit points in world space. </li> </ul> <ul> <li>void InsertPoint ( int index, Vector2 point ):   Insert edit point in world space at index. </li> </ul> <ul> <li>void DeletePoint ( int index ):   Remove edit point at index. </li> </ul> <ul> <li>void ModifyPoint ( int index, Vector2 point ):   Modify the position of an existing point in world space. </li> </ul> <ul> <li>void Smooth ( ):   Take the Edit Points and generate a smooth visual. Called to update the visuals when the path is modified. </li> </ul> <ul> <li>void GrowShrinkEnds ( int distance ):   Called by Smooth() to taper the ends when grow or shrink is set. Not normally called directly. </li> </ul> <ul> <li>void SetWidthScale ( float widthScale ):   Modifies the width of the path. </li> </ul> <ul> <li>bool IsMouseWithin ( Vector2 mousePos ):   Checks if the mouse cursor is over the path. Only used by the SelectTool. </li> </ul>"},{"location":"reference/Pathways/","title":"Pathways","text":"<p>Extends: Node2D</p>"},{"location":"reference/Pathways/#description","title":"Description","text":"<p>The parent class holding all Pathway of a Level.</p>"},{"location":"reference/Pathways/#properties","title":"Properties","text":"<p> Level Level </p>"},{"location":"reference/Pathways/#methods","title":"Methods","text":"<p> Pathway CreatePath ( Texture texture, int layer, int sorting, bool fadeIn, bool fadeOut, bool grow, bool shrink ) Dictionary[] Save ( ) void Load ( Dictionary[] data ) PatternShape LoadPathway ( Dictionary data ) void Resize ( int x, int y, int w, int h ) </p>"},{"location":"reference/Pathways/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul>"},{"location":"reference/Pathways/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Pathway CreatePath ( Texture texture, int layer, int sorting, bool fadeIn, bool fadeOut, bool grow, bool shrink ):   Creates a path with the following options and adds it as a child. For the parameter sorting, valid options are: 0 = Over, 1 = Under. </li> </ul> <ul> <li>Dictionary[] Save ( ):   Save all paths in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved path data. Used by a saved map file to load existing paths. </li> </ul> <ul> <li>PatternShape LoadPathway ( Dictionary data ):   Load a single Pathway into this level. Called by Load() as it loads all the paths. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul>"},{"location":"reference/PatternShape/","title":"PatternShape","text":"<p>Extends: Polygon2D</p>"},{"location":"reference/PatternShape/#description","title":"Description","text":"<p>A PatternShape is a Dungeondraft asset instance of what the user sees as an pattern shape from the PatternShapeTool. See Asset Instance.</p>"},{"location":"reference/PatternShape/#properties","title":"Properties","text":"<p> Line2D Outline bool HasOutline Rect2 GlobalRect Vector2[] GlobalPolygon </p>"},{"location":"reference/PatternShape/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) bool IsMouseWithin ( Vector2 mousePos ) PatternShapes GetShapes ( ) int GetLayer ( ) void SetLayer ( int layer ) void SetNewRotation ( float rotation ) void SetOptions ( Texture texture, Color color, float rotation ) void SetPoints ( Vector2[] points, bool outline ) void SetOutline ( Vector2[] points, Texture texture ) </p>"},{"location":"reference/PatternShape/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Line2D Outline:   The visual aspect of the border.  Read only. Call SetOutline() to set. </li> </ul> <ul> <li>bool HasOutline:   Gets if this shape has a border. Read only. </li> </ul> <ul> <li>Rect2 GlobalRect:   The global Rect2 enclosing the shape. DO NOT MODIFY. </li> </ul> <ul> <li>Vector2[] GlobalPolygon:   The points of the shape in world space. READ ONLY. </li> </ul>"},{"location":"reference/PatternShape/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the PatternShape into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. The Load() equivalent resides in the PatternShapes class. </li> </ul> <ul> <li>bool IsMouseWithin ( Vector2 mousePos ):   Checks if the mouse cursor is over the shape. Only used by the SelectTool. </li> </ul> <ul> <li>PatternShapes GetShapes ( ):   Gets the parent PatternShapes that holds all the shapes on the same level. </li> </ul> <ul> <li>int GetLayer ( ):   Returns the layer index. </li> </ul> <ul> <li>void SetLayer ( int layer ):   Change the layer of the shape. </li> </ul> <ul> <li>void SetNewRotation ( float rotation ):   Allows changing of the rotation without affecting the other options. </li> </ul> <ul> <li>void SetOptions ( Texture texture, Color color, float rotation ):   Change the texture, color, or rotation of this shape. </li> </ul> <ul> <li>void SetPoints ( Vector2[] points, bool outline ):   Set the points of this shape or toggle the outline visibility. </li> </ul> <ul> <li>void SetOutline ( Vector2[] points, Texture texture ):   Changes the outline points and texture. Called by SetPoints() when outline is enabled. </li> </ul>"},{"location":"reference/PatternShapeTool/","title":"PatternShapeTool","text":"<p>Extends: ShapeTool &lt; Tool &lt; Object</p>"},{"location":"reference/PatternShapeTool/#description","title":"Description","text":"<p>The tool used to edit pattern shapes. Use World.Level.PatternShapes if you want to create pattern shapes instead.</p> <p>Accessed by <code>Global.Editor.Tools[\"PatternShapeTool\"]</code>.</p>"},{"location":"reference/PatternShapeTool/#properties","title":"Properties","text":"<p> OptionButton LayerMenu int ActiveLayer Texture Texture Color Color Range Rotation bool Outline GridMenu textureMenu Button EditPoints bool isDragging </p>"},{"location":"reference/PatternShapeTool/#methods","title":"Methods","text":"<p> void SetLayer ( int index ) void ChangeColor ( Color color, String name ) </p>"},{"location":"reference/PatternShapeTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Pattern Shape Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next shape will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>Texture Texture:   Gets or sets a new shape's texture. </li> </ul> <ul> <li>Color Color:   Gets or sets a new shape's color if applicable. </li> </ul> <ul> <li>Range Rotation:   The Range control that sets the rotation of any new shapes. </li> </ul> <ul> <li>bool Outline:   Gets or sets whether the shapes will have an outline. </li> </ul> <ul> <li>GridMenu textureMenu:   The menu that selects textures for this tool. DO NOT MODIFY. </li> </ul> <ul> <li>Button EditPoints:   The UI control that determines if the user is editing existing points instead of creating new shapes. </li> </ul> <ul> <li>bool isDragging:   Is the user actively dragging a point on an existing shape. </li> </ul>"},{"location":"reference/PatternShapeTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetLayer ( int index ):   Set layer that the next pattern shape created by the tool will belong to. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Changes the pattern shape color. Param name is not used. </li> </ul>"},{"location":"reference/PatternShapes/","title":"PatternShapes","text":"<p>Extends: Node2D</p>"},{"location":"reference/PatternShapes/#description","title":"Description","text":"<p>The parent class holding all PatternShape of a Level.</p>"},{"location":"reference/PatternShapes/#properties","title":"Properties","text":"<p> Level Level PatternShapeTool Tool </p>"},{"location":"reference/PatternShapes/#methods","title":"Methods","text":"<p> Dictionary[] Save ( ) void Load ( Dictionary[] data ) PatternShape LoadShape ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void AddLayer ( int layer ) Node2D GetOrMakeLayer ( int layer ) PatternShape[] GetShapes ( ) void DrawRect ( Rect2 rect, bool invertAction ) void DrawCircle ( Rect2 rect, int sides, bool invertAction ) void DrawPolygon ( Vector2[] points, bool invertAction ) void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ) </p>"},{"location":"reference/PatternShapes/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul> <ul> <li>PatternShapeTool Tool:   Reference to the PatternShapeTool. </li> </ul>"},{"location":"reference/PatternShapes/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary[] Save ( ):   Save all pattern shapes in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved PatternShape data. Used by a saved map file to load existing pattern shapes. </li> </ul> <ul> <li>PatternShape LoadShape ( Dictionary data ):   Load a single PatternShape into this level. Called by Load() as it loads all the shapes. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void AddLayer ( int layer ):   Make a new layer node that holds pattern shapes in that layer. </li> </ul> <ul> <li>Node2D GetOrMakeLayer ( int layer ):   Gets the parent node of a layer or makes one if it does not exist. Calls AddLayer(). </li> </ul> <ul> <li>PatternShape[] GetShapes ( ):   Returns all the PatternShape held by this class. </li> </ul> <ul> <li>void DrawRect ( Rect2 rect, bool invertAction ):   Create a new PatternShape using a rectangle. </li> </ul> <ul> <li>void DrawCircle ( Rect2 rect, int sides, bool invertAction ):   Create a new PatternShape using a circle. </li> </ul> <ul> <li>void DrawPolygon ( Vector2[] points, bool invertAction ):   Create a new PatternShape using points of a polygon. </li> </ul> <ul> <li>void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ):   The internal method DrawRect(), DrawCircle(), and DrawPolygon() all call to create new shapes. Not advisable to call directly. </li> </ul>"},{"location":"reference/Plexigon2D/","title":"Plexigon2D","text":"<p>Extends: Node2D</p>"},{"location":"reference/Plexigon2D/#description","title":"Description","text":"<p>Dungeondraft only 2D rendering polygon class used to draw multiple complex polygons in one single instance.</p>"},{"location":"reference/Plexigon2D/#properties","title":"Properties","text":"<p> Color color bool fade_in </p>"},{"location":"reference/Plexigon2D/#methods","title":"Methods","text":"<p> void add_outline ( Vector2[] outline ) void add_outline_at_index ( Vector2[] outline, int index ) void clear_outlines ( ) void clear_polygons ( ) Vector2[] get_outline ( int idx ) int get_outline_count ( ) int[] get_polygon ( int idx ) int get_polygon_count ( ) Vector2[] get_vertices ( ) void make_polygons_from_outlines ( ) void mark_outline_as_fade ( int value ) void remove_outline ( int idx ) void set_outline ( int idx, Vector2[] outline ) </p>"},{"location":"reference/Plexigon2D/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color color:   The color to fill this polygon with. </li> </ul> <ul> <li>bool fade_in:   Toggles whether or not the border should fade into full color. Used by the water. </li> </ul>"},{"location":"reference/Plexigon2D/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void add_outline ( Vector2[] outline ):   Add a new shape once make_polygons_from_outlines is called(). An outline is a set of points indicating a new polygon yet to be merged with the Plexigon to be drawn. </li> </ul> <ul> <li>void add_outline_at_index ( Vector2[] outline, int index ):   Add a new shape at a specific index. </li> </ul> <ul> <li>void clear_outlines ( ):   Clear all the outlines. </li> </ul> <ul> <li>void clear_polygons ( ):   Clear all polygons. Not advisable to call directly. </li> </ul> <ul> <li>Vector2[] get_outline ( int idx ):   Get the points of a outline by id. </li> </ul> <ul> <li>int get_outline_count ( ):   Get total number of outlines. Once converted to polygon and cleared, it would be zero. </li> </ul> <ul> <li>int[] get_polygon ( int idx ):   Get the vertex indices of a specific polygon. </li> </ul> <ul> <li>int get_polygon_count ( ):   Get total polygon count. </li> </ul> <ul> <li>Vector2[] get_vertices ( ):   Get all the vertices in all polygons in an Array. </li> </ul> <ul> <li>void make_polygons_from_outlines ( ):   Call once all the new outlines are added to convert them into polygons that are drawn. </li> </ul> <ul> <li>void mark_outline_as_fade ( int value ):   Indicate which outline id are ones that are the edges that should fade. </li> </ul> <ul> <li>void remove_outline ( int idx ):   Delete outline by id. </li> </ul> <ul> <li>void set_outline ( int idx, Vector2[] outline ):   Replace outline by id. </li> </ul>"},{"location":"reference/Portal/","title":"Portal","text":"<p>Extends: Node2D</p>"},{"location":"reference/Portal/#description","title":"Description","text":"<p>A Portal is a Dungeondraft asset instance of what the user sees as an portal from the PortalTool. See Asset Instance. All the properties of the Portal should be set before it enters the SceneTree or the visuals will not be reflected.</p>"},{"location":"reference/Portal/#properties","title":"Properties","text":"<p> float Radius Vector2 Direction Vector2 Begin Vector2 End Sprite Sprite LightOccluder2D LightOccluder Texture Texture bool Closed bool Flip int WallID float WallDistance int WallPointIndex bool IsFreestanding Rect2 Rect bool isHighlighted bool isSelected </p>"},{"location":"reference/Portal/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) Dictionary Export ( ) bool Overlaps ( Vector2 position, float widthSquared ) bool IsMouseWithin ( ) bool IsPointWithin ( Vector2 point ) void Highlight ( bool value ) void Select ( bool bvalue ) void SetTexture ( Texture texture ) void SetClosed ( bool value ) </p>"},{"location":"reference/Portal/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>float Radius:   Gets or sets the radius. </li> </ul> <ul> <li>Vector2 Direction:   Gets or sets the facing. </li> </ul> <ul> <li>Vector2 Begin:   Gets the start position of the Portal in world space. </li> </ul> <ul> <li>Vector2 End:   Gets the end position of the Portal in world space. </li> </ul> <ul> <li>Sprite Sprite:   Gets the Sprite that visually displays the Portal. </li> </ul> <ul> <li>LightOccluder2D LightOccluder:   Gets the LightOccluder2D that blocks light for this Portal. </li> </ul> <ul> <li>Texture Texture:   Gets or sets the texture. </li> </ul> <ul> <li>bool Closed:   Toggles whether this Portal blocks light. </li> </ul> <ul> <li>bool Flip:   Toggles the orientation. </li> </ul> <ul> <li>int WallID:   The NodeID of the wall associated with this Portal. Is -1 if the Portal is freestanding. </li> </ul> <ul> <li>float WallDistance:   Gets the distance along the wall this Portal is placed just after the WallPointIndex position. </li> </ul> <ul> <li>int WallPointIndex:   Gets the index of the point along the wall preceding this Portal. </li> </ul> <ul> <li>bool IsFreestanding:   Checks if the Portal is freestanding. </li> </ul> <ul> <li>Rect2 Rect:   This property is set by Dungeondraft to determine the size of the box around the Portal when selected. Automatically updated. </li> </ul> <ul> <li>bool isHighlighted:   Determines if the Portal is highlighted. Read only, call Highlight() instead to set. </li> </ul> <ul> <li>bool isSelected:   Determines if the Portal is visually selected. Read only, call Select() instead to set. </li> </ul>"},{"location":"reference/Portal/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Portal into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Portal data. Used by a saved map file to load existing portals. </li> </ul> <ul> <li>Dictionary Export ( ):   Export a VTT friendly JSON table in Dictionary format about this Portal. </li> </ul> <ul> <li>bool Overlaps ( Vector2 position, float widthSquared ):   Checks if the position overlaps the Portal giving the squared widths. </li> </ul> <ul> <li>bool IsMouseWithin ( ):   Checks if the mouse cursor is over the Portal. Only used by the SelectTool. </li> </ul> <ul> <li>bool IsPointWithin ( Vector2 point ):   Checks if the point is over the Portal. Only used by the SelectTool. </li> </ul> <ul> <li>void Highlight ( bool value ):   Highlights the Portal. </li> </ul> <ul> <li>void Select ( bool bvalue ):   Visually select the Portal. Does not mean it is selected in the SelectTool. </li> </ul> <ul> <li>void SetTexture ( Texture texture ):   Change the Portal to a new Texture. </li> </ul> <ul> <li>void SetClosed ( bool value ):   Toggle whether this Portal blocks lights. </li> </ul>"},{"location":"reference/PortalTool/","title":"PortalTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/PortalTool/#description","title":"Description","text":"<p>The tool used to edit the portals. Use Wall.AddPortal() instead if you want to create portals directly.</p> <p>Accessed by <code>Global.Editor.Tools[\"PortalTool\"]</code>.</p>"},{"location":"reference/PortalTool/#properties","title":"Properties","text":"<p> Texture Texture bool Closed bool Freestanding Range Rotation bool Flip bool foundLocation GridMenu textureMenu </p>"},{"location":"reference/PortalTool/#methods","title":"Methods","text":"<p> void SetFreestanding ( bool enabled ) void FindBestLocation ( Vector2 position ) void ChangeTexture ( Texture texture, String property ) </p>"},{"location":"reference/PortalTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture Texture:   Modified in conjunction with calling ChangeTexture() by the UI to set the next portal's texture. </li> </ul> <ul> <li>bool Closed:   Toggles whether or not the Portal blocks light. </li> </ul> <ul> <li>bool Freestanding:   Toggles whether or not the Portals created will be freestanding. Must also set the SetFreestanding() method if not using the UI Controls. </li> </ul> <ul> <li>Range Rotation:   The Range control that sets the rotation of any new Portals. </li> </ul> <ul> <li>bool Flip:   Flips the orientation of new Portals. </li> </ul> <ul> <li>bool foundLocation:   Wether or not the latest user input location for the tool contains a possible location spot for a new Portal. </li> </ul> <ul> <li>GridMenu textureMenu:   The menu that selects textures for this tool. DO NOT MODIFY. </li> </ul>"},{"location":"reference/PortalTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetFreestanding ( bool enabled ):   Toggles whether or not the Portals created will be freestanding. Must also set the Freestanding property if not using the UI Controls. </li> </ul> <ul> <li>void FindBestLocation ( Vector2 position ):   Finds the best location based on the proximity to the parameter position and sets the preview Portal to that position. The Portal creation data cannot cross C#&lt;-&gt;GDScript language barrier unfortunately. </li> </ul> <ul> <li>void ChangeTexture ( Texture texture, String property ):   Called in conjunction with modifying Texture by the UI to set the next portal's texture. </li> </ul>"},{"location":"reference/PrefabTool/","title":"PrefabTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/PrefabTool/#description","title":"Description","text":"<p>The tool used to edit the prefabs.</p> <p>Accessed by <code>Global.Editor.Tools[\"PrefabTool\"]</code>.</p>"},{"location":"reference/PrefabTool/#properties","title":"Properties","text":"<p> OptionButton set ItemList list Dictionary preview </p>"},{"location":"reference/PrefabTool/#methods","title":"Methods","text":"<p> void SetSet ( int index ) void OnSelectPrefab ( int index ) void Instance ( ) void Forget ( ) void Clear ( ) void Confirm ( ) </p>"},{"location":"reference/PrefabTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton set:   The UI button that allows the user to select a set of prefabs. </li> </ul> <ul> <li>ItemList list:   The UI list that allows the user to select a prefab. </li> </ul> <ul> <li>Dictionary preview:   The preview of the prefab created by Instance() with the keys being the reference to the asset instances and their values being their type as an int. </li> </ul>"},{"location":"reference/PrefabTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetSet ( int index ):   Called by the UI when the user changes a set to update the prefab list. </li> </ul> <ul> <li>void OnSelectPrefab ( int index ):   Called by the UI when the user selects a specific prefab and instances it as a preview. Calls Instance(). </li> </ul> <ul> <li>void Instance ( ):   Creates a new instance of a prefab and sets it as the preview property. </li> </ul> <ul> <li>void Forget ( ):   Deletes the currently selected prefab (not the instance) from the list. </li> </ul> <ul> <li>void Clear ( ):   Deletes the current prefab instance (the preview). </li> </ul> <ul> <li>void Confirm ( ):   Make the preview prefab permanent and records its Undo history. </li> </ul>"},{"location":"reference/PreviewContainer/","title":"PreviewContainer","text":"<p>Extends: PanelContainer</p>"},{"location":"reference/PreviewContainer/#description","title":"Description","text":"<p>This class when accessed in <code>Global.Editor.Preview</code> is the preview of Props when hovering over the library menu.</p>"},{"location":"reference/PreviewContainer/#properties","title":"Properties","text":"<p> TextureRect texture Label label String currentLibraryCategory bool bigPreview </p>"},{"location":"reference/PreviewContainer/#methods","title":"Methods","text":"<p> void Set ( Texture thumbnail, String label, String category ) void Unset ( ) void SetPreviewMaterial ( Material material ) </p>"},{"location":"reference/PreviewContainer/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>TextureRect texture:   The UI element that displays the asset image. </li> </ul> <ul> <li>Label label:   The UI element that displays the asset name. </li> </ul> <ul> <li>String currentLibraryCategory:   The category of the current library. </li> </ul> <ul> <li>bool bigPreview:   Get or set if the preview is in big format. </li> </ul>"},{"location":"reference/PreviewContainer/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Set ( Texture thumbnail, String label, String category ):   Set the thumbnail to be previewed. </li> </ul> <ul> <li>void Unset ( ):   Clear the preview. </li> </ul> <ul> <li>void SetPreviewMaterial ( Material material ):   Change the material used to shade the preview. </li> </ul>"},{"location":"reference/Prop/","title":"Prop","text":"<p>Extends: Node2D</p>"},{"location":"reference/Prop/#description","title":"Description","text":"<p>A Prop is a Dungeondraft asset instance of what the user sees as an object from the ObjectTool. See Asset Instance.</p>"},{"location":"reference/Prop/#properties","title":"Properties","text":"<p> Sprite Sprite Rect2 Rect bool HasShadow bool Mirror LightOccluder2D[] occluders bool BlockLight bool isHighlighted bool isSelected Color borderColor Rect2 SelectRect </p>"},{"location":"reference/Prop/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void SetTexture ( Texture texture ) void SetCustomColor ( Color color ) bool HasCustomColor ( ) Color GetCustomColor ( ) void Highlight ( bool value ) void Select ( bool bvalue ) void SetBlockLight ( bool value ) void GenerateOccluder ( ) void ClearOccluders ( ) void UpdateOccluders ( ) </p>"},{"location":"reference/Prop/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Sprite Sprite:   The Sprite displaying the Prop. DO NOT MODIFY. </li> </ul> <ul> <li>Rect2 Rect:   The Rect2 enclosing the Prop. DO NOT MODIFY. </li> </ul> <ul> <li>bool HasShadow:   Set to toggle the shadow. </li> </ul> <ul> <li>bool Mirror:   Set to flip the Prop horizontally. </li> </ul> <ul> <li>LightOccluder2D[] occluders:   Array of the Godot LightOccluder2D that block light for this Prop. </li> </ul> <ul> <li>bool BlockLight:   Gets the flag that indicates if this object blocks light. </li> </ul> <ul> <li>bool isHighlighted:   Determines if the Prop is highlighted. Read only, call Highlight() instead to set. </li> </ul> <ul> <li>bool isSelected:   Determines if the Prop is visually selected. Read only, call Select() instead to set. </li> </ul> <ul> <li>Color borderColor:   This property is set by Dungeondraft to draw a box when this Prop is highlighted or selected. Modify at your own risk. </li> </ul> <ul> <li>Rect2 SelectRect:   This property is set by Dungeondraft to determine the size of the box around the Prop when selected. Automatically updated. </li> </ul>"},{"location":"reference/Prop/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Prop into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Prop data. Used by a saved map file to load existing objects. </li> </ul> <ul> <li>void SetTexture ( Texture texture ):   Change the Prop to a new Texture. </li> </ul> <ul> <li>void SetCustomColor ( Color color ):   Update to a new custom color and pass the color to the materials. </li> </ul> <ul> <li>bool HasCustomColor ( ):   Return whether or not this Prop is using a custom color </li> </ul> <ul> <li>Color GetCustomColor ( ):   Return the custom color. </li> </ul> <ul> <li>void Highlight ( bool value ):   Highlights the Prop. </li> </ul> <ul> <li>void Select ( bool bvalue ):   Visually select the Prop. Does not mean it is selected in the SelectTool. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Toggle whether this Prop blocks lights. Calls GenerateOccluder() or ClearOccluders internally based on value. </li> </ul> <ul> <li>void GenerateOccluder ( ):   Generate Occluders, which Dungeondraft uses to block the light. </li> </ul> <ul> <li>void ClearOccluders ( ):   Remove Occluders, which Dungeondraft uses to block the light. </li> </ul> <ul> <li>void UpdateOccluders ( ):   Refresh Occluders based on the art, which Dungeondraft uses to block the light. </li> </ul>"},{"location":"reference/RangeSlider/","title":"RangeSlider","text":"<p>Extends: HBoxContainer</p>"},{"location":"reference/RangeSlider/#description","title":"Description","text":"<p>Dungeondraft unique UI Control that is allows the user to use a slider to set a minimum and a maximum.</p>"},{"location":"reference/RangeSlider/#properties","title":"Properties","text":"<p> Range MinRange Range MaxRange SpinBox minSpinBox SpinBox maxSpinBox Slider minSlider Slider maxSlider </p>"},{"location":"reference/RangeSlider/#methods","title":"Methods","text":"<p> void Init ( float min, float max, float step, float minValue, float maxValue ) </p>"},{"location":"reference/RangeSlider/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range MinRange:   Safe to access the min value set by the user. </li> </ul> <ul> <li>Range MaxRange:   Safe to access the max value set by the user. </li> </ul> <ul> <li>SpinBox minSpinBox:   The SpinBox to set the minimum. Linked to the minSlider. </li> </ul> <ul> <li>SpinBox maxSpinBox:   The SpinBox to set the maximum. Linked to the maxSlider. </li> </ul> <ul> <li>Slider minSlider:   The Slider to set the minimum. Linked to the minSpinBox. </li> </ul> <ul> <li>Slider maxSlider:   The Slider to set the maximum. Linked to the maxSpinBox. </li> </ul>"},{"location":"reference/RangeSlider/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Init ( float min, float max, float step, float minValue, float maxValue ):   Call to initialize the Control with the proper values. </li> </ul>"},{"location":"reference/Roof/","title":"Roof","text":"<p>Extends: Node2D</p>"},{"location":"reference/Roof/#description","title":"Description","text":"<p>A Roof is a Dungeondraft asset instance of what the user sees as a roof from the RoofTool. See Asset Instance.</p>"},{"location":"reference/Roof/#properties","title":"Properties","text":"<p> Texture TilesTexture Texture RidgeTexture Texture EdgeTexture Texture HipTexture bool shade Vector2 sunDirection float shadeContrast Vector2[] points float width Line2D ridge Line2D edge Line2D[] hips Dictionary sides int type bool isHighlighted bool isSelected Rect2 Rect Rect2 GlobalRect </p>"},{"location":"reference/Roof/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void SetSunlight ( bool enabled, float angle, float contrast ) void SetTileTexture ( Texture tiles ) void Set ( Vector2[] points, float width, int type ) Color CalculateBrightness ( Vector2 direction ) bool IsMouseWithin ( ) void Highlight ( bool value ) void Select ( bool bvalue ) </p>"},{"location":"reference/Roof/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture TilesTexture:   Main texture of the Roof. Do not modify directly. Calling SetTileTexture() to modify. </li> </ul> <ul> <li>Texture RidgeTexture:   Ridge texture of the Roof. Do not modify directly. Calling SetTileTexture() to modify. </li> </ul> <ul> <li>Texture EdgeTexture:   Edge texture of the Roof. Do not modify directly. Calling SetTileTexture() to modify. </li> </ul> <ul> <li>Texture HipTexture:   Hip texture of the Roof. Do not modify directly. Calling SetTileTexture() to modify. </li> </ul> <ul> <li>bool shade:   Property determining if this Roof is shaded. Call SetSunlight() instead. </li> </ul> <ul> <li>Vector2 sunDirection:   Property determining the direction of the sun. Call SetSunlight() instead. </li> </ul> <ul> <li>float shadeContrast:   Property determining the contrast of the sun shading. Call SetSunlight() instead. </li> </ul> <ul> <li>Vector2[] points:   Points of the Roof. Calling Set() to modify. </li> </ul> <ul> <li>float width:   Width of the Roof. Calling Set() to modify. </li> </ul> <ul> <li>Line2D ridge:   The ridge of the Roof. </li> </ul> <ul> <li>Line2D edge:   The outer edge of the Roof. </li> </ul> <ul> <li>Line2D[] hips:   An array of lines representing the hips of the Roof. </li> </ul> <ul> <li>Dictionary sides:   A Dictionary of Polygon2D key and Vector2 value pairs of the sides of the roof. </li> </ul> <ul> <li>int type:   The type of the roof. 0 = Gable, 1 = Hip, 2 = Dormer. </li> </ul> <ul> <li>bool isHighlighted:   Determines if the Roof is highlighted. Read only, call Highlight() instead to set. </li> </ul> <ul> <li>bool isSelected:   Determines if the Roof is visually selected. Read only, call Select() instead to set. </li> </ul> <ul> <li>Rect2 Rect:   The local Rect2 enclosing the Roof. DO NOT MODIFY. </li> </ul> <ul> <li>Rect2 GlobalRect:   The global Rect2 enclosing the Roof. DO NOT MODIFY. </li> </ul>"},{"location":"reference/Roof/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Roof into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Roof data. Used by a saved map file to load existing roofs. </li> </ul> <ul> <li>void SetSunlight ( bool enabled, float angle, float contrast ):   Change the sunlight visibility, direction, and contrast. </li> </ul> <ul> <li>void SetTileTexture ( Texture tiles ):   Set the main roof texture, and Dungeondraft will automatically figure out the other textures needed. </li> </ul> <ul> <li>void Set ( Vector2[] points, float width, int type ):   Must be called after creation of the Roof to set the options of the Roof. Valid options of the parameter type are 0 = Gable, 1 = Hip, 2 = Dormer. </li> </ul> <ul> <li>Color CalculateBrightness ( Vector2 direction ):   Calculates a grayscale color that will modulate a Roof color based on the direction of the sun. </li> </ul> <ul> <li>bool IsMouseWithin ( ):   Checks if the mouse cursor is over the Roof. Only used by the SelectTool. </li> </ul> <ul> <li>void Highlight ( bool value ):   Highlights the Roof. </li> </ul> <ul> <li>void Select ( bool bvalue ):   Visually select the Roof. Does not mean it is selected in the SelectTool. </li> </ul>"},{"location":"reference/RoofTool/","title":"RoofTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/RoofTool/#description","title":"Description","text":"<p>The tool used to edit the roofs.</p> <p>Accessed by <code>Global.Editor.Tools[\"RoofTool\"]</code>.</p>"},{"location":"reference/RoofTool/#properties","title":"Properties","text":"<p> int Mode int Sorting int Type Texture Texture Range Width bool Shade Range SunDirection Range ShadeContrast Vector2 boxBegin Vector2 boxEnd bool isDrawing Roof activeRoof </p>"},{"location":"reference/RoofTool/#methods","title":"Methods","text":"<p> void SetShade ( bool value ) void UpdateSunlight ( float value ) void FinishShape ( ) void DrawRect ( Rect2 rect ) </p>"},{"location":"reference/RoofTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Mode:   The mode of the tool. 0 = Quickbox, 1 = Manual. </li> </ul> <ul> <li>int Sorting:   Where the next roof will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. </li> </ul> <ul> <li>int Type:   Gets or sets the next type of roof created. Underlying type is an enum. 0 = Gable, 1 = Hip, and 2 = Dormer. </li> </ul> <ul> <li>Texture Texture:   Gets or sets the next roof's texture/style. </li> </ul> <ul> <li>Range Width:   The Range control that sets the width of the next roof. </li> </ul> <ul> <li>bool Shade:   Toggles if all roofs will be shaded according to sunlight. Call SetShade() as well. </li> </ul> <ul> <li>Range SunDirection:   The Range control that sets the direction the sun shines. </li> </ul> <ul> <li>Range ShadeContrast:   The Range control that sets the intensity of the sunlight. </li> </ul> <ul> <li>Vector2 boxBegin:   Start coordinates of the box that a user drags. </li> </ul> <ul> <li>Vector2 boxEnd:   End coordinates of the box that a user drags. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>Roof activeRoof:   The reference to the current Roof being placed. </li> </ul>"},{"location":"reference/RoofTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetShade ( bool value ):   Toggles if all roofs will be shaded according to sunlight and also update the sunlight. </li> </ul> <ul> <li>void UpdateSunlight ( float value ):   Toggles if all roofs will be shaded according to sunlight and also update the sunlight. </li> </ul> <ul> <li>void FinishShape ( ):   Takes the polyline from WorldUI and turns it into a Roof and adds it into the Roofs children. Used by Manual mode. </li> </ul> <ul> <li>void DrawRect ( Rect2 rect ):   Creates a new roof using the rect parameter instead of . Used by Quickbox mode. </li> </ul>"},{"location":"reference/Roofs/","title":"Roofs","text":"<p>Extends: Node2D</p>"},{"location":"reference/Roofs/#description","title":"Description","text":"<p>The parent class holding all Roof of a Level.</p>"},{"location":"reference/Roofs/#properties","title":"Properties","text":"<p> Level Level bool Shade float SunDirection float ShadeContrast </p>"},{"location":"reference/Roofs/#methods","title":"Methods","text":"<p> Roof CreateRoof ( int sorting ) Dictionary Save ( ) void Load ( Dictionary data ) Roof LoadRoof ( Dictionary data ) Roof UpdateSunlight ( bool enabled, float angle, float contrast ) void Resize ( int x, int y, int w, int h ) </p>"},{"location":"reference/Roofs/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul> <ul> <li>bool Shade:   Get or set if the sun shades the roofs. Set with UpdateSunlight(). </li> </ul> <ul> <li>float SunDirection:   Get or set the direction of the sun in degrees. Set with UpdateSunlight(). </li> </ul> <ul> <li>float ShadeContrast:   Get or set the contrast of the sun shading. Set with UpdateSunlight(). </li> </ul>"},{"location":"reference/Roofs/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Roof CreateRoof ( int sorting ):   Creates a Roof with the following options and adds it as a child. For the parameter sorting, valid options are: 0 = Over, 1 = Under. </li> </ul> <ul> <li>Dictionary Save ( ):   Save all Roofs and sun data in this level as a list into the save file format and return it as an Dictionary. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a list of saved Roof data. Used by a saved map file to load existing Roofs. </li> </ul> <ul> <li>Roof LoadRoof ( Dictionary data ):   Load a single Roof into this level. Called by Load() as it loads all the Roofs. </li> </ul> <ul> <li>Roof UpdateSunlight ( bool enabled, float angle, float contrast ):   Make changes to the sunlight settings. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul>"},{"location":"reference/ScatterTool/","title":"ScatterTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/ScatterTool/#description","title":"Description","text":"<p>The tool used to scatter objects. Inherits from Tool.</p> <p>Accessed by <code>Global.Editor.Tools[\"ScatterTool\"]</code>.</p>"},{"location":"reference/ScatterTool/#properties","title":"Properties","text":"<p> Texture[] textures Texture texture Prop Preview Range MinRotation Range MaxRotation Range MinScale Range MaxScale Color[] Colors Range Spread bool Shadow OptionButton LayerMenu int ActiveLayer int Sorting GridMenu GridMenu Dictionary LibraryMemory bool isDrawing Prop[] currentStroke </p>"},{"location":"reference/ScatterTool/#methods","title":"Methods","text":"<p> void Next ( bool cycle ) void SetLayer ( int index ) void SetShadow ( bool value ) void PromoteCustomColor ( ) void SetSorting ( int sorting ) </p>"},{"location":"reference/ScatterTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture[] textures:   Arrau of Texture of the asset selected. WRITE ONLY. </li> </ul> <ul> <li>Texture texture:  Texture of the asset selected (when only 1 is selected). Used automatically by the UI controls. Does not update the preview link:<code>Prop</code> automatically. </li> </ul> <ul> <li>Prop Preview:   Gets the preview Prop. This is the object that follows the user's cursor before it is actually placed. Call confirm to force it to place. </li> </ul> <ul> <li>Range MinRotation:  Range that determines the minimum rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range MaxRotation:  Range that determines the maximum rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range MinScale:  Range that determines the minimum scale of the objects placed. </li> </ul> <ul> <li>Range MaxScale:  Range that determines the maximum scale of the objects placed. </li> </ul> <ul> <li>Color[] Colors:   The collection of custm colors to use (if applicable) randomly for the objects placed. </li> </ul> <ul> <li>Range Spread:  Range that determines how far apart the objects are placed. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the tool will place objects with shadows. Read only. Set with SetShadow() instead. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Object Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next object will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>int Sorting:   Where the next object will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>GridMenu GridMenu:   The menu in the Object Library Panel that selects textures for this tool. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>Prop[] currentStroke:   The current collection of Props that represented the latest brush stroke from the user. </li> </ul>"},{"location":"reference/ScatterTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Next ( bool cycle ):   Create a new preview link:<code>Prop</code> using the last known options and texture selected. The param cycle is used to prevent creating a new Prop, but instead update the current one when a user cycles the selection without placing any. </li> </ul> <ul> <li>void SetLayer ( int index ):   Set layer option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void PromoteCustomColor ( ):   Update the preview Prop to reflect the custom color. Better to call ChangeColor() than this function directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul>"},{"location":"reference/SelectTool/","title":"SelectTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/SelectTool/#description","title":"Description","text":"<p>The tool used to select objects. Inherits from Tool.</p> <p>Accessed by <code>Global.Editor.Tools[\"SelectTool\"]</code>.</p>"},{"location":"reference/SelectTool/#properties","title":"Properties","text":"<p> Selectable highlighted Node2D[] Selected Dictionary Selectables Selectable[] RawSelectables Vector2 boxBegin Vector2 boxEnd bool isDrawing bool isMakingPrefab int transformMode int transformCorner Dictionary initialRelativeTransforms Transform2D preDragTransform Vector2 transformPreDragBoxSize Vector2 transformPreDragMousePosition float transformPreDragMouseRotation int manualAction Node2D[] movableThings Vector2[] preMovePositions Vector2 moveDelta bool justManualMoved Portal movedPortal Sprite portalAfterimage Wall movedPortalWall Light2D attenuatedLight float instantDragTimer int[] transformsIDs Transform2D[] transformsBefore Transform2D[] transformsAfter bool hasDetectedMouseMotionThisFrame Dictionary Filter Dictionary LayerFilter OptionButton LayerMenu bool AreDeletable bool HasCopyable bool HasPrefab bool HasPastable </p>"},{"location":"reference/SelectTool/#methods","title":"Methods","text":"<p> void OnFinishSelection ( ) void HandleUndoOrRedo ( ) bool IsSelectableLocked ( Selectable s ) void CheckForInstantDrag ( Selectable s ) void Delete ( ) void PreviousTool ( ) void HighlightThingAtPoint ( ) void DehighlightSelected ( ) void Highlight ( Selectable s, bool value ) void SelectThingsInsideBox ( Rect2 box, bool value ) bool IsDeletable ( Selectable s ) void DeselectAll ( ) void DeselectAllEx ( ) void Select ( Selectable s, bool value ) Selectable SelectThing ( Node2D thing, bool value ) Selectable[] GetGrouped ( Selectable s ) int GetSelectableType ( Node node ) Selectable GetSelectable ( Node2D thing ) void EnableTransformBox ( bool value ) void ClearTransformSelection ( ) Rect2 GetSelectionRect ( ) int GetTransformMode ( ) void ApplyTransforms ( Transform2D t ) void RotateTransformBox ( float rotation ) void MirrorTransformBox ( ) void SavePreTransforms ( ) void RecordTransforms ( ) void PreviewPortalMove ( ) void ApplyPortalMove ( ) void Copy ( ) String Serialize ( bool clipboard ) void Lock ( ) bool IsSelectionLocked ( ) void MakePrefab ( ) void Separate ( ) void Paste ( ) void MergeWalls ( ) bool IsObjectLayerFiltered ( Node2D object ) void SetLayer ( int index ) void ChangeTexture ( Texture texture, String name ) void ChangeColor ( Color color, String name ) Color GetWallColor ( Texture texture = null ) void SetWallColor ( Color color ) void SetPatternColor ( Color color ) void SetPortalClosed ( bool value ) void SetShadow ( bool value ) void SetBlockLight ( bool value ) void SetPathwayTexture ( Texture texture ) void BringToFront ( ) void SendToBack ( ) </p>"},{"location":"reference/SelectTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Selectable highlighted:"},{"location":"reference/SelectTool/#_1","title":"SelectTool","text":"<ul> <li>Node2D[] Selected:   Gets an array of things selected by the user. A special function exposed a beautified version of the selection to mod scripts. </li> </ul> <ul> <li>Dictionary Selectables:   Gets a dictionary of things selected by the user of Node2D key - int value pairs. A special function exposed a beautified version of the selection to mod scripts. The key are the selected things and the int is the type of selected thing. Reference the following enum to identify a selected type. The enumeration is internal to Dungeondraft and becomes an int when it enters your script. <pre><code>enum SelectableTypes\n{\nInvalid = 0\nWall = 1\nPortalFree = 2\nPortalWall = 3\nObject = 4\nPathway = 5\nLight = 6\nPatternShape = 7\nRoof = 8\n}\n</code></pre> </li> </ul> <ul> <li>Selectable[] RawSelectables:   Gets an array of unbeautified Selectable. It is a sub-class which allows the SelectTool to safely select and manipulate asset instances. When a SelectTool modifies a selection, Selectable is the real class that is used. A Selectable has three properties: </li> </ul> <ul> <li>Vector2 boxBegin:   Gets the selection box start position. </li> </ul> <ul> <li>Vector2 boxEnd:   Gets the selection box end position. </li> </ul> <ul> <li>bool isDrawing:   Gets if the user is actively drawing. </li> </ul> <ul> <li>bool isMakingPrefab:   Gets if the user has the prefab window open and is trying to make a new prefab. </li> </ul> <ul> <li>int transformMode:   Gets the current mode of the transformation box. It is automatically adjusted based on the user's mouse cursor intention. gdscript enum TransformMode {     None,     Move,     Rotate,     Scale } </li> </ul> <ul> <li>int transformCorner:   Gets the corner id of the mouse corner on the selection box. The ids are in clockwise order starting from the top-left corner from 0 to 3. A -1 means that the cursor is not near a corner. </li> </ul> <ul> <li>Dictionary initialRelativeTransforms:   Gets a Dictionary of Selectable key - Transform2D value pairs that preserves the positional data of the selected objects before it was transformed by the user. </li> </ul> <ul> <li>Transform2D preDragTransform:   The transformation data of the selection box (not the objects) before the user moves it. </li> </ul> <ul> <li>Vector2 transformPreDragBoxSize:   The size of the selection box (not the objects) before the user moves it. Only accurate when the user is actively resizing. </li> </ul> <ul> <li>Vector2 transformPreDragMousePosition:   The position of the selection box (not the objects) before the user moves it. Only accurate when the user is actively moving. </li> </ul> <ul> <li>float transformPreDragMouseRotation:   The rotation of the selection box (not the objects) before the user moves it. Only accurate when the user is actively rotating. </li> </ul> <ul> <li>int manualAction:   Gets the manual action of a single selected object is applicable. public enum ManualAction {     None,     MoveThing,     MovePortal,     AttenuateLight } </li> </ul> <ul> <li>Node2D[] movableThings:   Gets the list of things in selection that are movable during instant drag. </li> </ul> <ul> <li>Vector2[] preMovePositions:   Gets the list of pre move positions of things in selection that are movable during instant drag. </li> </ul> <ul> <li>Vector2 moveDelta:   Gets the vector of the last manual move. </li> </ul> <ul> <li>bool justManualMoved:   Gets if the user just manually drag moved a selection. </li> </ul> <ul> <li>Portal movedPortal:   Gets the portal that was just moved. </li> </ul> <ul> <li>Sprite portalAfterimage:   Gets the ghost image of the portal in the original position during a user's dragging of a portal. </li> </ul> <ul> <li>Wall movedPortalWall:   Gets the wall the moved portal originated from. </li> </ul> <ul> <li>Light2D attenuatedLight:   Gets the light that was last instant edited. </li> </ul> <ul> <li>float instantDragTimer:   A short timer variable used to slightly delay an instant-drag for better feel. </li> </ul> <ul> <li>int[] transformsIDs:   Gets all the NodeIDs of selected objects being transformed. </li> </ul> <ul> <li>Transform2D[] transformsBefore:   Gets the transformation data of selected objects before a change. Used for undo history. </li> </ul> <ul> <li>Transform2D[] transformsAfter:   Gets the transformation data of selected objects after a change. Used for undo history. </li> </ul> <ul> <li>bool hasDetectedMouseMotionThisFrame:   Gets if mouse cursor movement was detected this engine frame. </li> </ul> <ul> <li>Dictionary Filter:   The lookup table of String key - bool value pair of whether or not a filter for the select tool is enabled. Used by the Type Filter menu in UI. Valid keys are: \"Walls\", \"Portals\", \"Objects\", \"Paths\", \"Lights\", \"Patterns\", and \"Roofs\". </li> </ul> <ul> <li>Dictionary LayerFilter:   The lookup table of int key - bool value pair of whether or not a layer for the select tool is enabled. Used by the Layer Filter menu in UI. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Select Tool to change a selection to. </li> </ul> <ul> <li>bool AreDeletable:   Checks if the selection has deletable objects. </li> </ul> <ul> <li>bool HasCopyable:   Checks if the selection has any copyable objects. </li> </ul> <ul> <li>bool HasPrefab:   Gets if there are any prefabs selected. </li> </ul> <ul> <li>bool HasPastable:   Gets if there are anything to paste in the OS clipboard. </li> </ul>"},{"location":"reference/SelectTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void OnFinishSelection ( ):   Called when a user lets go of a new drag box, and creates a visual selection box that allows transformations. </li> </ul> <ul> <li>void HandleUndoOrRedo ( ):   Called when an undo or redo is performed to clear existing selections. </li> </ul> <ul> <li>bool IsSelectableLocked ( Selectable s ):   Checks if a selectable is locked </li> </ul> <ul> <li>void CheckForInstantDrag ( Selectable s ):   Checks if the mouse-overed object is available for instant modification features. Will prepare the relevant properties if applicable like moveDelta and manualAction. </li> </ul> <ul> <li>void Delete ( ):   Deletes all selected things. </li> </ul> <ul> <li>void PreviousTool ( ):   Switches to the last used tool away from SelectTool. </li> </ul> <ul> <li>void HighlightThingAtPoint ( ):   Highlight the thing under the mouse cursor. </li> </ul> <ul> <li>void DehighlightSelected ( ):   Removes highlighting of selected objects. (No need to highlight once selected). </li> </ul> <ul> <li>void Highlight ( Selectable s, bool value ):   Set if a Selectable is highlighted </li> </ul> <ul> <li>void SelectThingsInsideBox ( Rect2 box, bool value ):   Select things inside the Rect2 in world space while respecting any current filters. </li> </ul> <ul> <li>bool IsDeletable ( Selectable s ):   Returns true if the Selectable s is a deletable type </li> </ul> <ul> <li>void DeselectAll ( ):   Removes all things from selection. Call ClearTransformSelection() instead if you want to also clear the selection box visuals. </li> </ul> <ul> <li>void DeselectAllEx ( ):   Same as deselect all, except used when the user holds Shift to keep certain objects selected. </li> </ul> <ul> <li>void Select ( Selectable s, bool value ):   Selects or deselects the parameter s. </li> </ul> <ul> <li>Selectable SelectThing ( Node2D thing, bool value ):   External version of Select to allow safe select and deselecting of things. Automatically creates an internal Selectable if it does not exist. You will want to call Global.Editor.Toolset.GetToolPanel(\"SelectTool\").OnSelect(type) if you want the Select Tool panel to display the controls that allow the user to edit the selected type. Returns the existing Selectable or creates a new Selectable if it does not exist. </li> </ul> <ul> <li>Selectable[] GetGrouped ( Selectable s ):   Gets the entire set of things grouped by a prefab when given one thing. </li> </ul> <ul> <li>int GetSelectableType ( Node node ):   Gets the SelectableType of the thing. </li> </ul> <ul> <li>Selectable GetSelectable ( Node2D thing ):   Gets the Selectable of a thing. Only works for things already inside the selection. Otherwise, use Select(Node2D thing). </li> </ul> <ul> <li>void EnableTransformBox ( bool value ):   Turns on and off the selection box visuals. </li> </ul> <ul> <li>void ClearTransformSelection ( ):   Deselects all things and also removes the selection box visuals. </li> </ul> <ul> <li>Rect2 GetSelectionRect ( ):   Returns a Rect2 that encloses all selected things. This is the function also called internally by SelectTool just after a user draws a box. </li> </ul> <ul> <li>int GetTransformMode ( ):   Checks the selection and updates to the proper transform mode and returns it as an int. <pre><code>public enum TransformMode\n{\nNone,\nMove,\nRotate,\nScale\n}\n</code></pre> </li> </ul> <ul> <li>void ApplyTransforms ( Transform2D t ):   Applies a custom transform to any objects in the selection that can be transformed. </li> </ul> <ul> <li>void RotateTransformBox ( float rotation ):   Rotates every thing that can be rotated in degrees by the center of the box. </li> </ul> <ul> <li>void MirrorTransformBox ( ):   Horizontally flip all transformable things along center of the box. </li> </ul> <ul> <li>void SavePreTransforms ( ):   Creates a snapshot of the transforms of the selection before a change. Saves to transformIDs and transformsBefore. </li> </ul> <ul> <li>void RecordTransforms ( ):   Records any changes for the redo history and uses the data from SavePreTransforms() to create the undo history. </li> </ul> <ul> <li>void PreviewPortalMove ( ):   Called when the user drags a Portal and creates a ghost in the old Portal location and moves the Portal to the closest logical place along a wall under the cursor. </li> </ul> <ul> <li>void ApplyPortalMove ( ):   Finalizes the previewed Portal move and deletes the previous Portal and its ghost image. </li> </ul> <ul> <li>void Copy ( ):   Copies the selection onto the OS clipboard as text serialized by Serialize(). </li> </ul> <ul> <li>String Serialize ( bool clipboard ):   Serialize the selection into text. Set clipboard to true if using it to copy and to false if using it to make a prefab. </li> </ul> <ul> <li>void Lock ( ):   Toggles the lock on selected things. Use carefully, as the user may not realize you locked their asset instances. </li> </ul> <ul> <li>bool IsSelectionLocked ( ):   Returns true if the first thing the user selected is locked. </li> </ul> <ul> <li>void MakePrefab ( ):   Prompts the user to make the current selection into a prefab. </li> </ul> <ul> <li>void Separate ( ):   Separate the current selected prefab instance into individual pieces and disassociating with the prefab. </li> </ul> <ul> <li>void Paste ( ):   Converts any text in the clipboard that is pastable into real objects and pastes it onto the map. </li> </ul> <ul> <li>void MergeWalls ( ):   Merges walls if there are more than one wall selected that can be merged. Incompatible with a selection of mixed types. </li> </ul> <ul> <li>bool IsObjectLayerFiltered ( Node2D object ):   Checks if the object in question would be filtered out by the layer filter. </li> </ul> <ul> <li>void SetLayer ( int index ):"},{"location":"reference/SelectTool/#_2","title":"SelectTool","text":"<ul> <li>void ChangeTexture ( Texture texture, String name ):   Change a texture of the selected items. Valid name options are: \"WallTexture\", \"PortalTexture\", \"PatternTexture\", and \"LightTexture\". </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Change a color of the selected items. Valid name options are: \"WallColor\", \"CustomColor\", \"PatternColor\", and \"LightColor\". </li> </ul> <ul> <li>Color GetWallColor ( Texture texture = null ):   Gets the default wall color for this specific texture. </li> </ul> <ul> <li>void SetWallColor ( Color color ):   Change the color of the selected wall. </li> </ul> <ul> <li>void SetPatternColor ( Color color ):   Change selected pattern shape color. </li> </ul> <ul> <li>void SetPortalClosed ( bool value ):   Set selected portals to close it to block light. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set selected items to draw a shadow underneath if applicable. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Set selected items to block light if applicable. </li> </ul> <ul> <li>void SetPathwayTexture ( Texture texture ):   Set selected pathways to this texture style. </li> </ul> <ul> <li>void BringToFront ( ):   Bring selected items to the foreground if applicable. </li> </ul> <ul> <li>void SendToBack ( ):   Send selected items to the background if applicable. </li> </ul>"},{"location":"reference/Selectable/","title":"Selectable","text":"<p>Extends: Reference</p>"},{"location":"reference/Selectable/#description","title":"Description","text":"<p>Wrapper class that describes a selectable thing in Dungeondraft.</p>"},{"location":"reference/Selectable/#properties","title":"Properties","text":"<p> Node2D Thing int Type bool IsInGroup </p>"},{"location":"reference/Selectable/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Node2D Thing:   The Asset Instance or other selectable object. </li> </ul> <ul> <li>int Type:   The type of Selectable the held thing is. <pre><code>enum SelectableTypes\n{\nInvalid = 0\nWall = 1\nPortalFree = 2\nPortalWall = 3\nObject = 4\nPathway = 5\nLight = 6\nPatternShape = 7\nRoof = 8\n}\n</code></pre> </li> </ul> <ul> <li>bool IsInGroup:   Whether or not the object is grouped together because it is part of a prefab. </li> </ul>"},{"location":"reference/ShapeTool/","title":"ShapeTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/ShapeTool/#description","title":"Description","text":"<p>The abstract class for tools that uses shapes.</p> <p>Not directly accessible.</p>"},{"location":"reference/ShapeTool/#properties","title":"Properties","text":"<p> int Mode Vector2 boxBegin Vector2 boxEnd bool isDrawing bool invertAction </p>"},{"location":"reference/ShapeTool/#methods","title":"Methods","text":"<p> void FinishShape ( ) </p>"},{"location":"reference/ShapeTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Mode:   Determines the style of shape drawn. 0 = Rectangular, 1 = Circular, 2 = Polygonal </li> </ul> <ul> <li>Vector2 boxBegin:   Start coordinates of the box that a user drags. </li> </ul> <ul> <li>Vector2 boxEnd:   End coordinates of the box that a user drags. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>bool invertAction:   Whether the user is actively holding down shift to remove shapes instead of add. </li> </ul>"},{"location":"reference/ShapeTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void FinishShape ( ):   Only works to draw in the Polygonal mode. For the other 2 modes, a C# interface is used to polymorphically select the correct function in their respective shapes. You need to use FloorShapes, PatternShapes, etc to create the other shapes directly. Takes the polyline from WorldUI and turns it into a shape. Automagically determines if it needs to loop or add new points. </li> </ul>"},{"location":"reference/Shapes/","title":"Shapes","text":"<p>Extends: Plexigon2D &lt; Node2D</p>"},{"location":"reference/Shapes/#description","title":"Description","text":"<p>Shapes subclass that makes it easier to use the Plexigon2D class.</p>"},{"location":"reference/Shapes/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void DrawRect ( Rect2 rect, bool invertAction ) void DrawCircle ( Rect2 rect, int sides, bool invertAction ) void DrawPolygon ( Vector2[] points, bool invertAction ) void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ) void FinalizeOutlines ( ) void ClipPolygons ( Vector2[] newPolygon, int clipType ) void UpdatePolygon ( int id, Vector2[] points ) void RemovePolygon ( int id ) </p>"},{"location":"reference/Shapes/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Shapes into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Shapes data. Used by a saved map file to load existing shapes. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void DrawRect ( Rect2 rect, bool invertAction ):   Draws a rectangle. </li> </ul> <ul> <li>void DrawCircle ( Rect2 rect, int sides, bool invertAction ):   Draws a circle. </li> </ul> <ul> <li>void DrawPolygon ( Vector2[] points, bool invertAction ):   Draws a polygon. </li> </ul> <ul> <li>void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ):   The internal method DrawRect(), DrawCircle(), and DrawPolygon() all call to draw onto the water. Calls ClipPolygons() Not advisable to call directly. </li> </ul> <ul> <li>void FinalizeOutlines ( ):   Convert added vertices into shapes that are drawn. Called by ClipPolygons() and therefore by AddPolygon() and therefore by DrawRect(), DrawCircle(), and DrawPolygon. Not necessary to call directly. </li> </ul> <ul> <li>void ClipPolygons ( Vector2[] newPolygon, int clipType ):   Uses ClipLib algorithm to clip the new polygons against the existing ones. Valid options for clipType are: 0 = Intersection, 1 = Union, 2 = Difference, 3 = Xor. </li> </ul> <ul> <li>void UpdatePolygon ( int id, Vector2[] points ):   Manually add a polygon. Easier to use the Draw... methods. </li> </ul> <ul> <li>void RemovePolygon ( int id ):   Remove a polygon by id. </li> </ul>"},{"location":"reference/TagsPanel/","title":"TagsPanel","text":"<p>Extends: VBoxContainer</p>"},{"location":"reference/TagsPanel/#description","title":"Description","text":"<p>This is the special box that shows tags in the default Object Tool</p>"},{"location":"reference/TagsPanel/#properties","title":"Properties","text":"<p> OptionButton setList ItemList tagsList Dictionary tagIndexLookup ??? ObjectTool bool TagsEnabled </p>"},{"location":"reference/TagsPanel/#methods","title":"Methods","text":"<p> void UpdateTags ( ) Dictionary Save ( ) void Load ( Dictionary data ) void EnableTags ( bool enable ) void SelectTagSetById ( int id ) void SelectTagSet ( String set ) void ShowCurrentTagSet ( ) </p>"},{"location":"reference/TagsPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton setList:   Dropdown menu that displays the tag sets for the user to choose. </li> </ul> <ul> <li>ItemList tagsList:   The box where the user clicks to select tags. Can multi-select. </li> </ul> <ul> <li>Dictionary tagIndexLookup:   Dictionary that allows you to look up a tag's index. tagIndexLookup[tag] results in a int. </li> </ul> <ul> <li>ObjectTool:   A private reference to the ObjectTool that shouldn't be used in a mod. </li> </ul> <ul> <li>bool TagsEnabled:   Is this TagsPanel visually enabled. </li> </ul>"},{"location":"reference/TagsPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void UpdateTags ( ):   Refresh the tags available by looking up Master.TagSets. </li> </ul> <ul> <li>Dictionary Save ( ):   Serialize the selected tags into a Dictionary. Looks like JSON. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a previous user's selected tags by passing in a Dictionary. See Save(). </li> </ul> <ul> <li>void EnableTags ( bool enable ):   Enable this TagsPanel so it can be used. When a user clicks on the tags, it calls this method as well. </li> </ul> <ul> <li>void SelectTagSetById ( int id ):   Manually selects the tag set by id in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void SelectTagSet ( String set ):   Manually selects the tag set by String in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void ShowCurrentTagSet ( ):   Display the assets associated with this tag in the Object Library Panel. </li> </ul>"},{"location":"reference/Terrain/","title":"Terrain","text":"<p>Extends: MeshInstance2D</p>"},{"location":"reference/Terrain/#description","title":"Description","text":"<p>The visual component of the terrain.</p> <p>Accessed by through the Level instance.</p>"},{"location":"reference/Terrain/#properties","title":"Properties","text":"<p> Level Level Image splatImage Image splatImage2 ImageTexture splatTexture ImageTexture splatTexture2 ShaderMaterial ShaderMaterial Texture[] textures bool ExpandedSlots bool SmoothBlending Shader normalShader Shader expandedShader Shader smoothShader Shader expandedSmoothShader int width int height </p>"},{"location":"reference/Terrain/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) Vector2 WorldToTexture ( Vector2 position ) Vector2 TextureToWorld ( Vector2 position ) Vector2 SnapWorldToTextureBlob ( Vector2 position ) void UpdateSplat ( ) void Paint ( int terrainID, Image brush, Vector2 offset, Vector2 position, float rate ) void Fill ( int terrainID ) void RestoreSplat ( Image splat ) void RestoreSplat2 ( Image splat, Image splat2 ) void SetTexture ( Texture texture, int index ) Texture GetTexture ( int index ) Image CloneSplatImage ( ) Image CloneSplatImage2 ( ) void ExpandSlots ( bool value ) void SetSmoothBlending ( bool enabled ) </p>"},{"location":"reference/Terrain/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this Terrain resides. </li> </ul> <ul> <li>Image splatImage:   The splat map of the first 4 textures. </li> </ul> <ul> <li>Image splatImage2:   The splat map of the second 4 textures. </li> </ul> <ul> <li>ImageTexture splatTexture:   The texture of the splat map of the first 4 textures. </li> </ul> <ul> <li>ImageTexture splatTexture2:   The texture of the splat map of the second 4 textures. </li> </ul> <ul> <li>ShaderMaterial ShaderMaterial:   The material used to shade the Terrain. </li> </ul> <ul> <li>Texture[] textures:   The textures used by this Terrain. The size of the array is 4 or 8 based on the ExpandedSlots property. </li> </ul> <ul> <li>bool ExpandedSlots:   Gets if the user expanded the terrain slots. Call ExpandSlots() to modify. Do not modify directly. </li> </ul> <ul> <li>bool SmoothBlending:   Gets if the user set the terrain to smooth. Call SetSmoothBlending() to modify. Do not modify directly. </li> </ul> <ul> <li>Shader normalShader:   Gets the default shader of the terrain. </li> </ul> <ul> <li>Shader expandedShader:   Gets the default shader of the terrain with expanded slots. </li> </ul> <ul> <li>Shader smoothShader:   Gets the smooth shader of the terrain. </li> </ul> <ul> <li>Shader expandedSmoothShader:   Gets the smooth shader of the terrain with expanded slots. </li> </ul> <ul> <li>int width:   Gets the width of the terrain map. DO NOT MODIFY. </li> </ul> <ul> <li>int height:   Gets the height of the terrain map. DO NOT MODIFY. </li> </ul>"},{"location":"reference/Terrain/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Terrain into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Terrain data. Used by a saved map file to load existing terrain. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>Vector2 WorldToTexture ( Vector2 position ):   Convert a world position to texture space. </li> </ul> <ul> <li>Vector2 TextureToWorld ( Vector2 position ):   Convert a texture position to world space. </li> </ul> <ul> <li>Vector2 SnapWorldToTextureBlob ( Vector2 position ):   Snaps a world position, typically the mouse cursor, to center on a terrain pixel. </li> </ul> <ul> <li>void UpdateSplat ( ):   Send terrain changes from the CPU to the GPU so that it is rendered. </li> </ul> <ul> <li>void Paint ( int terrainID, Image brush, Vector2 offset, Vector2 position, float rate ):   Paints the image called bursh at the texture space position. Calls UpdateSplat() internally. </li> </ul> <ul> <li>void Fill ( int terrainID ):   Fill the terrain with the selected terrain texture. Calls UpdateSplat() internally. </li> </ul> <ul> <li>void RestoreSplat ( Image splat ):   Restore a splat image to the Terrain. Overwrites existing Terrain. Used by undo history. </li> </ul> <ul> <li>void RestoreSplat2 ( Image splat, Image splat2 ):   The expanded slot version of RestoreSplat(). </li> </ul> <ul> <li>void SetTexture ( Texture texture, int index ):   Change the texture being used at the index slot. </li> </ul> <ul> <li>Texture GetTexture ( int index ):   Get the texture being used at index slot. </li> </ul> <ul> <li>Image CloneSplatImage ( ):   Copies the current splat image to a new Image. </li> </ul> <ul> <li>Image CloneSplatImage2 ( ):   Copies the second splat image to a new Image. (Used by the terrain texture 5-8). </li> </ul> <ul> <li>void ExpandSlots ( bool value ):   Toggles the Terrain between 4 and 8 slots. </li> </ul> <ul> <li>void SetSmoothBlending ( bool enabled ):   Toggles if the terrain is using texured blending or smooth blending. </li> </ul>"},{"location":"reference/TerrainBrush/","title":"TerrainBrush","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/TerrainBrush/#description","title":"Description","text":"<p>The tool used to edit the terrain. Mostly to mod the Terrain Tool. To draw on the Terrain, use World.Level.Terrain.Paint() instead.</p> <p>Accessed by <code>Global.Editor.Tools[\"TerrainBrush\"]</code>.</p>"},{"location":"reference/TerrainBrush/#properties","title":"Properties","text":"<p> bool Enabled float BrushRadius bool IsPainting int TerrainID bool SmoothBlending float Size float Intensity Image brush Image previousSplat Image previousSplat2 ItemList terrainList VBoxContainer terrainButtonBox bool extendedTerrainTypes </p>"},{"location":"reference/TerrainBrush/#methods","title":"Methods","text":"<p> void SetBiome ( int index ) void SetSize ( float value ) void SetSmoothBlending ( bool enabled ) void SetTextureFromWindow ( Texture texture, int listIndex ) void UpdateBrush ( ) float GetBrushRadius ( ) void Fill ( ) void ExpandSlots ( bool value ) void SetControlsForExpandedSlots ( bool value ) </p>"},{"location":"reference/TerrainBrush/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool Enabled:   Gets if the tool is enabled by the user. </li> </ul> <ul> <li>float BrushRadius:   Gets the brush radius in canvas unit size. </li> </ul> <ul> <li>bool IsPainting:   Gets if the user is currently painting. </li> </ul> <ul> <li>int TerrainID:   Get or set the terrain being painted by slot order. </li> </ul> <ul> <li>bool SmoothBlending:   Get if the brush is smooth. Call SetSmoothBlending() to set instead. </li> </ul> <ul> <li>float Size:   Get or set the size of the brush. </li> </ul> <ul> <li>float Intensity:   Get or set the intensity of the brush. </li> </ul> <ul> <li>Image brush:   The Godot Image of the current brush style. </li> </ul> <ul> <li>Image previousSplat:   The previous version of the splatmap of the Terrain. Used for undo history. </li> </ul> <ul> <li>Image previousSplat2:   The previous version of the 2nd splatmap needed when slots are expanded to 8. Used for undo history. </li> </ul> <ul> <li>ItemList terrainList:   The UI Control that contains the current set of textures available. </li> </ul> <ul> <li>VBoxContainer terrainButtonBox:   The UI Control that contains all the terrain selection buttons. </li> </ul> <ul> <li>bool extendedTerrainTypes:   Gets whether or not the user has selected to expand terrain slots. </li> </ul>"},{"location":"reference/TerrainBrush/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetBiome ( int index ):   Selects a Terrain to paint based on the index of the texture list. </li> </ul> <ul> <li>void SetSize ( float value ):   Change the brush size. Calls UpdateBrush() automatically. </li> </ul> <ul> <li>void SetSmoothBlending ( bool enabled ):   Toggles if the terrain is using texured blending or smooth blending. </li> </ul> <ul> <li>void SetTextureFromWindow ( Texture texture, int listIndex ):   Called by the Texture Window to set the terrain </li> </ul> <ul> <li>void UpdateBrush ( ):   Call to update the brush once Size is set. </li> </ul> <ul> <li>float GetBrushRadius ( ):   Gets the brush radius. </li> </ul> <ul> <li>void Fill ( ):   Fill the terrain with the selected terrain texture. </li> </ul> <ul> <li>void ExpandSlots ( bool value ):   Set to expand terrain to 8 slots. </li> </ul> <ul> <li>void SetControlsForExpandedSlots ( bool value ):   Called by ExpandSlots() to update the UI to use more slots. </li> </ul>"},{"location":"reference/Text/","title":"Text","text":"<p>Extends: LineEdit</p>"},{"location":"reference/Text/#description","title":"Description","text":"<p>A Text is a Dungeondraft asset instance of what the user sees as an text from the TextTool. See Asset Instance.</p>"},{"location":"reference/Text/#properties","title":"Properties","text":"<p> int boxShape String fontName int fontSize Color fontColor int borderWidth Dictionary dataOnFocus bool QueueNewHistoryRecord </p>"},{"location":"reference/Text/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void Replace ( Dictionary data ) bool IsMouseWithin ( ) void SetFont ( String name, int size ) void SetFontSize ( int size ) void SetFontColor ( Color color ) void EnableTextBox ( int borderWidth, Color bgColor, Color borderColor, int shape ) void DisableTextBox ( ) void SetBoxShape ( int shape ) void SetBorderWidth ( int width ) void HandleExport ( bool exporting ) </p>"},{"location":"reference/Text/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int boxShape:   Not set manually. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>String fontName:   Not set manually. </li> </ul> <ul> <li>int fontSize:   Not set manually. </li> </ul> <ul> <li>Color fontColor:   Not set manually. </li> </ul> <ul> <li>int borderWidth:   Not set manually. </li> </ul> <ul> <li>Dictionary dataOnFocus:   The saved data when this Text is in focus in case an Undo record needs to be recorded. </li> </ul> <ul> <li>bool QueueNewHistoryRecord:   Tells Dungeondraft to record the Undo History of any changes when the focused text leaves focus. </li> </ul>"},{"location":"reference/Text/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Text into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Text data. Used by a saved map file to load existing texts. </li> </ul> <ul> <li>void Replace ( Dictionary data ):   Replace an existing text with saved data. Used by Undo History. </li> </ul> <ul> <li>bool IsMouseWithin ( ):   Checks if the mouse cursor is over the Text. Only used by the SelectTool. </li> </ul> <ul> <li>void SetFont ( String name, int size ):   Change the font and its size. </li> </ul> <ul> <li>void SetFontSize ( int size ):   Changes the font size. </li> </ul> <ul> <li>void SetFontColor ( Color color ):   Change the font color. </li> </ul> <ul> <li>void EnableTextBox ( int borderWidth, Color bgColor, Color borderColor, int shape ):   Enable and set options of a text box. </li> </ul> <ul> <li>void DisableTextBox ( ):   Hide the text box. </li> </ul> <ul> <li>void SetBoxShape ( int shape ):   Changes the shape of the text box. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>void SetBorderWidth ( int width ):   Changes the width of the text box border. </li> </ul> <ul> <li>void HandleExport ( bool exporting ):   Called during the export process so the font sizing would be accurate. Not needed to be manually called. </li> </ul>"},{"location":"reference/TextTool/","title":"TextTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/TextTool/#description","title":"Description","text":"<p>The tool used to edit the texts.</p> <p>Accessed by <code>Global.Editor.Tools[\"TextTool\"]</code>.</p>"},{"location":"reference/TextTool/#properties","title":"Properties","text":"<p> int Mode float FontSize Color FontColor bool SharpenFonts bool TextBox int BoxShape float BorderWidth Color BoxBackgroundColor Color BoxBorderColor OptionButton FontOptions Text focus bool isDragging bool HasFocused </p>"},{"location":"reference/TextTool/#methods","title":"Methods","text":"<p> void SetFocus ( Text text ) void OnModeChanged ( int mode ) void SetFont ( int index ) void ChangeFontSize ( float value ) void ChangeColor ( Color color, String name ) void SetSharpenFonts ( bool value ) void SetVisible ( bool value ) void SetTextBox ( bool value ) void SetBoxShape ( int shape ) void OnBorderWidthChanged ( float value ) void UpdateText ( Text text ) void Delete ( ) </p>"},{"location":"reference/TextTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Mode:   0 = Edit, 1 = Move. Call OnModeChange() to set. </li> </ul> <ul> <li>float FontSize:   Changes the font size. UI state. Call ChangeFontSize() instead. </li> </ul> <ul> <li>Color FontColor:   Changes the font color. UI state. Call ChangeColor() instead. </li> </ul> <ul> <li>bool SharpenFonts:   Sharpens the font when zoomed in. UI state. Call SetSharpenFonts() instead. </li> </ul> <ul> <li>bool TextBox:   Puts a box around the text labels. UI state. Call SetTextBox() instead. </li> </ul> <ul> <li>int BoxShape:   Changes the shape of the box when enabled. Calls SetBoxShape() internally. </li> </ul> <ul> <li>float BorderWidth:   Changes the width of a box. UI state. Call OnBorderWidthChanged() instead. </li> </ul> <ul> <li>Color BoxBackgroundColor:   Changes the background color of a box. Set before calling SetTextBox(). </li> </ul> <ul> <li>Color BoxBorderColor:   Changes the border color of a box. Set before calling SetTextBox(). </li> </ul> <ul> <li>OptionButton FontOptions:   Reference to the OptionButton representing the font selection. Do not modify the reference, only change the OptionButton itself. </li> </ul> <ul> <li>Text focus:   Reference to the Text in focus. </li> </ul> <ul> <li>bool isDragging:   Is the user actively dragging a text. </li> </ul> <ul> <li>bool HasFocused:   Is there a text in focus. Read only. </li> </ul>"},{"location":"reference/TextTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetFocus ( Text text ):   Sets the text in focus. </li> </ul> <ul> <li>void OnModeChanged ( int mode ):   Changes the edit mode. 0 = Edit, 1 = Move </li> </ul> <ul> <li>void SetFont ( int index ):   Changes the font. The index is the value of the font in the dropdown order. </li> </ul> <ul> <li>void ChangeFontSize ( float value ):   Changes the font size. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Changes the font colors. Valid entries for names are: \"FontColor\", \"BoxBackgroundColor\", and \"BoxBorderColor\". </li> </ul> <ul> <li>void SetSharpenFonts ( bool value ):   Changes whether the font is sharpened when zoomed in. </li> </ul> <ul> <li>void SetVisible ( bool value ):   Toggles visibility of all Texts. </li> </ul> <ul> <li>void SetTextBox ( bool value ):   Toggles visibility of the box behind a text. </li> </ul> <ul> <li>void SetBoxShape ( int shape ):   Changes the shape of the text box. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>void OnBorderWidthChanged ( float value ):   Changes the width of the text box border. </li> </ul> <ul> <li>void UpdateText ( Text text ):   Updates the Text in focus to settings set in the UI controls and thus the properties. </li> </ul> <ul> <li>void Delete ( ):   Deletes the Text in focus. </li> </ul>"},{"location":"reference/Texts/","title":"Texts","text":"<p>Extends: Node2D</p>"},{"location":"reference/Texts/#description","title":"Description","text":"<p>The parent class holding all Text of a Level.</p>"},{"location":"reference/Texts/#properties","title":"Properties","text":"<p> Level Level </p>"},{"location":"reference/Texts/#methods","title":"Methods","text":"<p> Dictionary[] Save ( ) void Load ( Dictionary[] data ) Text CreateText ( ) Text LoadText ( Dictionary data ) void Resize ( int x, int y, int w, int h ) </p>"},{"location":"reference/Texts/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul>"},{"location":"reference/Texts/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary[] Save ( ):   Save all Text in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved Text data. Used by a saved map file to load existing Texts. </li> </ul> <ul> <li>Text CreateText ( ):   Creates a Text and adds it as a child. </li> </ul> <ul> <li>Text LoadText ( Dictionary data ):   Load a single Text into this level. Called by Load() as it loads all the Texts. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul>"},{"location":"reference/Tool/","title":"Tool","text":"<p>Extends: Object</p>"},{"location":"reference/Tool/#description","title":"Description","text":"<p>This is an abstract class that all Dungeondraft tools are based off of. You can call or get any properties or functions from this class on all tools.</p>"},{"location":"reference/Tool/#properties","title":"Properties","text":"<p> Dictionary Controls Range SizeControl Button[] SizeButtons </p>"},{"location":"reference/Tool/#methods","title":"Methods","text":"<p> void Enable ( ) void Disable ( ) void RegisterSizeButtons ( Button[] buttons, int default ) </p>"},{"location":"reference/Tool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Dictionary Controls:   Returns a Dictionary of UI Controls with the control's registered IDs as the keys. </li> </ul> <ul> <li>Range SizeControl:   A Range control, typically a slider that determines the size of the brush. </li> </ul> <ul> <li>Button[] SizeButtons:   The Buttons assigned to this Tool to modify tool brush sizes. </li> </ul>"},{"location":"reference/Tool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Enable ( ):   Enables the tool to perform tasks. This is also called internally when a tool is selected in the toolbar. The tool will not work without being first enabled. </li> </ul> <ul> <li>void Disable ( ):   Disables the tool. Must be called when you are done with a tool to clean up. </li> </ul> <ul> <li>void RegisterSizeButtons ( Button[] buttons, int default ):   Call from the ToolPanel to let this Tool know if there are size buttons for something like a brush. </li> </ul>"},{"location":"reference/ToolPanel/","title":"ToolPanel","text":"<p>Extends: ScrollContainer</p>"},{"location":"reference/ToolPanel/#description","title":"Description","text":"<p>ToolPanel is the class representing the UI controls on the left side of the Dungeondraft interface. Every single tool in Dungeondraft, including new ones you create through Global.Editor.CreateModTool() is associated with a ToolPanel. This is the primary way a tool displays options available to a cartographer. The main concern for the modder should be creating new UI controls and associating any options or functionality to them. Whenever you see the property variable in a UI creation method, it automatically modifies that property in the associated Tool.</p> <p>To see how to use a ToolPanel instance, check out this example script: Example UI Script</p>"},{"location":"reference/ToolPanel/#properties","title":"Properties","text":"<p> VBoxContainer Align Tool Tool bool UsesObjectLibrary bool UsesPathLibrary bool UsesModRightsidePanel bool IsRightsidePanel </p>"},{"location":"reference/ToolPanel/#methods","title":"Methods","text":"<p> VBoxContainer BeginSection ( bool stretch = true ) VBoxContainer BeginNamedSection ( String name, bool stretch = true ) void EndSection ( ) Button CreateButton ( String label, String icon ) Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ) void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ) void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ) CheckButton CreateCheckButton ( String label, String property, bool default ) void CreateLabel ( String label ) void CreateSeparator ( ) void CreateNote ( String text ) CheckBox[] CreateRadioMenu ( String property, String[] options ) OptionButton CreateDropdownMenu ( String property, String[] options, String default ) OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ) OptionButton CreateLayerMenu ( ) void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ) HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ) RangeSlider CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ) void CreateFileSelector ( String property, String filter, String directory ) ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ) ColorPalette CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ) void CreateTextureListMenu ( String property, String[] textures, String[] labels ) GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ) GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ) void CreateTilesetMenu ( String property ) void CreateTerrainListMenu ( String property ) void CreateExpandSlotsButton ( ) TagsPanel CreateTagsPanel ( ) void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ) ToolPanel CreateRightsidePanel ( String title ) void ForwardMethod ( String method ) void ForwardProperty ( value, String property ) void ForwardProperty_Enum ( String value, String property ) </p>"},{"location":"reference/ToolPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>VBoxContainer Align:   This is the control that every UI control is attached to unless inside a section. </li> </ul> <ul> <li>Tool Tool:   The Tool associated with this ToolPanel. </li> </ul> <ul> <li>bool UsesObjectLibrary:   Opens the Object Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesPathLibrary:   Opens the Path Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesModRightsidePanel:   Opens the Custom Mod Rightside Panel on the right side when this tool is active. DO NOT MANUALLY SET. </li> </ul> <ul> <li>bool IsRightsidePanel:   Tells Dungeondraft this panel is the mod rightside panel. DO NOT MANUALLY SET. </li> </ul>"},{"location":"reference/ToolPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>VBoxContainer BeginSection ( bool stretch = true ):   Encloses all UI controls created afterwards inside a section. Must be closed with EndSection(). The parameter stretch causes the section to extend all the way to the bottom of the panel. </li> </ul> <ul> <li>VBoxContainer BeginNamedSection ( String name, bool stretch = true ):   Create a UI control section that can be referenced through Tool.Controls[name]. </li> </ul> <ul> <li>void EndSection ( ):   Ends the section and all UI controls created afterwards will not be included in the previous section. </li> </ul> <ul> <li>Button CreateButton ( String label, String icon ):   Creates and returns a Godot Button with label as display text and icon_path as the path to the icon displayed. </li> </ul> <ul> <li>Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ):   Creates and returns a toggle style Godot Button. </li> </ul> <ul> <li>void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ):   Creates a radio style Godot Button and pass in a ButtonGroup to allow a radio toggle. </li> </ul> <ul> <li>void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ):   Creates a set of radio toggle but looks like tabbed buttons. </li> </ul> <ul> <li>CheckButton CreateCheckButton ( String label, String property, bool default ):   Creates and returns a Godot CheckButton. </li> </ul> <ul> <li>void CreateLabel ( String label ):   Creates a label. </li> </ul> <ul> <li>void CreateSeparator ( ):   Creates a horizontal separator. </li> </ul> <ul> <li>void CreateNote ( String text ):   Creates a framed label for a dev note. </li> </ul> <ul> <li>CheckBox[] CreateRadioMenu ( String property, String[] options ):   Creates a radio menu and returns the array of all the CheckBox. </li> </ul> <ul> <li>OptionButton CreateDropdownMenu ( String property, String[] options, String default ):   Creates and returns a Godot OptionButton (which is a dropdown menu) and autofill the menu with options. </li> </ul> <ul> <li>OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ):   Creates a labelled dropdown menu. The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateLayerMenu ( ):   Creates and returns the dropdown menu representing the layer system for Objects, Paths, and Materials for Dungeondraft. There should only ever be a single instance of this UI control per tool if needed. To inspect the current selected layer, check the variable Global.Editor.Tools[\"mod_tool_id\"].ActiveLayer which returns the int of the layer value. </li> </ul> <ul> <li>void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ):   Create a horizontal set of icon menu buttons like those used to select brush shapes. </li> </ul> <ul> <li>HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ):   Creates and returns a Godot HSlider. The exponential parameter is an option that makes the slider use an exponential scale. </li> </ul> <ul> <li>RangeSlider CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ):   Creates and returns a Dungeondraft unique UI control RangeSlider. This control allows the user to pick a range of values instead of a single value. </li> </ul> <ul> <li>void CreateFileSelector ( String property, String filter, String directory ):   Creates a special UI control dedicated to selecting a file. The file_filter parameter is the file extension filter that is unique to each operating system. A modder needs to account for Windows, OSX, and Linux in the filter. The directory is the path to the default starting location for the file dialog that opens. </li> </ul> <ul> <li>ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ):   Create a simple color selection control without a color palette. The presets Array are of type String. </li> </ul> <ul> <li>ColorPalette CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ):   Creates and returns a Dungeondraft UI control called a ColorPalette and fills it through the presets array. The Strings should be in hex color code format. The presets Array are of type String. </li> </ul> <ul> <li>void CreateTextureListMenu ( String property, String[] textures, String[] labels ):   Create a texture selection menu in list format. No longer used/deprecated. The Arrays are of type String. </li> </ul> <ul> <li>GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu in wide format filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>void CreateTilesetMenu ( String property ):   Generate the menu that displays the floor tile options. </li> </ul> <ul> <li>void CreateTerrainListMenu ( String property ):   Generate the menu to select Terrain options. Passes the index of the selected option to property. </li> </ul> <ul> <li>void CreateExpandSlotsButton ( ):   Generate the CheckButton used to expand the Terrain slots. </li> </ul> <ul> <li>TagsPanel CreateTagsPanel ( ):   Generate the TagsPanel and adds it to the UI. </li> </ul> <ul> <li>void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ):   Update a toggle button's icons and labels. </li> </ul> <ul> <li>ToolPanel CreateRightsidePanel ( String title ):   Creates and returns a Dungeondraft right-side panel that behaves like the left-side tool panel and allows you to add more UI controls for your mod. Must be called from a ToolPanel you created for your mod tool, as it is registered to the tool. It will automatically open and close when your tool is selected. Only one is supported per tool. See Example UI Script for a usage example. </li> </ul> <ul> <li>void ForwardMethod ( String method ):   Helper function to forward a method invocation to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty ( value, String property ):   Helper function to forward a property change to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty_Enum ( String value, String property ):   Helper function to forward an enum change to the Tool. Not typically called manually. </li> </ul>"},{"location":"reference/Toolbar/","title":"Toolbar","text":"<p>Extends: VBoxContainer</p>"},{"location":"reference/Toolbar/#description","title":"Description","text":"<p>This is wrapper class to the category bar of a set of tools on the left side of the UI.</p>"},{"location":"reference/Toolbar/#properties","title":"Properties","text":"<p> String Title String ForceTool Label title Button backButton Dictionary panels </p>"},{"location":"reference/Toolbar/#methods","title":"Methods","text":"<p> void OnSelectTool ( String name, String label ) void OnDeselectTool ( String name ) ToolPanel CreateTool ( String name, String label, String icon, bool mod = false ) </p>"},{"location":"reference/Toolbar/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>String Title:   Gets the title displayed. Read only. Change title Label instead if you want to modify that text. </li> </ul> <ul> <li>String ForceTool:   The name of the Tool that would be enabled if this specific toolbar was displayed. </li> </ul> <ul> <li>Label title:   Gets the UI element that displays the title. </li> </ul> <ul> <li>Button backButton:   Gets the back button. </li> </ul> <ul> <li>Dictionary panels:   Lookup table of String key - ToolPanel value pairs to look up a tool's associated ToolPanel. </li> </ul>"},{"location":"reference/Toolbar/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void OnSelectTool ( String name, String label ):   Called when a tool is enabled so the toolbar would switch to the proper ToolPanel and update the title. </li> </ul> <ul> <li>void OnDeselectTool ( String name ):   Called when a tool is disabled so the toolbar would hide its ToolPanel. </li> </ul> <ul> <li>ToolPanel CreateTool ( String name, String label, String icon, bool mod = false ):   Creates a new tool to be added to the tool bar and return a new tool panel to modify. The real reason you came to this page. </li> </ul>"},{"location":"reference/Toolset/","title":"Toolset","text":"<p>Extends: VBoxContainer</p>"},{"location":"reference/Toolset/#description","title":"Description","text":"<p>This is vertical bar on the left side of UI that holds all the tool buttons and panels.</p> <p>Accessed by 'Global.Editor.Toolset'.</p>"},{"location":"reference/Toolset/#properties","title":"Properties","text":"<p> bool IsShrunk String PreviousTool Dictionary Toolbars Dictionary ToolPanels float transitionDurationMS float buttonFullSize float buttonShrunkSize </p>"},{"location":"reference/Toolset/#methods","title":"Methods","text":"<p> void Shrink ( ) void Expand ( ) Toolbar CreateToolbar ( String title, String icon ) void Enable ( bool value ) void Init ( ) ToolPanel CreateModTool ( Reference scriptInstance, String category, String id, String label, String icon ) ToolPanel GetToolPanel ( String tool ) void Quickswitch ( String tool ) void SwitchToPreviousTool ( ) </p>"},{"location":"reference/Toolset/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool IsShrunk:   Gets if the toolset is shrunken. </li> </ul> <ul> <li>String PreviousTool:   The name of the previous tool used. </li> </ul> <ul> <li>Dictionary Toolbars:   Lookup table for toolbars by its tool name. Dictionary of String key - Toolbar value. </li> </ul> <ul> <li>Dictionary ToolPanels:   Lookup table for tool panels by its tool name. Dictionary of String key - ToolPanel value. </li> </ul> <ul> <li>float transitionDurationMS:   Get the duration of the transition effect between category selections. </li> </ul> <ul> <li>float buttonFullSize:   Get the full dimension size of a toolset button. </li> </ul> <ul> <li>float buttonShrunkSize:   Get the shrunken dimension size of a toolset button. </li> </ul>"},{"location":"reference/Toolset/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Shrink ( ):   Shrink the toolset. </li> </ul> <ul> <li>void Expand ( ):   Expand the toolset. </li> </ul> <ul> <li>Toolbar CreateToolbar ( String title, String icon ):   Create a new category of tools in its own toolbar. </li> </ul> <ul> <li>void Enable ( bool value ):   Enable the toolbar. </li> </ul> <ul> <li>void Init ( ):   Initialize the toolset. Called once on launch. </li> </ul> <ul> <li>ToolPanel CreateModTool ( Reference scriptInstance, String category, String id, String label, String icon ):   Create a new mod tool by passing it the mod script and the relevant data. Returns a newly created ToolPanel. Calls Toolbar.CreateTool(). </li> </ul> <ul> <li>ToolPanel GetToolPanel ( String tool ):   Gets a ToolPanel by its tool name. </li> </ul> <ul> <li>void Quickswitch ( String tool ):   Instant change to a new tool. </li> </ul> <ul> <li>void SwitchToPreviousTool ( ):   Swap to the last used tool. </li> </ul>"},{"location":"reference/TraceImage/","title":"TraceImage","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/TraceImage/#description","title":"Description","text":"<p>The tool used to edit the trace image.</p> <p>Accessed by <code>Global.Editor.Tools[\"TraceImage\"]</code>.</p>"},{"location":"reference/TraceImage/#properties","title":"Properties","text":"<p> Range Scale Range Opacity bool isDragging </p>"},{"location":"reference/TraceImage/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void OnFileSelected ( String property, String path ) void OnFileCleared ( String property ) void SetScale ( float value ) void SetOpacity ( float value ) void Center ( ) </p>"},{"location":"reference/TraceImage/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range Scale:   Gets the Range representing the Trace Image scale. Call SetScale() to set instead. </li> </ul> <ul> <li>Range Opacity:   Gets the Range representing the Trace Image opacity. Call SetOpacity() to set instead. </li> </ul> <ul> <li>bool isDragging:   Gets if the user is dragging. DO NOT MODIFY. </li> </ul>"},{"location":"reference/TraceImage/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Trace Image into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Trace Image data. Used by a saved map file to load. </li> </ul> <ul> <li>void OnFileSelected ( String property, String path ):   Called when a file a selected. Call be called set a new image file. Param property is not used. </li> </ul> <ul> <li>void OnFileCleared ( String property ):   Called when a file is cleared. Call be called manually. Param property is not used. </li> </ul> <ul> <li>void SetScale ( float value ):   Sets the Trace Image scale. </li> </ul> <ul> <li>void SetOpacity ( float value ):   Sets the Trace Image opacity. </li> </ul> <ul> <li>void Center ( ):   Centers the image on the canvas. </li> </ul>"},{"location":"reference/UISegment/","title":"UISegment","text":"<p>Extends: Object</p>"},{"location":"reference/UISegment/#description","title":"Description","text":"<p>WorldUI helper class used to render the segment for editing walls, paths, etc.</p>"},{"location":"reference/UISegment/#properties","title":"Properties","text":"<p> Vector2 From Vector2 To bool Visible float Width </p>"},{"location":"reference/UISegment/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Vector2 From:   Gets or sets the start position. </li> </ul> <ul> <li>Vector2 To:   Gets or sets the end position. </li> </ul> <ul> <li>bool Visible:   Gets or sets if segment is visible. </li> </ul> <ul> <li>float Width:   Gets or sets the width of the segment. </li> </ul>"},{"location":"reference/UITexture/","title":"UITexture","text":"<p>Extends: Object</p>"},{"location":"reference/UITexture/#description","title":"Description","text":"<p>WorldUI helper class used to render the Portal previews.</p>"},{"location":"reference/UITexture/#properties","title":"Properties","text":"<p> Texture Texture Vector2 Position Transform2D Transform bool Visible </p>"},{"location":"reference/UITexture/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture Texture:   Gets or sets the width of the segment. </li> </ul> <ul> <li>Vector2 Position:   Gets or sets the end position. </li> </ul> <ul> <li>Transform2D Transform:   Gets or sets the end position. </li> </ul> <ul> <li>bool Visible:   Gets or sets the end position. </li> </ul>"},{"location":"reference/Wall/","title":"Wall","text":"<p>Extends: Node2D</p>"},{"location":"reference/Wall/#description","title":"Description","text":"<p>A Wall is a Dungeondraft asset instance of what the user sees as a wall from the WallTool. See Asset Instance.</p>"},{"location":"reference/Wall/#properties","title":"Properties","text":"<p> Rect2 GlobalRect Vector2[] Points Texture Texture Texture EndTexture Color Color int Type int Joint bool NormalizeUV bool Loop bool HasShadow Line2D[] lines LightOccluder2D[] occluders Node2D shadows Level Level Portal[] Portals </p>"},{"location":"reference/Wall/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void RemakeLinesWhenAllPortalsReady ( ) void Clear ( ) void Set ( Vector2[] points, Texture texture, Color color, bool loop = true, bool shadow = true, int type = 0, int joint = 1, bool normalizeUV = true ) void Offset ( Vector2 offset ) void UpdateTexture ( Texture texture ) void SetColor ( Color color ) Portal AddPortal ( Texture texture, bool closed, Vector2 position, Vector2 direction, int pointIndex, float radius, bool flip ) void InsertPortal ( Portal portal, bool remakeLines ) void RemovePortal ( Portal portal ) void InsertPoint ( int index, Vector2 point ) void DeletePoint ( int index ) void ModifyPoint ( int index, Vector2 point ) void RemakeLines ( ) bool IsMouseWithin ( ) </p>"},{"location":"reference/Wall/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Rect2 GlobalRect:   The global Rect2 enclosing the Roof. DO NOT MODIFY. </li> </ul> <ul> <li>Vector2[] Points:   Gets the wall points. </li> </ul> <ul> <li>Texture Texture:   Gets the wall end texture. Do not modify. Use UpdateTexture() to modify. </li> </ul> <ul> <li>Texture EndTexture:   Gets the wall end texture. Do not modify. </li> </ul> <ul> <li>Color Color:   Gets the wall joint type. Use Set() to modify. Use SetColor() to modify. </li> </ul> <ul> <li>int Type:   Gets the wall type. Use Set() to modify. 0 = Auto, 1 = Manual, 2 = Cave. Determines usage. </li> </ul> <ul> <li>int Joint:   Gets the wall joint type. Use Set() to modify. 0 = Sharp, 1 = Bevel, and 2 = Round. </li> </ul> <ul> <li>bool NormalizeUV:   Gets or sets if this wall uses normalized UV for the texture. Use Set() to modify. </li> </ul> <ul> <li>bool Loop:   Gets or sets if this wall loops. Use Set() to modify. </li> </ul> <ul> <li>bool HasShadow:   Gets or sets if this wall has shadows. </li> </ul> <ul> <li>Line2D[] lines:   Array of Line2D that visually displays the Wall. </li> </ul> <ul> <li>LightOccluder2D[] occluders:   Reference to the light blockers associated with this wall. Cannot add directly. </li> </ul> <ul> <li>Node2D shadows:   Reference to the shadows associated with this Wall. </li> </ul> <ul> <li>Level Level:   Reference to the Level in which this Wall is placed. </li> </ul> <ul> <li>Portal[] Portals:   Return an Array of all the Portals. Cannot add directly. </li> </ul>"},{"location":"reference/Wall/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Wall into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Wall data. Used by a saved map file to load existing walls. </li> </ul> <ul> <li>void RemakeLinesWhenAllPortalsReady ( ):   Called by Dungeondraft to remake walls when Portals are modified. </li> </ul> <ul> <li>void Clear ( ):   Deletes all information inside the wall. Only use preceding a full deletion of the Wall </li> </ul> <ul> <li>void Set ( Vector2[] points, Texture texture, Color color, bool loop = true, bool shadow = true, int type = 0, int joint = 1, bool normalizeUV = true ):   Initialize and set options for the wall. Type is the type of wall. Valid options are: 0 = Auto, 1 = Manual, 2 = Cave. Auto is from Floor Shape Tool, Manual is from Wall Tool, and 2 is from Cave Tool. Joint parameter valid options are: 0 = Sharp, 1 = Bevel, and 2 = Round. </li> </ul> <ul> <li>void Offset ( Vector2 offset ):   Move all the points and portals of this wall by the offset. Recreates visuals. </li> </ul> <ul> <li>void UpdateTexture ( Texture texture ):   Change the wall texture. </li> </ul> <ul> <li>void SetColor ( Color color ):   Change the wall color. </li> </ul> <ul> <li>Portal AddPortal ( Texture texture, bool closed, Vector2 position, Vector2 direction, int pointIndex, float radius, bool flip ):   Creates a new Portal along the wall. Position is in local space to the Wall. PointIndex is the index of the wall's point just before the Portal placement. </li> </ul> <ul> <li>void InsertPortal ( Portal portal, bool remakeLines ):   Insert a Portal onto this Wall manually. Proceed with caution. </li> </ul> <ul> <li>void RemovePortal ( Portal portal ):   Delete a Portal from this wall. </li> </ul> <ul> <li>void InsertPoint ( int index, Vector2 point ):   Add a point onto the wall. Index is the point preceding the segment where you want to add a point. </li> </ul> <ul> <li>void DeletePoint ( int index ):   Delete a point from this wall. </li> </ul> <ul> <li>void ModifyPoint ( int index, Vector2 point ):   Change the position of a point along this wall. </li> </ul> <ul> <li>void RemakeLines ( ):   Call to refresh visuals after a change if not done automatically by Dungeondraft. </li> </ul> <ul> <li>bool IsMouseWithin ( ):   Checks if the mouse cursor is over the wall. Only used by the SelectTool. </li> </ul>"},{"location":"reference/WallTool/","title":"WallTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/WallTool/#description","title":"Description","text":"<p>The tool used to edit walls.</p> <p>Accessed by <code>Global.Editor.Tools[\"WallTool\"]</code>.</p>"},{"location":"reference/WallTool/#properties","title":"Properties","text":"<p> int Sorting Texture Texture Color Color bool Shadow bool Bevel bool isDrawing </p>"},{"location":"reference/WallTool/#methods","title":"Methods","text":"<p> void Confirm ( ) void EndWall ( bool loop ) void SetShadow ( bool value ) Color GetWallColor ( Texture texture = null ) void SetWallColor ( Color color ) </p>"},{"location":"reference/WallTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Sorting:   Where the next wall will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. </li> </ul> <ul> <li>Texture Texture:   Gets or sets the next wall's texture. </li> </ul> <ul> <li>Color Color:   Gets or sets the next wall's multiplied color. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the wall has a shadow below it. </li> </ul> <ul> <li>bool Bevel:   Gets and sets whether the next wall should have beveled corners. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul>"},{"location":"reference/WallTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Confirm ( ):   Takes the polyline from WorldUI and turns it into a Wall and adds it into the Walls children. Automagically determines if it needs to loop or add new points. Calls EndWall(). </li> </ul> <ul> <li>void EndWall ( bool loop ):   Takes the polyline from WorldUI and turns it into a Wall and adds it into the Walls children. Better to call Confirm() rather than this directly. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option of all walls. </li> </ul> <ul> <li>Color GetWallColor ( Texture texture = null ):   Get the current selected wall style's color if applicable. </li> </ul> <ul> <li>void SetWallColor ( Color color ):   Set the current selected wall style's color if applicable. </li> </ul>"},{"location":"reference/Walls/","title":"Walls","text":"<p>Extends: Node2D</p>"},{"location":"reference/Walls/#description","title":"Description","text":"<p>The parent class holding all Wall of a Level.</p>"},{"location":"reference/Walls/#properties","title":"Properties","text":"<p> Level Level Dictionary CloningRemap </p>"},{"location":"reference/Walls/#methods","title":"Methods","text":"<p> Dictionary[] Save ( ) void Load ( Dictionary[] data ) void Resize ( int x, int y, int w, int h ) Wall AddWall ( Vector2[] points, Texture texture, Color color, bool loop = true, bool shadow = true, int type = 0, int joint = 1, bool normalizeUV = true ) bool TryMerge ( Vector2[] points, Texture texture ) void MoveToBack ( Wall wall ) void LoadWall ( Dictionary data ) </p>"},{"location":"reference/Walls/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   The Level in which this class instance resides. </li> </ul> <ul> <li>Dictionary CloningRemap:   A lookup table of int key - int value pairs for mapping the old wall id to new unique ones when a Level is cloned. </li> </ul>"},{"location":"reference/Walls/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary[] Save ( ):   Save all walls in this level as a list into the save file format and return it as an Array. </li> </ul> <ul> <li>void Load ( Dictionary[] data ):   Load a list of saved wall data. Used by a saved map file to load existing walls. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>Wall AddWall ( Vector2[] points, Texture texture, Color color, bool loop = true, bool shadow = true, int type = 0, int joint = 1, bool normalizeUV = true ):   Create a new Wall and add to self as a child. The parameter type determines the wall type. Valid options are: 0 = Auto, 1 = Manual, 2 = Cave. The parameter joint determines the joint type. Valid options are: 0 = Sharp, 1 = Bevel, 2 = Round. The parameter normalize UV will make the software recalculate a wall's UV so that it is more uniform. </li> </ul> <ul> <li>bool TryMerge ( Vector2[] points, Texture texture ):   Try to merge a set of points as part of an existing wall instead of creating a new Wall. Returns true if it succeeds in doing so. </li> </ul> <ul> <li>void MoveToBack ( Wall wall ):   Move a Wall to the front of the children list in the SceneTree so that it is rendered last. (Back as in background). </li> </ul> <ul> <li>void LoadWall ( Dictionary data ):   Load a single Wall into this level. Called by Load() as it loads all the walls. </li> </ul>"},{"location":"reference/WaterBrush/","title":"WaterBrush","text":"<p>Extends: ShapeTool &lt; Tool &lt; Object</p>"},{"location":"reference/WaterBrush/#description","title":"Description","text":"<p>The tool used to edit water. Use World.Level.WaterMesh if you want to directly edit the water.</p> <p>Accessed by <code>Global.Editor.Tools[\"WaterBrush\"]</code>.</p>"},{"location":"reference/WaterBrush/#properties","title":"Properties","text":"<p> WaterMesh Mesh int Size Range BlendDistance bool DisableBorder bool IsUsingShapes </p>"},{"location":"reference/WaterBrush/#methods","title":"Methods","text":"<p> void UpdateBrushRadius ( ) void UpdateCursor ( ) void ChangeColor ( Color color, String name ) void ChangeDeepColor ( Color color ) void ChangeShallowColor ( Color color ) void ChangeBlendDistance ( float value ) void SetDisableBorder ( bool value ) </p>"},{"location":"reference/WaterBrush/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>WaterMesh Mesh:   The water instance itself. </li> </ul> <ul> <li>int Size:   Get or set the size of the brush [0 - 4]. </li> </ul> <ul> <li>Range BlendDistance:   Modify the Range to change the blend distance between shallow and deep water color. Call ChangeBlendDistance() instead to set. </li> </ul> <ul> <li>bool DisableBorder:   Toggle the border visibility. Call SetDisableBorder() to set. </li> </ul> <ul> <li>bool IsUsingShapes:   Gets or sets if the brush is using a brush or a shape mode. Setting the parent Mode property will always enable this. </li> </ul>"},{"location":"reference/WaterBrush/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void UpdateBrushRadius ( ):   Update the cursor to reflect size change. </li> </ul> <ul> <li>void UpdateCursor ( ):   Update the cursor to reflect size and mode changes. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Changes the water colors. Valid entries for names are: \"DeepColor\" and \"ShallowColor\". </li> </ul> <ul> <li>void ChangeDeepColor ( Color color ):   Changes the deep water color. </li> </ul> <ul> <li>void ChangeShallowColor ( Color color ):   Changes the shallow water color. </li> </ul> <ul> <li>void ChangeBlendDistance ( float value ):   Changes the blend distance water. </li> </ul> <ul> <li>void SetDisableBorder ( bool value ):   Toggles the water border. </li> </ul>"},{"location":"reference/WaterMesh/","title":"WaterMesh","text":"<p>Extends: MeshInstance2D</p>"},{"location":"reference/WaterMesh/#description","title":"Description","text":"<p>Water Mesh is the visual object that draws the water for Dungeondraft. There is one per level.</p>"},{"location":"reference/WaterMesh/#properties","title":"Properties","text":"<p> Level Level WaterPreMesh PreMesh Line2D[] Lines Color DeepColor Color ShallowColor float BlendDistance Texture BorderTexture Texture RippleTexture ArrayMesh arrayMesh ShaderMaterial material bool premeshInverted bool queueUpdateMesh bool disableBorder </p>"},{"location":"reference/WaterMesh/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void Resize ( int x, int y, int w, int h ) void CreateMesh ( ) void OnDrawingBegin ( bool inverted ) void OnDrawingEnd ( ) void Cancel ( ) void SetCircle ( Vector2 position, int size ) void DrawRect ( Rect2 rect, bool invertAction ) void DrawCircle ( Rect2 rect, int sides, bool invertAction ) void DrawPolygon ( Vector2[] points, bool invertAction ) void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ) void QueueUpdate ( ) void UpdateMesh ( bool restore = false ) void UpdateLines ( ) Line2D AddLine ( Vector2[] points, Texture texture ) void DisableBorder ( bool value ) </p>"},{"location":"reference/WaterMesh/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Level Level:   Gets the level where the water mesh belongs. </li> </ul> <ul> <li>WaterPreMesh PreMesh:   Special mesh that is used to brush the water with stylized edges. It is the yellow shape the user sees while painting before the water is added. </li> </ul> <ul> <li>Line2D[] Lines:   Gets the Line2D representing the border of the water. DO NOT MODIFY. </li> </ul> <ul> <li>Color DeepColor:   Gets or sets the deep water color. Call UpdateMesh() for it to visually update. </li> </ul> <ul> <li>Color ShallowColor:   Gets or sets the shallow water color. Call UpdateMesh() for it to visually update. </li> </ul> <ul> <li>float BlendDistance:   Gets or sets the water blend distance between shallow and deep. Call UpdateMesh() for it to visually update. </li> </ul> <ul> <li>Texture BorderTexture:   Gets or sets the border texture. Call UpdateMesh() for it to visually update. </li> </ul> <ul> <li>Texture RippleTexture:   Gets or sets the ripple texture. Call UpdateMesh() for it to visually update. </li> </ul> <ul> <li>ArrayMesh arrayMesh:   Gets the mesh primitive that renders the water. </li> </ul> <ul> <li>ShaderMaterial material:   Gets the material that shades the water. </li> </ul> <ul> <li>bool premeshInverted:   Used to inform that the user is trying to erase, so the PreMesh will be subtracted, rather than added to the current water. </li> </ul> <ul> <li>bool queueUpdateMesh:   Set by QueueUpdate() so that Dungeondraft knows to update the water when it is next possible. </li> </ul> <ul> <li>bool disableBorder:   Gets if the border is disabled. Do not set directly. Call SetDisableBorder() instead. </li> </ul>"},{"location":"reference/WaterMesh/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the water into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved water data. Used by a saved map file to load existing water. </li> </ul> <ul> <li>void Resize ( int x, int y, int w, int h ):   Called automatically when the canvas is resized. DO NOT CALL DIRECTLY. FOR REFERENCE ONLY. </li> </ul> <ul> <li>void CreateMesh ( ):   Called automatically on new map or load map to prepare a water mesh. No need to call manually. </li> </ul> <ul> <li>void OnDrawingBegin ( bool inverted ):   Prepares the premesh for drawing. </li> </ul> <ul> <li>void OnDrawingEnd ( ):   Finishes the premesh for drawing and queues an update. </li> </ul> <ul> <li>void Cancel ( ):   Cancels any edits currently in the PreMesh. </li> </ul> <ul> <li>void SetCircle ( Vector2 position, int size ):   Draws a circle at the position onto the PreMesh. </li> </ul> <ul> <li>void DrawRect ( Rect2 rect, bool invertAction ):   Draws a rectangle directly onto the Mesh, not the PreMesh. </li> </ul> <ul> <li>void DrawCircle ( Rect2 rect, int sides, bool invertAction ):   Draws a circle directly onto the Mesh, not the PreMesh. </li> </ul> <ul> <li>void DrawPolygon ( Vector2[] points, bool invertAction ):   Draws a polygon directly onto the Mesh, not the PreMesh. </li> </ul> <ul> <li>void AddPolygon ( Vector2[] points, Rect2 bounds, bool invertAction ):   The internal method DrawRect(), DrawCircle(), and DrawPolygon() all call to draw onto the water. Not advisable to call directly. </li> </ul> <ul> <li>void QueueUpdate ( ):   Queue an update to the water mesh. </li> </ul> <ul> <li>void UpdateMesh ( bool restore = false ):   Update the water mesh. Heavy CPU workload. </li> </ul> <ul> <li>void UpdateLines ( ):   Update the water border. </li> </ul> <ul> <li>Line2D AddLine ( Vector2[] points, Texture texture ):   Used internally to draw a border around the water. Any manual changes will be deleted by UpdateLines() in an update. </li> </ul> <ul> <li>void DisableBorder ( bool value ):   Toggles the border visibility. </li> </ul>"},{"location":"reference/WaterPreMesh/","title":"WaterPreMesh","text":"<p>Extends: MarchingSquaresMesh &lt; MeshInstance2D</p>"},{"location":"reference/WaterPreMesh/#description","title":"Description","text":"<p>The special tool-only mesh that is used for the WaterBrush to draw brush strokes onto the water mesh. It is mostly just a MarchingSquareMesh, without additional features.</p>"},{"location":"reference/World/","title":"World","text":"<p>Extends: Node2D</p>"},{"location":"reference/World/#description","title":"Description","text":"<p>The World is the class that holds all visible elements of a map.</p> <p>Accessed by <code>Global.World</code>.</p>"},{"location":"reference/World/#properties","title":"Properties","text":"<p> Polygon2D Bounds Polygon2D ExportFX String Title int Width int Height int GridSize int TileSize Vector2 Dimensions Vector2 WoxelDimensions Rect2 WorldRect Vector2 GridCellSize Level[] levels int CurrentLevelId Sprite TraceImage bool TraceImageVisible Dictionary NodeLookup int nextNodeID Dictionary LevelLookup int nextLevelID int nextPrefabID Dictionary EmbeddedTextures Texture BuildingWear bool WallShadow bool ObjectShadow int Format </p>"},{"location":"reference/World/#methods","title":"Methods","text":"<p> Dictionary Save ( ) void Load ( Dictionary data ) Dictionary SaveLevels ( ) void LoadLevels ( Dictionary data ) void AssignLevelID ( Level level ) Level GetLevelByID ( int id ) Level CreateLevel ( String label ) void DeleteLevel ( Level level ) void LoadLevel ( int index, Dictionary data ) Level CloneLevel ( Level level, String label ) Level TryGetLevel ( int index ) void SetNewLevelOrder ( Level[] newOrder ) String GetNextPrefabID ( ) int AssignNodeID ( Node node ) void AssignSpecificNodeID ( Node node, int id ) void RemoveNodeID ( int id ) void SetNodeID ( Node node, int id ) bool HasNodeID ( int id ) Node GetNodeByID ( int id ) bool DeleteNodeByID ( int id ) void LevelDown ( ) void LevelUp ( ) void SetLevel ( int level, bool loading = false ) Level GetCurrentLevel ( ) void HideAllLevels ( ) void SetSourceLevel ( int level ) void SetOverlayLevel ( int level, float opacity ) void Start ( ) void SetCompareLevels ( Level referenceLevel, float referenceOpacity, float currentOpacity, bool saveSetting ) void DisableCompareLevels ( ) void RestoreLevelsPostExport ( ) void UpdateLayerMenu ( OptionButton menu, int activeLayer ) void AddTraceImage ( String path, float scale, float opacity ) void RemoveTraceImage ( ) void CenterTraceImage ( ) void HandleTraceImageExportVisibility ( bool exporting ) Dictionary SaveEmbedded ( ) void LoadEmbedded ( Dictionary data ) void SetBuildingWear ( Texture texture ) </p>"},{"location":"reference/World/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Polygon2D Bounds:   A frame around the map to ensure no map contents draw from over the edge can be seen. </li> </ul> <ul> <li>Polygon2D ExportFX:   The pane that adds a post process filter for export like blurring or color grading. </li> </ul> <ul> <li>String Title:   Name of the map given by the user. READ ONLY. </li> </ul> <ul> <li>int Width:   Width in cells of the map. READ ONLY. </li> </ul> <ul> <li>int Height:   Height in cells of the map. READ ONLY. </li> </ul> <ul> <li>int GridSize:   Unit size in each grid cell of the map. READ ONLY. </li> </ul> <ul> <li>int TileSize:   Unit size in each floor tile of the map. READ ONLY. </li> </ul> <ul> <li>Vector2 Dimensions:   Size of the map in grid cells. READ ONLY. </li> </ul> <ul> <li>Vector2 WoxelDimensions:   Size of the map in units (pixels if exported at full resolution). READ ONLY. </li> </ul> <ul> <li>Rect2 WorldRect:   Rect of the map in world space. </li> </ul> <ul> <li>Vector2 GridCellSize:   Size of each grid cell in world space. </li> </ul> <ul> <li>Level[] levels:   Get all of the levels of this map. </li> </ul> <ul> <li>int CurrentLevelId:   Get the ID of the currently visible level of this map. READ ONLY. </li> </ul> <ul> <li>Sprite TraceImage:   The trace image that overlays the map to help draw. </li> </ul> <ul> <li>bool TraceImageVisible:   Gets or sets if the trace image is visible. </li> </ul> <ul> <li>Dictionary NodeLookup:   Get the table of int key - Node value pair to find an asset instance by its node id. </li> </ul> <ul> <li>int nextNodeID:   Gets the next node id available for assignment. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary LevelLookup:   Get the table of int key - Level value pair to find a level by its id. </li> </ul> <ul> <li>int nextLevelID:   Gets the next level id available. DO NOT MODIFY. </li> </ul> <ul> <li>int nextPrefabID:   Gets the next prefab id available. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary EmbeddedTextures:   Get the table of String key - Texture value pair to find embedded Prop textures. </li> </ul> <ul> <li>Texture BuildingWear:   Get the texture used to wear the building walls and floors. Set with SetBuildingWear(). </li> </ul> <ul> <li>bool WallShadow:   Toggle if the new walls created will have shadows. </li> </ul> <ul> <li>bool ObjectShadow:   Toggle if the new props created will have shadows. </li> </ul> <ul> <li>int Format:   Get the save format version. </li> </ul>"},{"location":"reference/World/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( ):   Save the world into the save file format and return it as a Dictionary. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved World data. Used by a saved map file to load an existing world. </li> </ul> <ul> <li>Dictionary SaveLevels ( ):   Save all levels into the save file format and return it as a Dictionary. Called by Save(). </li> </ul> <ul> <li>void LoadLevels ( Dictionary data ):   Load a saved data of all levels. Used by a saved map file to load an existing world. Called by Load(). </li> </ul> <ul> <li>void AssignLevelID ( Level level ):   Assign a new level an id. Called automatically on level creation. No need to manually call. </li> </ul> <ul> <li>Level GetLevelByID ( int id ):   Returns the Level object by providing its id. </li> </ul> <ul> <li>Level CreateLevel ( String label ):   Create a new Level with the name label. </li> </ul> <ul> <li>void DeleteLevel ( Level level ):   Delete a Level from existence. </li> </ul> <ul> <li>void LoadLevel ( int index, Dictionary data ):   Load a level data into a specific index. Used by LoadLevels(). </li> </ul> <ul> <li>Level CloneLevel ( Level level, String label ):   Clones an existing level and returns the clone as the new one. </li> </ul> <ul> <li>Level TryGetLevel ( int index ):   Get a level safely. Will not crash if an invalid index is provided. Just returns null. </li> </ul> <ul> <li>void SetNewLevelOrder ( Level[] newOrder ):   Set a new level order by providing it with an array of levels in order and update UI elements to reflect it. </li> </ul> <ul> <li>String GetNextPrefabID ( ):   Generate a new prefab id and increment the next available id. </li> </ul> <ul> <li>int AssignNodeID ( Node node ):   Assign the input Asset Instance a node id and increment the next available id. </li> </ul> <ul> <li>void AssignSpecificNodeID ( Node node, int id ):   Assign the input Asset Instance a node id an exact id. Id cannot already exist. </li> </ul> <ul> <li>void RemoveNodeID ( int id ):   Delete a node ID from the registry. Called whenever an Asset Instance was deleted. </li> </ul> <ul> <li>void SetNodeID ( Node node, int id ):   Register the node id. Called by AssignNodeID() and AssignSpecificNodeID(). </li> </ul> <ul> <li>bool HasNodeID ( int id ):   Checks if a node id exists/has already been used. </li> </ul> <ul> <li>Node GetNodeByID ( int id ):   Returns the Asset Instance by providing its id. </li> </ul> <ul> <li>bool DeleteNodeByID ( int id ):   Deletes an Asset Instance by providing its id. Returns true if succesful. </li> </ul> <ul> <li>void LevelDown ( ):   Go down a level. </li> </ul> <ul> <li>void LevelUp ( ):   Go up a level. </li> </ul> <ul> <li>void SetLevel ( int level, bool loading = false ):   Change the active level. The parameter loading is set when the level change is from a map load. </li> </ul> <ul> <li>Level GetCurrentLevel ( ):   Get the level currently visible and editable to the user. </li> </ul> <ul> <li>void HideAllLevels ( ):   Make all levels invisible. </li> </ul> <ul> <li>void SetSourceLevel ( int level ):   Set a source level for export. Mostly used by the Exporter. </li> </ul> <ul> <li>void SetOverlayLevel ( int level, float opacity ):   Set an overlay level for export. Mostly used by the Exporter. </li> </ul> <ul> <li>void Start ( ):   Called at the start of the map creation to initialize the GridMesh, Bounds, and ExportFX. </li> </ul> <ul> <li>void SetCompareLevels ( Level referenceLevel, float referenceOpacity, float currentOpacity, bool saveSetting ):   Set up having two levels disable on top of each other for referencing, like when drawing multiple floors. Set saveSetting to true if called manually. </li> </ul> <ul> <li>void DisableCompareLevels ( ):   Disable an existing level comparison. </li> </ul> <ul> <li>void RestoreLevelsPostExport ( ):   Called by the Exporter to restore any temporary changes made by the Exporter to generate the final image. </li> </ul> <ul> <li>void UpdateLayerMenu ( OptionButton menu, int activeLayer ):   Called automatically whenever the active layer changes to update layer UI menus. </li> </ul> <ul> <li>void AddTraceImage ( String path, float scale, float opacity ):   Load a new trace image from a file path. </li> </ul> <ul> <li>void RemoveTraceImage ( ):   Delete the trace image. </li> </ul> <ul> <li>void CenterTraceImage ( ):   Centers the trace image to the canvas. </li> </ul> <ul> <li>void HandleTraceImageExportVisibility ( bool exporting ):   Called by the Exporter to hide the trace image during exports. </li> </ul> <ul> <li>Dictionary SaveEmbedded ( ):   Saves any embedded images in save data format and return as a Dictionary. Used by Save(). </li> </ul> <ul> <li>void LoadEmbedded ( Dictionary data ):   Loads any embedded images from a save format. Used by Load(). </li> </ul> <ul> <li>void SetBuildingWear ( Texture texture ):   Change the building wear texture. </li> </ul>"},{"location":"reference/WorldUI/","title":"WorldUI","text":"<p>Extends: Node2D</p>"},{"location":"reference/WorldUI/#description","title":"Description","text":"<p>WorldUI is a singleton for Dungeondraft to display many of the UI elements for drawing like the cursor, line segments, and object previews.</p> <p>Accessed by <code>Global.WorldUI</code>.</p>"},{"location":"reference/WorldUI/#properties","title":"Properties","text":"<p> Color cursorPrimaryColor Color cursorSecondaryColor Color cursorTertiaryColor Color cursorQuaternaryColor Color selectionBoxColor Color selectionHighlightColor Color selectionSelectColor StyleBox transformStyleBox StyleBox transformCornerStyleBox Vector2 CellSize Vector2 MousePosition bool IsMouseMoving bool IsInsideBounds Vector2 CursorTilePosition Vector2 CursorHalfTilePosition Vector2 SnappedPosition Vector2 HalfSnappedPosition bool UseHalfSnap bool IsSelectionEllipse Vector2[] Vertices bool VerticesLoop ArcVector2[] Polyline bool IsDrawingPolyline bool IsMeasuring Vector2 RulerStart Vector2 RulerEnd bool CanPolylineLoop bool EditArcPoint int IndicateEditArcPoint int ArcSegments UISegment Segment UITexture Texture Color CursorColor float CursorRadius int CursorMode bool IsActionInverted bool IsCursorPositionFirstPoint bool IsCursorPositionLastPoint bool ArePolyEndPointsTouching </p>"},{"location":"reference/WorldUI/#methods","title":"Methods","text":"<p> void MarkPolyPoint ( ) void UpdateLastArcPoint ( ) void UndoPolyPoint ( ) void AddPolyPoint ( Vector2 position ) void ClearPolyline ( ) Vector2[] GetArcPolyline ( ) void DrawVertex ( Vector2 position, float radius, Color color ) void DrawCursorCircle ( Vector2 position, float radius, int sides, Color color ) void DrawEllipse ( Rect2 bounds, int sides, Color color ) void DrawLineEx ( Vector2[] line, Color color ) Vector2 GetSnappedPosition ( Vector2 position ) void SetSelectionBox ( Rect2 box ) Rect2 GetSelectionBox ( ) void ClearSelectionBox ( ) void SetVertex ( Vector2 vertex ) Vector2 GetVertex ( ) void ClearVertex ( ) void SetGuidePosition ( Vector2 position ) Vector2 GetGuidePosition ( ) void ClearGuidePosition ( ) </p>"},{"location":"reference/WorldUI/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color cursorPrimaryColor:   Get or set the primary cursor color. </li> </ul> <ul> <li>Color cursorSecondaryColor:   Get or set the secondary cursor color. </li> </ul> <ul> <li>Color cursorTertiaryColor:   Get or set the tertiary cursor color. </li> </ul> <ul> <li>Color cursorQuaternaryColor:   Get or set the quarternary cursor color. </li> </ul> <ul> <li>Color selectionBoxColor:   Get or set the selection box normal color. </li> </ul> <ul> <li>Color selectionHighlightColor:   Get or set the selection box highlight color. </li> </ul> <ul> <li>Color selectionSelectColor:   Get or set the selection box select color. </li> </ul> <ul> <li>StyleBox transformStyleBox:   Gets or sets the StyleBox used to draw the transform selection box for the SelectTool. </li> </ul> <ul> <li>StyleBox transformCornerStyleBox:   Gets or sets the StyleBox used to draw the transform selection corner circles for the SelectTool. </li> </ul> <ul> <li>Vector2 CellSize:   Gets the world unit size of each grid square. </li> </ul> <ul> <li>Vector2 MousePosition:   Gets the mouse position in world space. </li> </ul> <ul> <li>bool IsMouseMoving:   Get if the mouse is moving. </li> </ul> <ul> <li>bool IsInsideBounds:   Get if the mouse is inside the canvas (Has a 512 unit padding because some tools can draw outside of bounds). </li> </ul> <ul> <li>Vector2 CursorTilePosition:   Gets the mouse grid snapped grid position. Read only. </li> </ul> <ul> <li>Vector2 CursorHalfTilePosition:   Gets the mouse half grid snapped grid position. Read only. </li> </ul> <ul> <li>Vector2 SnappedPosition:   Gets the mouse snapped position. Will return half snapped position if half snapping is enabled. If snapping is disabled by the user, will return the mouse position as normal. Read only. </li> </ul> <ul> <li>Vector2 HalfSnappedPosition:   Gets the mouse half snapped position or just the mouse position if snapping is disabled. Read only. </li> </ul> <ul> <li>bool UseHalfSnap:   Get or set if half grid snapping is used. Normally set by the user preferences. </li> </ul> <ul> <li>bool IsSelectionEllipse:   Get or set if selection box should be drawn as an ellipse. </li> </ul> <ul> <li>Vector2[] Vertices:   Get or set if vertices drawn as a series of points. </li> </ul> <ul> <li>bool VerticesLoop:   Get or set if vertices should have a line closing the first and last points. </li> </ul> <ul> <li>ArcVector2[] Polyline:"},{"location":"reference/WorldUI/#_1","title":"WorldUI","text":"<ul> <li>bool IsDrawingPolyline:   Get or set if polyline should be drawn on screen. </li> </ul> <ul> <li>bool IsMeasuring:   Get or set if the ruler is enabled. </li> </ul> <ul> <li>Vector2 RulerStart:   Get or set the start position of the ruler. </li> </ul> <ul> <li>Vector2 RulerEnd:   Get or set the end position of the ruler. </li> </ul> <ul> <li>bool CanPolylineLoop:   Get or set if the polyline is allowed to loop. </li> </ul> <ul> <li>bool EditArcPoint:   Get or set if the user is editing the arc point instead of adding a new point. </li> </ul> <ul> <li>int IndicateEditArcPoint:   Gets if the UI is showing to the user that Arc Points are being shown. Set automatically, not advised to set manually. </li> </ul> <ul> <li>int ArcSegments:   Gets the number of segments generated in the last arc. Set automatically, not advised to set manually. </li> </ul> <ul> <li>UISegment Segment:   Get or set the segment used to show edits of walls, paths, etc. </li> </ul> <ul> <li>UITexture Texture:   Get or set the instance used to preview Portals. </li> </ul> <ul> <li>Color CursorColor:   Gets the color of the cusor. Read only. </li> </ul> <ul> <li>float CursorRadius:   Gets or sets the radius of the cursor. </li> </ul> <ul> <li>int CursorMode:   Get or set the cursor mode. 0 = Off, 1 = Point, 2 = Tile, 3 = Vertex, 4 = Segment, 5 = Circle, 6 = Texture </li> </ul> <ul> <li>bool IsActionInverted:   Gets or set if cursor or line should be drawn with the inverted color. Used by tools to inform the player they are erasing instead of adding an asset. </li> </ul> <ul> <li>bool IsCursorPositionFirstPoint:   Gets if the cursor is snapped to the same position as the first point of the polyline (closing the loop). Read only. </li> </ul> <ul> <li>bool IsCursorPositionLastPoint:   Gets if the cursor is snapped to the same position as the last point of the polyline (mouse has not moved). Read only. </li> </ul> <ul> <li>bool ArePolyEndPointsTouching:   Gets if the last point of the polyine is very close or exactly the same as the first point. Read only. </li> </ul>"},{"location":"reference/WorldUI/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void MarkPolyPoint ( ):   Adds the mouse snapped position as a new point to the polyline. </li> </ul> <ul> <li>void UpdateLastArcPoint ( ):   Adds the mouse snapped position as an arc point to the polyline. Arc points are used to curve the last segment added. </li> </ul> <ul> <li>void UndoPolyPoint ( ):   Removes the last point of the polyline. </li> </ul> <ul> <li>void AddPolyPoint ( Vector2 position ):   Add a new point to the polyline. </li> </ul> <ul> <li>void ClearPolyline ( ):   Erase all points of the polyline. </li> </ul> <ul> <li>Vector2[] GetArcPolyline ( ):   Return the polyline as an array of Vector2 points, including any creating any curves created by arc points. </li> </ul> <ul> <li>void DrawVertex ( Vector2 position, float radius, Color color ):   Reference only. Used by _Draw() the draw vertices. </li> </ul> <ul> <li>void DrawCursorCircle ( Vector2 position, float radius, int sides, Color color ):   Reference only. Used by _Draw() the draw cursors. </li> </ul> <ul> <li>void DrawEllipse ( Rect2 bounds, int sides, Color color ):   Reference only. Used by _Draw() the draw ellipses. </li> </ul> <ul> <li>void DrawLineEx ( Vector2[] line, Color color ):   Reference only. Used by _Draw() the draw polylines. </li> </ul> <ul> <li>Vector2 GetSnappedPosition ( Vector2 position ):   Snap a position to the grid. </li> </ul> <ul> <li>void SetSelectionBox ( Rect2 box ):   Sets the selection box. </li> </ul> <ul> <li>Rect2 GetSelectionBox ( ):   Returns the selection box. </li> </ul> <ul> <li>void ClearSelectionBox ( ):   Clears the selection box. </li> </ul> <ul> <li>void SetVertex ( Vector2 vertex ):   Sets the vertex. </li> </ul> <ul> <li>Vector2 GetVertex ( ):   Returns the vertex. </li> </ul> <ul> <li>void ClearVertex ( ):   Clears the vertex. </li> </ul> <ul> <li>void SetGuidePosition ( Vector2 position ):   Sets the guide position. </li> </ul> <ul> <li>Vector2 GetGuidePosition ( ):   Returns the guide position. </li> </ul> <ul> <li>void ClearGuidePosition ( ):   Clears the guide position. </li> </ul>"},{"location":"tutorials/SerializingModData/","title":"Serializing Mod Data","text":"<p>There may be times when you wish to store and load data for your mod. Perhaps you would like to remember things between sessions. Or perhaps you want to allow the user to configure your mod.</p>"},{"location":"tutorials/SerializingModData/#store-data","title":"Store Data","text":"<p>There is a good built-in way for the Godot Engine to do so called the File class. To create or overwrite a file to store your data, you would write code like this:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_var(data)\nfile.close()\n</code></pre> <p>The variable data is a Dictionary and functions like a table that you can store keyed information within. It also happens to save in nearly identical form in text, which makes it very readable.</p> <p>To store a file, you must first create a File, which is a helper to write files. Then, you must call open() and pass it the full path of the file location and the enum File.WRITE to tell Godot that you are writing, not reading the file. user:// is a special address that points to the User Folder of Dungeondraft, typically a safe place to store files not easily deleted.</p> <p>Once the file is opened, you should write to it any data you wish by calling store_var() or any other store_xxx() methods. There are different methods to store different types of data. Storing data in this way saves them in the binary format, which is faster to save and load. However, it makes the saved file unreadable by humans and also unfixable if corrupted. An alternate store method is to convert the data into JSON text prior to saving. Your code would look something like this if you do so:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_line(JSON.print(data, \"\\t\"))\nfile.close()\n</code></pre> <p>After you are finished, it is good to call close() to prevent a dangling access to a file.</p> <p>To see the official document on saving or loading files, visit File.</p> <p>Note: The value of any data entry can be any Godot Variant, including other Dictionaries.</p>"},{"location":"tutorials/SerializingModData/#retrieve-data","title":"Retrieve Data","text":"<p>When it comes time to load the data, perhaps during the next time a user opens your mod, you can do so by reversing the action you took during storing. If you saved it in JSON text format from above, then your load code would look like this:</p> <pre><code>var file = File.new()\nfile.open(\"user://mod_data.txt\", File.READ)\nvar line = file.get_as_text()\nvar data = JSON.parse(line).result\nfile.close()\n</code></pre> <p>Note that instead of get_line(), you call get_as_text(). That is because when you saved, the JSON format included newline characters. The data would parse incorrectly if you get_line() as it would only parse just the first line of the file. If your data was stored in the binary format, get_var() would be okay.</p>"},{"location":"tutorials/SerializingModData/#referencing-map-objects","title":"Referencing Map Objects","text":"<p>If you would like to remember specific map asset instances that the user placed in this file, you need to save that instance's NodeID. This is a special ID number that Dungeondraft assigns to the various type of asset instances that you can use to identify it. If you reference the asset instance without using the NodeID, you will not be able to find that instance the next session as the reference in Godot is temporary. It will be gone when the program closes.</p> <p>To get an Object's NodeID, you would call <code>var id = thing.get_meta(\"node_id\")</code> which returns an int that you can store.</p> <p>To retrieve that Object by its NodeID, you would call <code>var thing = Global.World.GetNodeByID(id)</code> which assigns the Object to the variable thing.</p> <p>Typically, if you are retrieving an Object beyond a single user session, you want to check the id before using it to gracefully prevent a crash. You can call <code>Global.World.HasNodeID(id)</code> which returns a bool you can check to see if it exists.</p>"}]}