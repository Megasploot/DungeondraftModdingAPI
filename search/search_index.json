{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Modding Dungeondraft allows you to customize your software to have new tools, features, export formats, or appearances. Dungeondraft mods are compatible with version 1.1.0.0 newborn phoenix and higher.</p> <p>Dungeondraft mods work by talking to Dungeondraft through a language similar to Python native to the Godot Engine called GDScript. You can familiarize yourself by reading the official GDScript documentation.</p>"},{"location":"#structure","title":"Structure","text":"<p>Every mod consists of a folder, a .ddmod file inside, and any number of .gd GDSCript files. Dungeondraft will automatically parse every .gd file inside a mod folder and call its start() function. There is no extra step needed to point to their paths. The .ddmod file exists to inform Dungeondraft's filesystem about your mod. It details your mod's name, version, author, unique id, minimum Dungeondraft version, and a description. It is written in the JSON format. The dependencies is optional and only necessary if you use scripts from other mods. See example:</p> <pre><code>{\n\"name\": \"Test Mod\",\n\"unique_id\": \"Megasploot.TestMod\",\n\"version\": \"1.0.0\",\n\"author\": \"Megasploot\",\n\"description\": \"Description here\",\n\"dd_version\": \"1.1.0.0\",\n\"dependencies\": [ \"Megasploot.ParentMod\" ]\n}\n</code></pre> <p>You can also include a PNG file named preview.png with 256x320 pixels to give any potential users of your mod a quick idea of what to expect. You can study an update-to-date structure here: https://github.com/Megasploot/Dungeondraft/tree/master/ddmods/toolmod</p>"},{"location":"#scripting","title":"Scripting","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Scripting</p> <p>Globals</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Serializing Mod Data](Serializing-Mod-Data)</p>"},{"location":"#development-environment","title":"Development Environment","text":"<p>The recommended IDE for writing script is Visual Studio Code with the Godot Tools plugin installed. You can find the download for both here:</p> <p>https://code.visualstudio.com/</p> <p>https://marketplace.visualstudio.com/items?itemName=geequlim.godot-tools</p> <p>By using this setup, you will have access to syntax highlighting and intellisense for the Godot Engine.</p>"},{"location":"#script-types","title":"Script Types","text":"<p>The backbone of a Dungeondraft mod is the scripting. Dungeondraft scripts come in 2 flavors.</p>"},{"location":"#tool-script","title":"Tool Script","text":"<p>Example new tool script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_new_tool.gd</p> <p>Example tool extension script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_extend_tool.gd</p> <p>A tool script allows you to add a new tool onto the toolbar and extend a current tool featureset or invent completely new ones. You can add UI elements to the tool panel to the left side and also access the object or path library panels on the right.</p>"},{"location":"#export-format-script","title":"Export Format Script","text":"<p>Example export format script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/export_formats/example_export_format.gd</p> <p>Export format script allows you to add a new export format to the Dungeondraft export options. You can embed additional information to a PNG, JPG, or WEBP style export. Or you can extract additional information like LOS data to create your own VTT export format.</p>"},{"location":"AssetCategories/","title":"Asset Categories","text":"<p>The following are the String names of the categories you can reference anywhere a category is required:</p> <pre><code>Terrain\nPatterns\nPatterns Colorable\nCaves\nRoofs\nObjects\nWalls\nMaterials\nPortals\nPaths\nLights\nSimple Tiles\nSmart Tiles\nSmart Tiles Double\n</code></pre>"},{"location":"Globals/","title":"Globals","text":"<p>This page documents how your mod script can interface with Dungeondraft. You can pass and receive data using the Globals such as the Tools or the World to perform tasks.</p>"},{"location":"Globals/#core","title":"Core","text":"<p>Functions and properties in this section are available to all scripts.</p>"},{"location":"Globals/#editor","title":"Editor","text":"<p>Functions and properties in this category are related to the tools and user interface of Dungeondraft. They are accessed through Global.Editor.VariableName.</p>"},{"location":"Globals/#properties","title":"Properties","text":"<p><pre><code>Array&lt;Tool&gt; Global.Editor.Tools\n</code></pre> Provides access to every tool in Dungeondraft by name. For example, you can access the Object Tool by indexing the variable in this manner <code>Global.Editor.Tools[\"ObjectTool\"]</code>.</p> <p>Valid tool names are:</p> <ul> <li>SelectTool</li> <li>TextTool</li> <li>PrefabTool</li> <li>FloorShapeTool</li> <li>PatternShapeTool</li> <li>WallTool</li> <li>PortalTool</li> <li>RoofTool</li> <li>PathTool</li> <li>ObjectTool</li> <li>ScatterTool</li> <li>CaveBrush</li> <li>WaterBrush</li> <li>TerrainBrush</li> <li>MaterialBrush</li> <li>Environment</li> <li>LightTool</li> <li>Generator</li> <li>MapSettings</li> <li>LevelSettings</li> <li>LayerSettings</li> <li>TraceImage</li> </ul>"},{"location":"Globals/#functions","title":"Functions","text":"<p><pre><code>ToolPanel Global.Editor.Toolset.CreateModTool(Reference script_instance, String category, String id, String name, String icon)\n</code></pre> Creates a new tool inside Dungeondraft and automatically generates a Tool Panel as the return.</p> <p>The category is the set of tools the new tool will show under. Valid options are:</p> <ul> <li>Design</li> <li>Terrain</li> <li>Objects</li> <li>Effects</li> <li>Settings</li> </ul> <p>The id is the internal tool name, while the name is displayed to the end user.</p> <p>The icon is the path to a PNG to use as the button.</p>"},{"location":"Globals/#world","title":"World","text":"<p>Functions and properties in this category are related to the map. They are accessed through Global.World.VariableName.</p>"},{"location":"Globals/#root","title":"Root","text":"<p>This name is base directory of the mod a script is packaged in. It is helpful for locating other files inside a mod, like a PNG file for icons. For example, you can assign a variable to a PNG filename by combining the Root name with a known relative path like so: <pre><code>var icon = Global.Root + \"icons/example_tool.png\"\n</code></pre></p>"},{"location":"Globals/#script","title":"Script","text":"<p>Functions in this category are specialized for modding Dungeondraft. They are accessed through Script.VariableName.</p>"},{"location":"Globals/#functions_1","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetActiveMods()\n</code></pre> Returns an Array of Strings of unique IDs of all active mods.</p>"},{"location":"Globals/#tool-script","title":"Tool Script","text":"<p>Functions and properties in this section are available only to tool scripts.</p>"},{"location":"Globals/#script_1","title":"Script","text":""},{"location":"Globals/#functions_2","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetAssetList(String category)\n</code></pre> Returns an Array of Strings populated by the path to all the assets of that category.</p> <p>Valid categories are Asset Categories</p>"},{"location":"Scripting/","title":"Scripting","text":""},{"location":"Scripting/#overview","title":"Overview","text":"<p>A script file is a fully enclosed that does not require any other script or file to use. Dungeondraft will poll each script at load, but can also poll every tick or input input based on the way you configure it. From those methods, you can communicate to Dungeondraft through API calls. It is through this back-and-forth communication that Dungeondraft can be modded.</p>"},{"location":"Scripting/#mod-load-time","title":"Mod Load Time","text":"<p>A mod is loaded and therefore, a script is loaded just after a new map or saved map finished loading and the canvas displays. By the time a script is initialized.</p>"},{"location":"Scripting/#minimum-viable-script","title":"Minimum Viable Script","text":"<p>The following code is the smallest scripts for the 2 script types.</p> <p>Tool Script <pre><code>var script_class = \"tool\"\nfunc start():\npass\n</code></pre></p> <p>The variable script_class is a string that Dungeondraft inspects to see what type of script has been loaded.</p> <p>The start() method is called after an instance of the script has been created and just after all of the assets needed for drawing has been loaded. It is not called in the welcome screen before a new map has been created.</p> <p>Export Format Script <pre><code>var script_class = \"export_format\"\nvar export_format_name = \"Export Format Name\"\nvar export_file_extension = \"myexportextension\"\nvar export_image_format = \"webp\"\nvar show_quality_slider = true\nfunc start():\npass\nfunc process(path : String, image : File, ppi : int):\npass\n</code></pre></p> <p>The variable export_format_name is a string that is displayed to users in the export window.</p> <p>The variable export_file_extension is the file extension your custom format will save with.</p> <p>The variable export_image_format is the type of image the export will use. Valid options are: \"png\", \"jpg\", and \"webp\".</p> <p>The variable show_quality_slider displays the quality slider in the export window, useful for png and webp.</p> <p>The process() method is only called within an Export Format script and is called just after the imaging step of the export process has been completed. It allows you to manipulate the end result of the image. This is an ideal script type to add specialized export to a custom VTT.</p>"},{"location":"reference/GridMenu/","title":"GridMenu","text":"<p>Extends: ItemList</p>"},{"location":"reference/GridMenu/#description","title":"Description","text":"<p>Custom Dungeondraft UI element that is meant to display assets. The underlying Godot type is Texture.</p>"},{"location":"reference/GridMenu/#properties","title":"Properties","text":"<p> bool ShowsPreview bool CustomColorPreview bool IsPatterns bool ShowsItemText Dictionary Lookup String category Texture Selected </p>"},{"location":"reference/GridMenu/#methods","title":"Methods","text":"<p> void Load ( String category ) void Reset ( ) void ShowSet ( Texture[] thumbnails ) void SelectTexture ( Texture texture ) void MultiselectTexture ( Texture texture ) void OnItemSelected ( int index ) void OnMultiSelected ( int index, bool selected ) void SelectPrevious ( ) void SelectNext ( ) Texture[] GetMultiselectedTextures ( ) void SetCustomColor ( Color color ) </p>"},{"location":"reference/GridMenu/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool ShowsPreview:   Show a preview of the asset when the user mouses over. </li> </ul> <ul> <li>bool CustomColorPreview:   Colorize the icons whenever it is of an asset that can be custom colored. </li> </ul> <ul> <li>bool IsPatterns:   Must be enabled if you loaded a category of assets that is a pattern. </li> </ul> <ul> <li>bool ShowsItemText:   Display the name of the asset below its icon. </li> </ul> <ul> <li>Dictionary Lookup:   A Dictionary of String, int pairs that keys an asset's relative resource path to the index number in this menu. DO NOT MODIFY. </li> </ul> <ul> <li>String category:   The category of assets that was loaded. DO NOT MODIFY. </li> </ul> <ul> <li>Texture Selected:   Get the current selected asset as a Godot Texture. </li> </ul>"},{"location":"reference/GridMenu/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Load ( String category ):   Load a category of assets into this GridMenu. Must be called for this to work. Valid Asset Categories. </li> </ul> <ul> <li>void Reset ( ):   Reload the assets. </li> </ul> <ul> <li>void ShowSet ( Texture[] thumbnails ):   Show only a certain subset of assets. Takes an array of thumbnail Texture only. Finicky. </li> </ul> <ul> <li>void SelectTexture ( Texture texture ):   Single-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void MultiselectTexture ( Texture texture ):   Multi-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void OnItemSelected ( int index ):   Called by the UI control when a user single-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void OnMultiSelected ( int index, bool selected ):   Called by the UI control when a user multi-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void SelectPrevious ( ):   Select the previous asset from the current cursor position. </li> </ul> <ul> <li>void SelectNext ( ):   Select the next asset from the current cursor position. </li> </ul> <ul> <li>Texture[] GetMultiselectedTextures ( ):   Get all the selected textures. </li> </ul> <ul> <li>void SetCustomColor ( Color color ):   Sets the preview color for custom color assets </li> </ul>"},{"location":"reference/TagsPanel/","title":"TagsPanel","text":"<p>Extends: VBoxContainer</p>"},{"location":"reference/TagsPanel/#description","title":"Description","text":"<p>This is the special box that shows tags in the default Object Tool</p>"},{"location":"reference/TagsPanel/#properties","title":"Properties","text":"<p> OptionButton setList ItemList tagsList Dictionary tagIndexLookup ??? ObjectTool bool TagsEnabled </p>"},{"location":"reference/TagsPanel/#methods","title":"Methods","text":"<p> void UpdateTags ( ) Dictionary Save ( ) void Load ( Dictionary data ) void EnableTags ( bool enable ) void SelectTagSetById ( int id ) void SelectTagSet ( String set ) void ShowCurrentTagSet ( ) </p>"},{"location":"reference/TagsPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton setList:   Dropdown menu that displays the tag sets for the user to choose. </li> </ul> <ul> <li>ItemList tagsList:   The box where the user clicks to select tags. Can multi-select. </li> </ul> <ul> <li>Dictionary tagIndexLookup:   Dictionary that allows you to look up a tag's index. tagIndexLookup[tag] results in a int. </li> </ul> <ul> <li>ObjectTool:   A private reference to the ObjectTool that shouldn't be used in a mod. </li> </ul> <ul> <li>bool TagsEnabled:   Is this TagsPanel visually enabled. </li> </ul>"},{"location":"reference/TagsPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void UpdateTags ( ):   Refresh the tags available by looking up Master.TagSets. </li> </ul> <ul> <li>Dictionary Save ( ):   Serialize the selected tags into a Dictionary. Looks like JSON. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a previous user's selected tags by passing in a Dictionary. See Save(). </li> </ul> <ul> <li>void EnableTags ( bool enable ):   Enable this TagsPanel so it can be used. When a user clicks on the tags, it calls this method as well. </li> </ul> <ul> <li>void SelectTagSetById ( int id ):   Manually selects the tag set by id in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void SelectTagSet ( String set ):   Manually selects the tag set by String in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void ShowCurrentTagSet ( ):   Display the assets associated with this tag in the Object Library Panel. </li> </ul>"},{"location":"reference/Tool/","title":"Tool","text":"<p>Extends: Object</p>"},{"location":"reference/Tool/#description","title":"Description","text":"<p>This is an abstract class that all Dungeondraft tools are based off of. You can call or get any properties or functions from this class on all tools.</p>"},{"location":"reference/Tool/#properties","title":"Properties","text":"<p> Dictionary Controls Range SizeControl Button[] SizeButtons </p>"},{"location":"reference/Tool/#methods","title":"Methods","text":"<p> void Enable ( ) void Disable ( ) void RegisterSizeButtons ( Button[] buttons, int default ) </p>"},{"location":"reference/Tool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Dictionary Controls:   Returns a Dictionary of UI Controls with the control's registered IDs as the keys. </li> </ul> <ul> <li>Range SizeControl:   A Range control, typically a slider that determines the size of the brush. </li> </ul> <ul> <li>Button[] SizeButtons:   The Buttons assigned to this Tool to modify tool brush sizes. </li> </ul>"},{"location":"reference/Tool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Enable ( ):   Enables the tool to perform tasks. This is also called internally when a tool is selected in the toolbar. The tool will not work without being first enabled. </li> </ul> <ul> <li>void Disable ( ):   Disables the tool. Must be called when you are done with a tool to clean up. </li> </ul> <ul> <li>void RegisterSizeButtons ( Button[] buttons, int default ):   Call from the ToolPanel to let this Tool know if there are size buttons for something like a brush. </li> </ul>"},{"location":"reference/ToolPanel/","title":"ToolPanel","text":"<p>Extends: ScrollContainer</p>"},{"location":"reference/ToolPanel/#description","title":"Description","text":"<p>ToolPanel is the class representing the UI controls on the left side of the Dungeondraft interface. Every single tool in Dungeondraft, including new ones you create through Global.Editor.CreateModTool() is associated with a ToolPanel. This is the primary way a tool displays options available to a cartographer. The main concern for the modder should be creating new UI controls and associating any options or functionality to them. Whenever you see the property variable in a UI creation method, it automatically modifies that property in the associated Tool.</p> <p>To see how to use a ToolPanel instance, check out this example script: Example UI Script</p>"},{"location":"reference/ToolPanel/#properties","title":"Properties","text":"<p> VBoxContainer Align Tool Tool bool UsesObjectLibrary bool UsesPathLibrary bool UsesModRightsidePanel bool IsRightsidePanel </p>"},{"location":"reference/ToolPanel/#methods","title":"Methods","text":"<p> VBoxContainer BeginSection ( bool stretch = true ) VBoxContainer BeginNamedSection ( String name, bool stretch = true ) void EndSection ( ) Button CreateButton ( String label, String icon ) Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ) void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ) void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ) CheckButton CreateCheckButton ( String label, String property, bool default ) void CreateLabel ( String label ) void CreateSeparator ( ) void CreateNote ( String text ) CheckBox[] CreateRadioMenu ( String property, String[] options ) OptionButton CreateDropdownMenu ( String property, String[] options, String default ) OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ) OptionButton CreateLayerMenu ( ) void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ) HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ) Object CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ) void CreateFileSelector ( String property, String filter, String directory ) ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ) Object CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ) void CreateTextureListMenu ( String property, String[] textures, String[] labels ) GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ) GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ) void CreateTilesetMenu ( String property ) void CreateTerrainListMenu ( String property ) void CreateExpandSlotsButton ( ) TagsPanel CreateTagsPanel ( ) void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ) ToolPanel CreateRightsidePanel ( String title ) void ForwardMethod ( String method ) void ForwardProperty ( value, String property ) void ForwardProperty_Enum ( String value, String property ) </p>"},{"location":"reference/ToolPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>VBoxContainer Align:   This is the control that every UI control is attached to unless inside a section. </li> </ul> <ul> <li>Tool Tool:   The Tool associated with this ToolPanel. </li> </ul> <ul> <li>bool UsesObjectLibrary:   Opens the Object Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesPathLibrary:   Opens the Path Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesModRightsidePanel:   Opens the Custom Mod Rightside Panel on the right side when this tool is active. DO NOT MANUALLY SET. </li> </ul> <ul> <li>bool IsRightsidePanel:   Tells Dungeondraft this panel is the mod rightside panel. DO NOT MANUALLY SET. </li> </ul>"},{"location":"reference/ToolPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>VBoxContainer BeginSection ( bool stretch = true ):   Encloses all UI controls created afterwards inside a section. Must be closed with EndSection(). The parameter stretch causes the section to extend all the way to the bottom of the panel. </li> </ul> <ul> <li>VBoxContainer BeginNamedSection ( String name, bool stretch = true ):   Create a UI control section that can be referenced through Tool.Controls[name]. </li> </ul> <ul> <li>void EndSection ( ):   Ends the section and all UI controls created afterwards will not be included in the previous section. </li> </ul> <ul> <li>Button CreateButton ( String label, String icon ):   Creates and returns a Godot Button with label as display text and icon_path as the path to the icon displayed. </li> </ul> <ul> <li>Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ):   Creates and returns a toggle style Godot Button. </li> </ul> <ul> <li>void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ):   Creates a radio style Godot Button and pass in a ButtonGroup to allow a radio toggle. </li> </ul> <ul> <li>void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ):   Creates a set of radio toggle but looks like tabbed buttons. </li> </ul> <ul> <li>CheckButton CreateCheckButton ( String label, String property, bool default ):   Creates and returns a Godot CheckButton. </li> </ul> <ul> <li>void CreateLabel ( String label ):   Creates a label. </li> </ul> <ul> <li>void CreateSeparator ( ):   Creates a horizontal separator. </li> </ul> <ul> <li>void CreateNote ( String text ):   Creates a framed label for a dev note. </li> </ul> <ul> <li>CheckBox[] CreateRadioMenu ( String property, String[] options ):   Creates a radio menu and returns the array of all the CheckBox. </li> </ul> <ul> <li>OptionButton CreateDropdownMenu ( String property, String[] options, String default ):   Creates and returns a Godot OptionButton (which is a dropdown menu) and autofill the menu with options. </li> </ul> <ul> <li>OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ):   Creates a labelled dropdown menu. The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateLayerMenu ( ):   Creates and returns the dropdown menu representing the layer system for Objects, Paths, and Materials for Dungeondraft. There should only ever be a single instance of this UI control per tool if needed. To inspect the current selected layer, check the variable Global.Editor.Tools[\"mod_tool_id\"].ActiveLayer which returns the int of the layer value. </li> </ul> <ul> <li>void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ):   Create a horizontal set of icon menu buttons like those used to select brush shapes. </li> </ul> <ul> <li>HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ):   Creates and returns a Godot HSlider. The exponential parameter is an option that makes the slider use an exponential scale. </li> </ul> <ul> <li>Object CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ):   Creates and returns a Dungeondraft unique UI control RangeSlider. This control allows the user to pick a range of values instead of a single value. </li> </ul> <ul> <li>void CreateFileSelector ( String property, String filter, String directory ):   Creates a special UI control dedicated to selecting a file. The file_filter parameter is the file extension filter that is unique to each operating system. A modder needs to account for Windows, OSX, and Linux in the filter. The directory is the path to the default starting location for the file dialog that opens. </li> </ul> <ul> <li>ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ):   Create a simple color selection control without a color palette. The presets Array are of type String. </li> </ul> <ul> <li>Object CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ):   Creates and returns a Dungeondraft UI control called a ColorPalette and fills it through the presets array. The Strings should be in hex color code format. The presets Array are of type String. </li> </ul> <ul> <li>void CreateTextureListMenu ( String property, String[] textures, String[] labels ):   Create a texture selection menu in list format. No longer used/deprecated. The Arrays are of type String. </li> </ul> <ul> <li>GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu in wide format filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>void CreateTilesetMenu ( String property ):   Generate the menu that displays the floor tile options. </li> </ul> <ul> <li>void CreateTerrainListMenu ( String property ):   Generate the menu to select Terrain options. Passes the index of the selected option to property. </li> </ul> <ul> <li>void CreateExpandSlotsButton ( ):   Generate the CheckButton used to expand the Terrain slots. </li> </ul> <ul> <li>TagsPanel CreateTagsPanel ( ):   Generate the TagsPanel and adds it to the UI. </li> </ul> <ul> <li>void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ):   Update a toggle button's icons and labels. </li> </ul> <ul> <li>ToolPanel CreateRightsidePanel ( String title ):   Creates and returns a Dungeondraft right-side panel that behaves like the left-side tool panel and allows you to add more UI controls for your mod. Must be called from a ToolPanel you created for your mod tool, as it is registered to the tool. It will automatically open and close when your tool is selected. Only one is supported per tool. See Example UI Script for a usage example. </li> </ul> <ul> <li>void ForwardMethod ( String method ):   Helper function to forward a method invocation to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty ( value, String property ):   Helper function to forward a property change to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty_Enum ( String value, String property ):   Helper function to forward an enum change to the Tool. Not typically called manually. </li> </ul>"},{"location":"tutorials/Serializing-Mod-Data/","title":"Serializing Mod Data","text":"<p>There may be times when you wish to store and load data for your mod. Perhaps you would like to remember things between sessions. Or perhaps you want to allow the user to configure your mod.</p>"},{"location":"tutorials/Serializing-Mod-Data/#store-data","title":"Store Data","text":"<p>There is a good built-in way for the Godot Engine to do so called the File class. To create or overwrite a file to store your data, you would write code like this:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_var(data)\nfile.close()\n</code></pre> <p>The variable data is a Dictionary and functions like a table that you can store keyed information within. It also happens to save in nearly identical form in text, which makes it very readable.</p> <p>To store a file, you must first create a File, which is a helper to write files. Then, you must call open() and pass it the full path of the file location and the enum File.WRITE to tell Godot that you are writing, not reading the file. user:// is a special address that points to the User Folder of Dungeondraft, typically a safe place to store files not easily deleted.</p> <p>Once the file is opened, you should write to it any data you wish by calling store_var() or any other store_xxx() methods. There are different methods to store different types of data. Storing data in this way saves them in the binary format, which is faster to save and load. However, it makes the saved file unreadable by humans and also unfixable if corrupted. An alternate store method is to convert the data into JSON text prior to saving. Your code would look something like this if you do so:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_line(JSON.print(data, \"\\t\"))\nfile.close()\n</code></pre> <p>After you are finished, it is good to call close() to prevent a dangling access to a file.</p> <p>To see the official document on saving or loading files, visit File.</p> <p>Note: The value of any data entry can be any Godot Variant, including other Dictionaries.</p>"},{"location":"tutorials/Serializing-Mod-Data/#retrieve-data","title":"Retrieve Data","text":"<p>When it comes time to load the data, perhaps during the next time a user opens your mod, you can do so by reversing the action you took during storing. If you saved it in JSON text format from above, then your load code would look like this:</p> <pre><code>var file = File.new()\nfile.open(\"user://mod_data.txt\", File.READ)\nvar line = file.get_as_text()\nvar data = JSON.parse(line).result\nfile.close()\n</code></pre> <p>Note that instead of get_line(), you call get_as_text(). That is because when you saved, the JSON format included newline characters. The data would parse incorrectly if you get_line() as it would only parse just the first line of the file. If your data was stored in the binary format, get_var() would be okay.</p>"},{"location":"tutorials/Serializing-Mod-Data/#referencing-map-objects","title":"Referencing Map Objects","text":"<p>If you would like to remember specific map asset instances that the user placed in this file, you need to save that instance's NodeID. This is a special ID number that Dungeondraft assigns to the various type of asset instances that you can use to identify it. If you reference the asset instance without using the NodeID, you will not be able to find that instance the next session as the reference in Godot is temporary. It will be gone when the program closes.</p> <p>To get an Object's NodeID, you would call <code>var id = thing.get_meta(\"node_id\")</code> which returns an int that you can store.</p> <p>To retrieve that Object by its NodeID, you would call <code>var thing = Global.World.GetNodeByID(id)</code> which assigns the Object to the variable thing.</p> <p>Typically, if you are retrieving an Object beyond a single user session, you want to check the id before using it to gracefully prevent a crash. You can call <code>Global.World.HasNodeID(id)</code> which returns a bool you can check to see if it exists.</p>"}]}