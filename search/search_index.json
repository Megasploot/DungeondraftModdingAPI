{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Modding Dungeondraft allows you to customize your software to have new tools, features, export formats, or appearances. Dungeondraft mods are compatible with version 1.1.0.0 newborn phoenix and higher.</p> <p>Dungeondraft mods work by talking to Dungeondraft through a language similar to Python native to the Godot Engine called GDScript. You can familiarize yourself by reading the official GDScript documentation.</p>"},{"location":"#structure","title":"Structure","text":"<p>Every mod consists of a folder, a .ddmod file inside, and any number of .gd GDSCript files. Dungeondraft will automatically parse every .gd file inside a mod folder and call its start() function. There is no extra step needed to point to their paths. The .ddmod file exists to inform Dungeondraft's filesystem about your mod. It details your mod's name, version, author, unique id, minimum Dungeondraft version, and a description. It is written in the JSON format. The dependencies is optional and only necessary if you use scripts from other mods. See example:</p> <pre><code>{\n\"name\": \"Test Mod\",\n\"unique_id\": \"Megasploot.TestMod\",\n\"version\": \"1.0.0\",\n\"author\": \"Megasploot\",\n\"description\": \"Description here\",\n\"dd_version\": \"1.1.0.0\",\n\"dependencies\": [ \"Megasploot.ParentMod\" ]\n}\n</code></pre> <p>You can also include a PNG file named preview.png with 256x320 pixels to give any potential users of your mod a quick idea of what to expect. You can study an update-to-date structure here: https://github.com/Megasploot/Dungeondraft/tree/master/ddmods/toolmod</p>"},{"location":"#scripting","title":"Scripting","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Scripting</p> <p>Globals</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Serializing Mod Data</p>"},{"location":"#development-environment","title":"Development Environment","text":"<p>The recommended IDE for writing script is Visual Studio Code with the Godot Tools plugin installed. You can find the download for both here:</p> <p>https://code.visualstudio.com/</p> <p>https://marketplace.visualstudio.com/items?itemName=geequlim.godot-tools</p> <p>By using this setup, you will have access to syntax highlighting and intellisense for the Godot Engine.</p>"},{"location":"#script-types","title":"Script Types","text":"<p>The backbone of a Dungeondraft mod is the scripting. Dungeondraft scripts come in 2 flavors.</p>"},{"location":"#tool-script","title":"Tool Script","text":"<p>Example new tool script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_new_tool.gd</p> <p>Example tool extension script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/tools/example_extend_tool.gd</p> <p>A tool script allows you to add a new tool onto the toolbar and extend a current tool featureset or invent completely new ones. You can add UI elements to the tool panel to the left side and also access the object or path library panels on the right.</p>"},{"location":"#export-format-script","title":"Export Format Script","text":"<p>Example export format script: https://github.com/Megasploot/Dungeondraft/blob/master/ddmods/toolmod/scripts/export_formats/example_export_format.gd</p> <p>Export format script allows you to add a new export format to the Dungeondraft export options. You can embed additional information to a PNG, JPG, or WEBP style export. Or you can extract additional information like LOS data to create your own VTT export format.</p>"},{"location":"AssetCategories/","title":"Asset Categories","text":"<p>The following are the String names of the categories you can reference anywhere a category is required:</p> <pre><code>Terrain\nPatterns\nPatterns Colorable\nCaves\nRoofs\nObjects\nWalls\nMaterials\nPortals\nPaths\nLights\nSimple Tiles\nSmart Tiles\nSmart Tiles Double\n</code></pre>"},{"location":"AssetInstance/","title":"Asset Instance","text":"<p>An asset instance in Dungeondraft is under-the-hood a Node of various types in Godot but with a unique id assigned. Any instance must be modified with care, verifying that the modifications do not cause bugs.</p> <p>Best practice is to modify an asset instance through a given function from a Tool rather than accessing its properties directly, with the exception of its transform (ie. position, rotation, and scale).</p> <p>All asset instances are also Godot Node2Ds and therefore, you will be able to access the functionality here in the Godot docs: Node2D</p>"},{"location":"AssetInstance/#function","title":"Function","text":"<pre><code>int GetNodeID\n</code></pre> <p>Get the unique ID assigned by Dungeondraft.</p>"},{"location":"Globals/","title":"Globals","text":"<p>This page documents how your mod script can interface with Dungeondraft. You can pass and receive data using the Globals such as the Tools or the World to perform tasks.</p>"},{"location":"Globals/#core","title":"Core","text":"<p>Functions and properties in this section are available to all scripts.</p>"},{"location":"Globals/#editor","title":"Editor","text":"<p>Functions and properties in this category are related to the tools and user interface of Dungeondraft. They are accessed through Global.Editor.VariableName.</p>"},{"location":"Globals/#properties","title":"Properties","text":"<p><pre><code>Array&lt;Tool&gt; Global.Editor.Tools\n</code></pre> Provides access to every tool in Dungeondraft by name. For example, you can access the Object Tool by indexing the variable in this manner <code>Global.Editor.Tools[\"ObjectTool\"]</code>.</p> <p>Valid tool names are:</p> <ul> <li>SelectTool</li> <li>TextTool</li> <li>PrefabTool</li> <li>FloorShapeTool</li> <li>PatternShapeTool</li> <li>WallTool</li> <li>PortalTool</li> <li>RoofTool</li> <li>PathTool</li> <li>ObjectTool</li> <li>ScatterTool</li> <li>CaveBrush</li> <li>WaterBrush</li> <li>TerrainBrush</li> <li>MaterialBrush</li> <li>Environment</li> <li>LightTool</li> <li>Generator</li> <li>MapSettings</li> <li>LevelSettings</li> <li>LayerSettings</li> <li>TraceImage</li> </ul>"},{"location":"Globals/#functions","title":"Functions","text":"<p><pre><code>ToolPanel Global.Editor.Toolset.CreateModTool(Reference script_instance, String category, String id, String name, String icon)\n</code></pre> Creates a new tool inside Dungeondraft and automatically generates a Tool Panel as the return.</p> <p>The category is the set of tools the new tool will show under. Valid options are:</p> <ul> <li>Design</li> <li>Terrain</li> <li>Objects</li> <li>Effects</li> <li>Settings</li> </ul> <p>The id is the internal tool name, while the name is displayed to the end user.</p> <p>The icon is the path to a PNG to use as the button.</p>"},{"location":"Globals/#world","title":"World","text":"<p>Functions and properties in this category are related to the map. They are accessed through Global.World.VariableName.</p>"},{"location":"Globals/#root","title":"Root","text":"<p>This name is base directory of the mod a script is packaged in. It is helpful for locating other files inside a mod, like a PNG file for icons. For example, you can assign a variable to a PNG filename by combining the Root name with a known relative path like so: <pre><code>var icon = Global.Root + \"icons/example_tool.png\"\n</code></pre></p>"},{"location":"Globals/#script","title":"Script","text":"<p>Functions in this category are specialized for modding Dungeondraft. They are accessed through Script.VariableName.</p>"},{"location":"Globals/#functions_1","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetActiveMods()\n</code></pre> Returns an Array of Strings of unique IDs of all active mods.</p>"},{"location":"Globals/#tool-script","title":"Tool Script","text":"<p>Functions and properties in this section are available only to tool scripts.</p>"},{"location":"Globals/#script_1","title":"Script","text":""},{"location":"Globals/#functions_2","title":"Functions","text":"<p><pre><code>Array&lt;String&gt; Script.GetAssetList(String category)\n</code></pre> Returns an Array of Strings populated by the path to all the assets of that category.</p> <p>Valid categories are Asset Categories</p>"},{"location":"Scripting/","title":"Scripting","text":""},{"location":"Scripting/#overview","title":"Overview","text":"<p>A script file is a fully enclosed that does not require any other script or file to use. Dungeondraft will poll each script at load, but can also poll every tick or input input based on the way you configure it. From those methods, you can communicate to Dungeondraft through API calls. It is through this back-and-forth communication that Dungeondraft can be modded.</p>"},{"location":"Scripting/#mod-load-time","title":"Mod Load Time","text":"<p>A mod is loaded and therefore, a script is loaded just after a new map or saved map finished loading and the canvas displays. By the time a script is initialized.</p>"},{"location":"Scripting/#minimum-viable-script","title":"Minimum Viable Script","text":"<p>The following code is the smallest scripts for the 2 script types.</p> <p>Tool Script <pre><code>var script_class = \"tool\"\nfunc start():\npass\n</code></pre></p> <p>The variable script_class is a string that Dungeondraft inspects to see what type of script has been loaded.</p> <p>The start() method is called after an instance of the script has been created and just after all of the assets needed for drawing has been loaded. It is not called in the welcome screen before a new map has been created.</p> <p>Export Format Script <pre><code>var script_class = \"export_format\"\nvar export_format_name = \"Export Format Name\"\nvar export_file_extension = \"myexportextension\"\nvar export_image_format = \"webp\"\nvar show_quality_slider = true\nfunc start():\npass\nfunc process(path : String, image : File, ppi : int):\npass\n</code></pre></p> <p>The variable export_format_name is a string that is displayed to users in the export window.</p> <p>The variable export_file_extension is the file extension your custom format will save with.</p> <p>The variable export_image_format is the type of image the export will use. Valid options are: \"png\", \"jpg\", and \"webp\".</p> <p>The variable show_quality_slider displays the quality slider in the export window, useful for png and webp.</p> <p>The process() method is only called within an Export Format script and is called just after the imaging step of the export process has been completed. It allows you to manipulate the end result of the image. This is an ideal script type to add specialized export to a custom VTT.</p>"},{"location":"reference/ColorPalette/","title":"ColorPalette","text":"<p>Extends: HBoxContainer</p>"},{"location":"reference/ColorPalette/#description","title":"Description","text":"<p>Dungeondraft unique UI Control that allows the user to set a color for the tool and create a color palette.</p>"},{"location":"reference/ColorPalette/#properties","title":"Properties","text":"<p> ColorRect colorRect TextureRect iconRect Button paletteButton Button instantButton Popup popup ItemList colorList Popup colorPickerPopup ColorPicker colorPicker PopupMenu menu Color color </p>"},{"location":"reference/ColorPalette/#methods","title":"Methods","text":"<p> String[] Save ( ) void Load ( String[] data ) void SetColor ( Color color, bool emitSignal = true ) void AddPresets ( String[] hexcodes ) void ShowPalette ( ) void ShowPicker ( ) </p>"},{"location":"reference/ColorPalette/#signals","title":"Signals","text":"<ul> <li>color_changed ( ):   Signal emitted when the color is changed. Returns a Color. Not used but is emitted. </li> </ul>"},{"location":"reference/ColorPalette/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>ColorRect colorRect:   The box that shows the selected color to the user. </li> </ul> <ul> <li>TextureRect iconRect:   The dropdown arrow icon. Does not affect use. </li> </ul> <ul> <li>Button paletteButton:   The button the user presses to show the palette. </li> </ul> <ul> <li>Button instantButton:   The button the user presses to open the color picker. </li> </ul> <ul> <li>Popup popup:   The popup where the presets are displayed. </li> </ul> <ul> <li>ItemList colorList:   The ItemList that holds the individual preset colors. </li> </ul> <ul> <li>Popup colorPickerPopup:   The color picker popup. </li> </ul> <ul> <li>ColorPicker colorPicker:   Godot ColorPicker used by this Control to add new colors. </li> </ul> <ul> <li>PopupMenu menu:   The right-click context menu where the user can remove a color preset. </li> </ul> <ul> <li>Color color:   Color currently selected. Use SetColor() to change color. ONLY SAFE TO READ. </li> </ul>"},{"location":"reference/ColorPalette/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>String[] Save ( ):   Saves and returns the presets as an Array of hexcodes. </li> </ul> <ul> <li>void Load ( String[] data ):   Loads the presets from an Array of hexcodes. Calls AddPresets() internally. </li> </ul> <ul> <li>void SetColor ( Color color, bool emitSignal = true ):   Force the ColorPalette to set a specific color. If emitSignal is set, it emits the color_changed signal. </li> </ul> <ul> <li>void AddPresets ( String[] hexcodes ):   Takes an Array of hexcodes and adds them as colors to the color palette. </li> </ul> <ul> <li>void ShowPalette ( ):   Show the color palette selector </li> </ul> <ul> <li>void ShowPicker ( ):   Show the color picker </li> </ul>"},{"location":"reference/Environment/","title":"Environment","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/Environment/#description","title":"Description","text":"<p>The tool used to edit the environment. Only affects the ambient light.</p> <p>Accessed by <code>Global.Editor.Tools[\"Environment\"]</code>.</p>"},{"location":"reference/Environment/#properties","title":"Properties","text":"<p> Color AmbientLight </p>"},{"location":"reference/Environment/#methods","title":"Methods","text":"<p> void SetAmbientLight ( Color color ) </p>"},{"location":"reference/Environment/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Color AmbientLight:   Gets or sets the ambient light color </li> </ul>"},{"location":"reference/Environment/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetAmbientLight ( Color color ):   Sets the ambient light color. Already called by AmbientLight property when you set it. </li> </ul>"},{"location":"reference/GridMenu/","title":"GridMenu","text":"<p>Extends: ItemList</p>"},{"location":"reference/GridMenu/#description","title":"Description","text":"<p>Custom Dungeondraft UI element that is meant to display assets. The underlying Godot type is Texture.</p>"},{"location":"reference/GridMenu/#properties","title":"Properties","text":"<p> bool ShowsPreview bool CustomColorPreview bool IsPatterns bool ShowsItemText Dictionary Lookup String category Texture Selected </p>"},{"location":"reference/GridMenu/#methods","title":"Methods","text":"<p> void Load ( String category ) void Reset ( ) void ShowSet ( Texture[] thumbnails ) void SelectTexture ( Texture texture ) void MultiselectTexture ( Texture texture ) void OnItemSelected ( int index ) void OnMultiSelected ( int index, bool selected ) void SelectPrevious ( ) void SelectNext ( ) Texture[] GetMultiselectedTextures ( ) void SetCustomColor ( Color color ) </p>"},{"location":"reference/GridMenu/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>bool ShowsPreview:   Show a preview of the asset when the user mouses over. </li> </ul> <ul> <li>bool CustomColorPreview:   Colorize the icons whenever it is of an asset that can be custom colored. </li> </ul> <ul> <li>bool IsPatterns:   Must be enabled if you loaded a category of assets that is a pattern. </li> </ul> <ul> <li>bool ShowsItemText:   Display the name of the asset below its icon. </li> </ul> <ul> <li>Dictionary Lookup:   A Dictionary of String, int pairs that keys an asset's relative resource path to the index number in this menu. DO NOT MODIFY. </li> </ul> <ul> <li>String category:   The category of assets that was loaded. DO NOT MODIFY. </li> </ul> <ul> <li>Texture Selected:   Get the current selected asset as a Godot Texture. </li> </ul>"},{"location":"reference/GridMenu/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Load ( String category ):   Load a category of assets into this GridMenu. Must be called for this to work. Valid Asset Categories. </li> </ul> <ul> <li>void Reset ( ):   Reload the assets. </li> </ul> <ul> <li>void ShowSet ( Texture[] thumbnails ):   Show only a certain subset of assets. Takes an array of thumbnail Texture only. Finicky. </li> </ul> <ul> <li>void SelectTexture ( Texture texture ):   Single-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void MultiselectTexture ( Texture texture ):   Multi-select an asset in the menu by its Texture if it exists in this category. </li> </ul> <ul> <li>void OnItemSelected ( int index ):   Called by the UI control when a user single-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void OnMultiSelected ( int index, bool selected ):   Called by the UI control when a user multi-selects an asset. Not normally called manually. </li> </ul> <ul> <li>void SelectPrevious ( ):   Select the previous asset from the current cursor position. </li> </ul> <ul> <li>void SelectNext ( ):   Select the next asset from the current cursor position. </li> </ul> <ul> <li>Texture[] GetMultiselectedTextures ( ):   Get all the selected textures. </li> </ul> <ul> <li>void SetCustomColor ( Color color ):   Sets the preview color for custom color assets </li> </ul>"},{"location":"reference/LightTool/","title":"LightTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/LightTool/#description","title":"Description","text":"<p>The tool used to edit lights.</p> <p>Accessed by <code>Global.Editor.Tools[\"LightTool\"]</code>.</p>"},{"location":"reference/LightTool/#properties","title":"Properties","text":"<p> Range Range float Intensity Color Color bool Shadows bool Widgets Texture texture Light2D preview </p>"},{"location":"reference/LightTool/#methods","title":"Methods","text":"<p> void CreatePreview ( ) void ChangeColor ( Color color, String name ) void SetShadows ( bool shadows ) </p>"},{"location":"reference/LightTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range Range:   Gets and sets the range of the lights placed. </li> </ul> <ul> <li>float Intensity:   Gets and sets the intensity of the lights placed. </li> </ul> <ul> <li>Color Color:   Gets and sets whether the tool will place lights that cast LOS shadows. Will not update active light. Set with ChangeColor() instead if you need to update active light. </li> </ul> <ul> <li>bool Shadows:   Gets and sets whether the tool will place lights that cast LOS shadows. Will not update active light. Set with SetShadows() instead if you need to update active light. </li> </ul> <ul> <li>bool Widgets:   Gets and sets whether the tool will display a widget over the light. </li> </ul> <ul> <li>Texture texture:  Light2D of the asset selected. Used automatically by the UI controls. Does not update the preview link:<code>Light2D</code> automatically. </li> </ul> <ul> <li>Light2D preview:   Gets the preview Light before it is placed. DO NOT MODIFY. </li> </ul>"},{"location":"reference/LightTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void CreatePreview ( ):   Create a new light as a preview and store it in the preview property. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Sets the color of the light and subsequent light placements. The param name is not used. </li> </ul> <ul> <li>void SetShadows ( bool shadows ):   Sets whether the tool will place lights that cast LOS shadows. </li> </ul>"},{"location":"reference/ObjectTool/","title":"ObjectTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/ObjectTool/#description","title":"Description","text":"<p>The tool used to edit objects.</p> <p>Accessed by <code>Global.Editor.Tools[\"ObjectTool\"]</code>.</p>"},{"location":"reference/ObjectTool/#properties","title":"Properties","text":"<p> Texture texture Prop Preview Range Rotation Range Scale OptionButton LayerMenu int ActiveLayer int Sorting bool Shadow bool BlockLight GridMenu GridMenu Dictionary LibraryMemory </p>"},{"location":"reference/ObjectTool/#methods","title":"Methods","text":"<p> void Record ( Prop obj ) void Next ( ) void SetLayer ( int index ) void SetShadow ( bool value ) void ChangeColor ( Color color, String name ) void Confirm ( ) void PromoteCustomColor ( ) void SetSorting ( int sorting ) void EmbebObject ( String file ) void SetBlockLight ( bool value ) </p>"},{"location":"reference/ObjectTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture texture:  Texture of the asset selected. Used automatically by the UI controls. Does not update the preview link:<code>Prop</code> automatically. </li> </ul> <ul> <li>Prop Preview:   Gets the preview Prop. This is the object that follows the user's cursor before it is actually placed. Call confirm to force it to place. </li> </ul> <ul> <li>Range Rotation:  Range that determines the rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range Scale:  Range that determines the scale of the objects placed. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Object Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next object will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>int Sorting:   Where the next object will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the tool will place objects with shadows. Read only. Set with SetShadow() instead. </li> </ul> <ul> <li>bool BlockLight:   Gets and sets whether the tool will place objects that block light. Read only. Set with SetBlockLight() instead. </li> </ul> <ul> <li>GridMenu GridMenu:   The menu in the Object Library Panel that selects textures for this tool. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul>"},{"location":"reference/ObjectTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Record ( Prop obj ):   Change this link:<code>Prop</code> from preview to real, assign it an NodeID, and then record the action to undo history. </li> </ul> <ul> <li>void Next ( ):   Create a new preview link:<code>Prop</code> using the last known options and texture selected. </li> </ul> <ul> <li>void SetLayer ( int index ):   Set layer option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Change the custom color if it applies. Update the Object Library Panel icons to reflect it as well if enabled. </li> </ul> <ul> <li>void Confirm ( ):   Finalize the preview into the map and create a new preview Prop. Calls Record() and Next() internally. </li> </ul> <ul> <li>void PromoteCustomColor ( ):   Update the preview Prop to reflect the custom color. Better to call ChangeColor() than this function directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul> <ul> <li>void EmbebObject ( String file ):   Embed a PNG file directly into the map. Bloats the file size, use wisely. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Set the preview Prop to block light. </li> </ul>"},{"location":"reference/PathTool/","title":"PathTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/PathTool/#description","title":"Description","text":"<p>The tool used to edit paths.</p> <p>Accessed by <code>Global.Editor.Tools[\"PathTool\"]</code>.</p>"},{"location":"reference/PathTool/#properties","title":"Properties","text":"<p> int Sorting float Smoothness bool fadeIn bool fadeOut bool grow bool shrink Texture Texture OptionButton LayerMenu int ActiveLayer float Width bool isDrawing Pathway ActivePath bool BlockLight Dictionary LibraryMemory </p>"},{"location":"reference/PathTool/#methods","title":"Methods","text":"<p> void SetLayer ( int index ) void StartPath ( ) void UpdatePath ( ) void Confirm ( ) void EndPath ( bool loop ) void SetSorting ( int sorting ) void SetFadeIn ( bool value ) void SetFadeOut ( bool value ) void SetTransitionIn ( int value ) void SetTransitionOut ( int value ) void SetBlockLight ( bool value ) </p>"},{"location":"reference/PathTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Sorting:   Where the next path will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>float Smoothness:   Gets or sets the next path's smoothness. 0 to 1. </li> </ul> <ul> <li>bool fadeIn:   Gets or sets the next path's fade in. Better to use SetFadeIn() to set. </li> </ul> <ul> <li>bool fadeOut:   Gets or sets the next path's fade in. Better to use SetFadeOut() to set. </li> </ul> <ul> <li>bool grow:   Gets or sets the next path's fade in. Better to use SetTransitionIn()/SetTransitionOut() to set. </li> </ul> <ul> <li>bool shrink:   Gets or sets the next path's fade in. Better to use SetTransitionIn()/SetTransitionOut() to set. </li> </ul> <ul> <li>Texture Texture:   Gets and sets the texture used for the next path drawn. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Path Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   Gets and sets whether the tool's layer. </li> </ul> <ul> <li>float Width:   Gets and sets the width used for the next path drawn. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>Pathway ActivePath:   Gets the current unfinished Pathway (path). </li> </ul> <ul> <li>bool BlockLight:   Allows the user to adjust blocking light. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul>"},{"location":"reference/PathTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetLayer ( int index ):   Set layer option and update the active link:Pathway` to reflect it. </li> </ul> <ul> <li>void StartPath ( ):   Create a new path with zero points and sets it as the ActivePath. </li> </ul> <ul> <li>void UpdatePath ( ):   Updates the visuals of the current unfinished path. </li> </ul> <ul> <li>void Confirm ( ):   Finishes any path started and closes loops if possible. Calls EndPath() internally. </li> </ul> <ul> <li>void EndPath ( bool loop ):   Called by Confirm(). Better to not call directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul> <ul> <li>void SetFadeIn ( bool value ):   Marks future paths to fade in. </li> </ul> <ul> <li>void SetFadeOut ( bool value ):   Marks future paths to fade out. </li> </ul> <ul> <li>void SetTransitionIn ( int value ):   Sets the type of transition for the fade. 0 is disable, 1 is fade in, 2 is grow/shrink. </li> </ul> <ul> <li>void SetTransitionOut ( int value ):   Sets the type of transition for the fade. 0 is disable, 1 is fade in, 2 is grow/shrink. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Updates whether the current unfinished path should block light. </li> </ul>"},{"location":"reference/Pathway/","title":"Pathway","text":"<p>Extends: Line2D</p>"},{"location":"reference/Pathway/#description","title":"Description","text":"<p>A Pathway is a Dungeondraft asset instance of what the user sees as an path from the PathTool. See Asset Instance.</p>"},{"location":"reference/Pathway/#properties","title":"Properties","text":"<p> float Smoothness Rect2 GlobalRect Vector2[] EditPoints Vector2[] GlobalEditPoints bool FadeIn bool FadeOut bool Grow bool Shrink bool BlockLight LightOccluder2D occluder OccluderPolygon2D occluderPolygon </p>"},{"location":"reference/Pathway/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void UpdateGradient ( ) void UpdateOccluder ( ) void SetBlockLight ( bool value ) void SetEditPoints ( Vector2[] points ) void InsertPoint ( int index, Vector2 point ) void DeletePoint ( int index ) void ModifyPoint ( int index, Vector2 point ) void Smooth ( ) void GrowShrinkEnds ( int distance ) void SetWidthScale ( float widthScale ) bool IsMouseWithin ( Vector2 mousePos ) </p>"},{"location":"reference/Pathway/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>float Smoothness:   Gets or sets the path's smoothness. Call Smooth() if subsequent methods you use to do update the Pathway. </li> </ul> <ul> <li>Rect2 GlobalRect:   The global Rect2 that encloses this path. READ ONLY. </li> </ul> <ul> <li>Vector2[] EditPoints:   The edit points of the path in local space. Not normally set here. Call SetEditPoints() instead. </li> </ul> <ul> <li>Vector2[] GlobalEditPoints:   The edit points of the path in world space. READ ONLY. </li> </ul> <ul> <li>bool FadeIn:   Gets or sets the path fade in. Not normally set here. Better to call SetFadeIn() from the PathTool. </li> </ul> <ul> <li>bool FadeOut:   Gets or sets the path fade out. Not normally set here. Better to call SetFadeOut() from the PathTool. </li> </ul> <ul> <li>bool Grow:   Gets or sets the path taper. Not normally set here. Better to call SetTransitionIn()/SetTransitionOut() from the PathTool. </li> </ul> <ul> <li>bool Shrink:   Gets or sets the path taper. Not normally set here. Better to call SetTransitionIn()/SetTransitionOut()  from the PathTool. </li> </ul> <ul> <li>bool BlockLight:   Gets the flag that indicates if this object blocks light. </li> </ul> <ul> <li>LightOccluder2D occluder:   The object that blocks light. </li> </ul> <ul> <li>OccluderPolygon2D occluderPolygon:   The special shape that the occluder uses to block light with. </li> </ul>"},{"location":"reference/Pathway/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Pathway into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Pathway data. Used by a saved map file to load existing paths. </li> </ul> <ul> <li>void UpdateGradient ( ):   Update the path visuals to reflect changes in fade in and fade out changes. </li> </ul> <ul> <li>void UpdateOccluder ( ):   Automatically called to update the light blocker to user point position changes. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Toggle whether this Pathway blocks lights. </li> </ul> <ul> <li>void SetEditPoints ( Vector2[] points ):   Set or replace the entire set of edit points in world space. </li> </ul> <ul> <li>void InsertPoint ( int index, Vector2 point ):   Insert edit point in world space at index. </li> </ul> <ul> <li>void DeletePoint ( int index ):   Remove edit point at index. </li> </ul> <ul> <li>void ModifyPoint ( int index, Vector2 point ):   Modify the position of an existing point in world space. </li> </ul> <ul> <li>void Smooth ( ):   Take the Edit Points and generate a smooth visual. Called to update the visuals when the path is modified. </li> </ul> <ul> <li>void GrowShrinkEnds ( int distance ):   Called by Smooth() to taper the ends when grow or shrink is set. Not normally called directly. </li> </ul> <ul> <li>void SetWidthScale ( float widthScale ):   Modifies the width of the path. </li> </ul> <ul> <li>bool IsMouseWithin ( Vector2 mousePos ):   Checks if the mouse cursor is over the path. Only used by the SelectTool. </li> </ul>"},{"location":"reference/PrefabTool/","title":"PrefabTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/PrefabTool/#description","title":"Description","text":"<p>The tool used to edit the prefabs.</p> <p>Accessed by <code>Global.Editor.Tools[\"PrefabTool\"]</code>.</p>"},{"location":"reference/PrefabTool/#properties","title":"Properties","text":"<p> OptionButton set ItemList list Dictionary preview </p>"},{"location":"reference/PrefabTool/#methods","title":"Methods","text":"<p> void SetSet ( int index ) void OnSelectPrefab ( int index ) void Instance ( ) void Forget ( ) void Clear ( ) void Confirm ( ) </p>"},{"location":"reference/PrefabTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton set:   The UI button that allows the user to select a set of prefabs. </li> </ul> <ul> <li>ItemList list:   The UI list that allows the user to select a prefab. </li> </ul> <ul> <li>Dictionary preview:   The preview of the prefab created by Instance() with the keys being the reference to the asset instances and their values being their type as an int. </li> </ul>"},{"location":"reference/PrefabTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetSet ( int index ):   Called by the UI when the user changes a set to update the prefab list. </li> </ul> <ul> <li>void OnSelectPrefab ( int index ):   Called by the UI when the user selects a specific prefab and instances it as a preview. Calls Instance(). </li> </ul> <ul> <li>void Instance ( ):   Creates a new instance of a prefab and sets it as the preview property. </li> </ul> <ul> <li>void Forget ( ):   Deletes the currently selected prefab (not the instance) from the list. </li> </ul> <ul> <li>void Clear ( ):   Deletes the current prefab instance (the preview). </li> </ul> <ul> <li>void Confirm ( ):   Make the preview prefab permanent and records its Undo history. </li> </ul>"},{"location":"reference/Prop/","title":"Prop","text":"<p>Extends: Node2D</p>"},{"location":"reference/Prop/#description","title":"Description","text":"<p>A Prop is a Dungeondraft asset instance of what the user sees as an object from the ObjectTool. See Asset Instance.</p>"},{"location":"reference/Prop/#properties","title":"Properties","text":"<p> Sprite Sprite Rect2 Rect bool HasShadow bool Mirror LightOccluder2D[] occluders bool BlockLight bool isHighlighted bool isSelected Color borderColor Rect2 SelectRect </p>"},{"location":"reference/Prop/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void SetTexture ( Texture texture ) void SetCustomColor ( Color color ) bool HasCustomColor ( ) Color GetCustomColor ( ) void Highlight ( bool value ) void Select ( bool bvalue ) void SetBlockLight ( bool value ) void GenerateOccluder ( ) void ClearOccluders ( ) void UpdateOccluders ( ) </p>"},{"location":"reference/Prop/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Sprite Sprite:   The Sprite displaying the Prop. DO NOT MODIFY. </li> </ul> <ul> <li>Rect2 Rect:   The Rect2 enclosing the Prop. DO NOT MODIFY. </li> </ul> <ul> <li>bool HasShadow:   Set to toggle the shadow. </li> </ul> <ul> <li>bool Mirror:   Set to flip the Prop horizontally. </li> </ul> <ul> <li>LightOccluder2D[] occluders:   Array of the Godot LightOccluder2D that block light for this Prop. </li> </ul> <ul> <li>bool BlockLight:   Gets the flag that indicates if this object blocks light. </li> </ul> <ul> <li>bool isHighlighted:   Determines if the Prop is highlighted. Read only, call Highlight() instead to set. </li> </ul> <ul> <li>bool isSelected:   Determines if the Prop is visually selected. Read only, call Select() instead to set. </li> </ul> <ul> <li>Color borderColor:   This property is set by Dungeondraft to draw a box when this Prop is highlighted or selected. Modify at your own risk. </li> </ul> <ul> <li>Rect2 SelectRect:   This property is set by Dungeondraft to determine the size of the box around the Prop when selected. Automatically updated. </li> </ul>"},{"location":"reference/Prop/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Prop into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Prop data. Used by a saved map file to load existing objects. </li> </ul> <ul> <li>void SetTexture ( Texture texture ):   Change the Prop to a new Texture. </li> </ul> <ul> <li>void SetCustomColor ( Color color ):   Update to a new custom color and pass the color to the materials. </li> </ul> <ul> <li>bool HasCustomColor ( ):   Return whether or not this Prop is using a custom color </li> </ul> <ul> <li>Color GetCustomColor ( ):   Return the custom color. </li> </ul> <ul> <li>void Highlight ( bool value ):   Highlights the Prop. </li> </ul> <ul> <li>void Select ( bool bvalue ):   Visually select the Prop. Does not mean it is selected in the SelectTool. </li> </ul> <ul> <li>void SetBlockLight ( bool value ):   Toggle whether this Prop blocks lights. Calls GenerateOccluder() or ClearOccluders internally based on value. </li> </ul> <ul> <li>void GenerateOccluder ( ):   Generate Occluders, which Dungeondraft uses to block the light. </li> </ul> <ul> <li>void ClearOccluders ( ):   Remove Occluders, which Dungeondraft uses to block the light. </li> </ul> <ul> <li>void UpdateOccluders ( ):   Refresh Occluders based on the art, which Dungeondraft uses to block the light. </li> </ul>"},{"location":"reference/RangeSlider/","title":"RangeSlider","text":"<p>Extends: HBoxContainer</p>"},{"location":"reference/RangeSlider/#description","title":"Description","text":"<p>Dungeondraft unique UI Control that is allows the user to use a slider to set a minimum and a maximum.</p>"},{"location":"reference/RangeSlider/#properties","title":"Properties","text":"<p> Range MinRange Range MaxRange SpinBox minSpinBox SpinBox maxSpinBox Slider minSlider Slider maxSlider </p>"},{"location":"reference/RangeSlider/#methods","title":"Methods","text":"<p> void Init ( float min, float max, float step, float minValue, float maxValue ) </p>"},{"location":"reference/RangeSlider/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range MinRange:   Safe to access the min value set by the user. </li> </ul> <ul> <li>Range MaxRange:   Safe to access the max value set by the user. </li> </ul> <ul> <li>SpinBox minSpinBox:   The SpinBox to set the minimum. Linked to the minSlider. </li> </ul> <ul> <li>SpinBox maxSpinBox:   The SpinBox to set the maximum. Linked to the maxSlider. </li> </ul> <ul> <li>Slider minSlider:   The Slider to set the minimum. Linked to the minSpinBox. </li> </ul> <ul> <li>Slider maxSlider:   The Slider to set the maximum. Linked to the maxSpinBox. </li> </ul>"},{"location":"reference/RangeSlider/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Init ( float min, float max, float step, float minValue, float maxValue ):   Call to initialize the Control with the proper values. </li> </ul>"},{"location":"reference/ScatterTool/","title":"ScatterTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/ScatterTool/#description","title":"Description","text":"<p>The tool used to scatter objects. Inherits from Tool.</p> <p>Accessed by <code>Global.Editor.Tools[\"ScatterTool\"]</code>.</p>"},{"location":"reference/ScatterTool/#properties","title":"Properties","text":"<p> Texture[] textures Texture texture Prop Preview Range MinRotation Range MaxRotation Range MinScale Range MaxScale Color[] Colors Range Spread bool Shadow OptionButton LayerMenu int ActiveLayer int Sorting GridMenu GridMenu Dictionary LibraryMemory bool isDrawing Prop[] currentStroke </p>"},{"location":"reference/ScatterTool/#methods","title":"Methods","text":"<p> void Next ( bool cycle ) void SetLayer ( int index ) void SetShadow ( bool value ) void PromoteCustomColor ( ) void SetSorting ( int sorting ) </p>"},{"location":"reference/ScatterTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Texture[] textures:   Arrau of Texture of the asset selected. WRITE ONLY. </li> </ul> <ul> <li>Texture texture:  Texture of the asset selected (when only 1 is selected). Used automatically by the UI controls. Does not update the preview link:<code>Prop</code> automatically. </li> </ul> <ul> <li>Prop Preview:   Gets the preview Prop. This is the object that follows the user's cursor before it is actually placed. Call confirm to force it to place. </li> </ul> <ul> <li>Range MinRotation:  Range that determines the minimum rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range MaxRotation:  Range that determines the maximum rotation in degrees of the objects placed. </li> </ul> <ul> <li>Range MinScale:  Range that determines the minimum scale of the objects placed. </li> </ul> <ul> <li>Range MaxScale:  Range that determines the maximum scale of the objects placed. </li> </ul> <ul> <li>Color[] Colors:   The collection of custm colors to use (if applicable) randomly for the objects placed. </li> </ul> <ul> <li>Range Spread:  Range that determines how far apart the objects are placed. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the tool will place objects with shadows. Read only. Set with SetShadow() instead. </li> </ul> <ul> <li>OptionButton LayerMenu:   The reference to the layer menu in the Object Tool when it is active. </li> </ul> <ul> <li>int ActiveLayer:   The layer the next object will be placed. Read only. Set with SetLayer() instead. </li> </ul> <ul> <li>int Sorting:   Where the next object will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. Read only. Set with SetSorting() instead. </li> </ul> <ul> <li>GridMenu GridMenu:   The menu in the Object Library Panel that selects textures for this tool. DO NOT MODIFY. </li> </ul> <ul> <li>Dictionary LibraryMemory:   The data that represents the last loaded state of the library panel. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul> <ul> <li>Prop[] currentStroke:   The current collection of Props that represented the latest brush stroke from the user. </li> </ul>"},{"location":"reference/ScatterTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Next ( bool cycle ):   Create a new preview link:<code>Prop</code> using the last known options and texture selected. The param cycle is used to prevent creating a new Prop, but instead update the current one when a user cycles the selection without placing any. </li> </ul> <ul> <li>void SetLayer ( int index ):   Set layer option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option and update the preview link:<code>Prop</code> to reflect it. </li> </ul> <ul> <li>void PromoteCustomColor ( ):   Update the preview Prop to reflect the custom color. Better to call ChangeColor() than this function directly. </li> </ul> <ul> <li>void SetSorting ( int sorting ):   Sets the sorting of the tool, and updates the preview Prop to reflect it. 0 = Over, 1 = Under. </li> </ul>"},{"location":"reference/TagsPanel/","title":"TagsPanel","text":"<p>Extends: VBoxContainer</p>"},{"location":"reference/TagsPanel/#description","title":"Description","text":"<p>This is the special box that shows tags in the default Object Tool</p>"},{"location":"reference/TagsPanel/#properties","title":"Properties","text":"<p> OptionButton setList ItemList tagsList Dictionary tagIndexLookup ??? ObjectTool bool TagsEnabled </p>"},{"location":"reference/TagsPanel/#methods","title":"Methods","text":"<p> void UpdateTags ( ) Dictionary Save ( ) void Load ( Dictionary data ) void EnableTags ( bool enable ) void SelectTagSetById ( int id ) void SelectTagSet ( String set ) void ShowCurrentTagSet ( ) </p>"},{"location":"reference/TagsPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>OptionButton setList:   Dropdown menu that displays the tag sets for the user to choose. </li> </ul> <ul> <li>ItemList tagsList:   The box where the user clicks to select tags. Can multi-select. </li> </ul> <ul> <li>Dictionary tagIndexLookup:   Dictionary that allows you to look up a tag's index. tagIndexLookup[tag] results in a int. </li> </ul> <ul> <li>ObjectTool:   A private reference to the ObjectTool that shouldn't be used in a mod. </li> </ul> <ul> <li>bool TagsEnabled:   Is this TagsPanel visually enabled. </li> </ul>"},{"location":"reference/TagsPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void UpdateTags ( ):   Refresh the tags available by looking up Master.TagSets. </li> </ul> <ul> <li>Dictionary Save ( ):   Serialize the selected tags into a Dictionary. Looks like JSON. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a previous user's selected tags by passing in a Dictionary. See Save(). </li> </ul> <ul> <li>void EnableTags ( bool enable ):   Enable this TagsPanel so it can be used. When a user clicks on the tags, it calls this method as well. </li> </ul> <ul> <li>void SelectTagSetById ( int id ):   Manually selects the tag set by id in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void SelectTagSet ( String set ):   Manually selects the tag set by String in the dropdown and display the corresponding objects in the Object Library Panel. </li> </ul> <ul> <li>void ShowCurrentTagSet ( ):   Display the assets associated with this tag in the Object Library Panel. </li> </ul>"},{"location":"reference/Text/","title":"Text","text":"<p>Extends: LineEdit</p>"},{"location":"reference/Text/#description","title":"Description","text":"<p>A Text is a Dungeondraft asset instance of what the user sees as an text from the TextTool. See Asset Instance.</p>"},{"location":"reference/Text/#properties","title":"Properties","text":"<p> int boxShape String fontName int fontSize Color fontColor int borderWidth Dictionary dataOnFocus bool QueueNewHistoryRecord </p>"},{"location":"reference/Text/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void Replace ( Dictionary data ) bool IsMouseWithin ( ) void SetFont ( String name, int size ) void SetFontSize ( int size ) void SetFontColor ( Color color ) void EnableTextBox ( int borderWidth, Color bgColor, Color borderColor, int shape ) void DisableTextBox ( ) void SetBoxShape ( int shape ) void SetBorderWidth ( int width ) void HandleExport ( bool exporting ) </p>"},{"location":"reference/Text/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int boxShape:   Not set manually. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>String fontName:   Not set manually. </li> </ul> <ul> <li>int fontSize:   Not set manually. </li> </ul> <ul> <li>Color fontColor:   Not set manually. </li> </ul> <ul> <li>int borderWidth:   Not set manually. </li> </ul> <ul> <li>Dictionary dataOnFocus:   The saved data when this Text is in focus in case an Undo record needs to be recorded. </li> </ul> <ul> <li>bool QueueNewHistoryRecord:   Tells Dungeondraft to record the Undo History of any changes when the focused text leaves focus. </li> </ul>"},{"location":"reference/Text/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Text into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Text data. Used by a saved map file to load existing texts. </li> </ul> <ul> <li>void Replace ( Dictionary data ):   Replace an existing text with saved data. Used by Undo History. </li> </ul> <ul> <li>bool IsMouseWithin ( ):   Checks if the mouse cursor is over the Text. Only used by the SelectTool. </li> </ul> <ul> <li>void SetFont ( String name, int size ):   Change the font and its size. </li> </ul> <ul> <li>void SetFontSize ( int size ):   Changes the font size. </li> </ul> <ul> <li>void SetFontColor ( Color color ):   Change the font color. </li> </ul> <ul> <li>void EnableTextBox ( int borderWidth, Color bgColor, Color borderColor, int shape ):   Enable and set options of a text box. </li> </ul> <ul> <li>void DisableTextBox ( ):   Hide the text box. </li> </ul> <ul> <li>void SetBoxShape ( int shape ):   Changes the shape of the text box. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>void SetBorderWidth ( int width ):   Changes the width of the text box border. </li> </ul> <ul> <li>void HandleExport ( bool exporting ):   Called during the export process so the font sizing would be accurate. Not needed to be manually called. </li> </ul>"},{"location":"reference/TextTool/","title":"TextTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/TextTool/#description","title":"Description","text":"<p>The tool used to edit the texts.</p> <p>Accessed by <code>Global.Editor.Tools[\"TextTool\"]</code>.</p>"},{"location":"reference/TextTool/#properties","title":"Properties","text":"<p> int Mode float FontSize Color FontColor bool SharpenFonts bool TextBox int BoxShape float BorderWidth Color BoxBackgroundColor Color BoxBorderColor OptionButton FontOptions Text focus bool isDragging bool HasFocused </p>"},{"location":"reference/TextTool/#methods","title":"Methods","text":"<p> void SetFocus ( Text text ) void OnModeChanged ( int mode ) void SetFont ( int index ) void ChangeFontSize ( float value ) void ChangeColor ( Color color, String name ) void SetSharpenFonts ( bool value ) void SetVisible ( bool value ) void SetTextBox ( bool value ) void SetBoxShape ( int shape ) void OnBorderWidthChanged ( float value ) void UpdateText ( Text text ) void Delete ( ) </p>"},{"location":"reference/TextTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Mode:   0 = Edit, 1 = Move. Call OnModeChange() to set. </li> </ul> <ul> <li>float FontSize:   Changes the font size. UI state. Call ChangeFontSize() instead. </li> </ul> <ul> <li>Color FontColor:   Changes the font color. UI state. Call ChangeColor() instead. </li> </ul> <ul> <li>bool SharpenFonts:   Sharpens the font when zoomed in. UI state. Call SetSharpenFonts() instead. </li> </ul> <ul> <li>bool TextBox:   Puts a box around the text labels. UI state. Call SetTextBox() instead. </li> </ul> <ul> <li>int BoxShape:   Changes the shape of the box when enabled. Calls SetBoxShape() internally. </li> </ul> <ul> <li>float BorderWidth:   Changes the width of a box. UI state. Call OnBorderWidthChanged() instead. </li> </ul> <ul> <li>Color BoxBackgroundColor:   Changes the background color of a box. Set before calling SetTextBox(). </li> </ul> <ul> <li>Color BoxBorderColor:   Changes the border color of a box. Set before calling SetTextBox(). </li> </ul> <ul> <li>OptionButton FontOptions:   Reference to the OptionButton representing the font selection. Do not modify the reference, only change the OptionButton itself. </li> </ul> <ul> <li>Text focus:   Reference to the Text in focus. </li> </ul> <ul> <li>bool isDragging:   Is the user actively dragging a text. </li> </ul> <ul> <li>bool HasFocused:   Is there a text in focus. Read only. </li> </ul>"},{"location":"reference/TextTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void SetFocus ( Text text ):   Sets the text in focus. </li> </ul> <ul> <li>void OnModeChanged ( int mode ):   Changes the edit mode. 0 = Edit, 1 = Move </li> </ul> <ul> <li>void SetFont ( int index ):   Changes the font. The index is the value of the font in the dropdown order. </li> </ul> <ul> <li>void ChangeFontSize ( float value ):   Changes the font size. </li> </ul> <ul> <li>void ChangeColor ( Color color, String name ):   Changes the font colors. Valid entries for names are: \"FontColor\", \"BoxBackgroundColor\", and \"BoxBorderColor\". </li> </ul> <ul> <li>void SetSharpenFonts ( bool value ):   Changes whether the font is sharpened when zoomed in. </li> </ul> <ul> <li>void SetVisible ( bool value ):   Toggles visibility of all Texts. </li> </ul> <ul> <li>void SetTextBox ( bool value ):   Toggles visibility of the box behind a text. </li> </ul> <ul> <li>void SetBoxShape ( int shape ):   Changes the shape of the text box. 0 = None, 1 = Square, 2 = Rounded. </li> </ul> <ul> <li>void OnBorderWidthChanged ( float value ):   Changes the width of the text box border. </li> </ul> <ul> <li>void UpdateText ( Text text ):   Updates the Text in focus to settings set in the UI controls and thus the properties. </li> </ul> <ul> <li>void Delete ( ):   Deletes the Text in focus. </li> </ul>"},{"location":"reference/Tool/","title":"Tool","text":"<p>Extends: Object</p>"},{"location":"reference/Tool/#description","title":"Description","text":"<p>This is an abstract class that all Dungeondraft tools are based off of. You can call or get any properties or functions from this class on all tools.</p>"},{"location":"reference/Tool/#properties","title":"Properties","text":"<p> Dictionary Controls Range SizeControl Button[] SizeButtons </p>"},{"location":"reference/Tool/#methods","title":"Methods","text":"<p> void Enable ( ) void Disable ( ) void RegisterSizeButtons ( Button[] buttons, int default ) </p>"},{"location":"reference/Tool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Dictionary Controls:   Returns a Dictionary of UI Controls with the control's registered IDs as the keys. </li> </ul> <ul> <li>Range SizeControl:   A Range control, typically a slider that determines the size of the brush. </li> </ul> <ul> <li>Button[] SizeButtons:   The Buttons assigned to this Tool to modify tool brush sizes. </li> </ul>"},{"location":"reference/Tool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Enable ( ):   Enables the tool to perform tasks. This is also called internally when a tool is selected in the toolbar. The tool will not work without being first enabled. </li> </ul> <ul> <li>void Disable ( ):   Disables the tool. Must be called when you are done with a tool to clean up. </li> </ul> <ul> <li>void RegisterSizeButtons ( Button[] buttons, int default ):   Call from the ToolPanel to let this Tool know if there are size buttons for something like a brush. </li> </ul>"},{"location":"reference/ToolPanel/","title":"ToolPanel","text":"<p>Extends: ScrollContainer</p>"},{"location":"reference/ToolPanel/#description","title":"Description","text":"<p>ToolPanel is the class representing the UI controls on the left side of the Dungeondraft interface. Every single tool in Dungeondraft, including new ones you create through Global.Editor.CreateModTool() is associated with a ToolPanel. This is the primary way a tool displays options available to a cartographer. The main concern for the modder should be creating new UI controls and associating any options or functionality to them. Whenever you see the property variable in a UI creation method, it automatically modifies that property in the associated Tool.</p> <p>To see how to use a ToolPanel instance, check out this example script: Example UI Script</p>"},{"location":"reference/ToolPanel/#properties","title":"Properties","text":"<p> VBoxContainer Align Tool Tool bool UsesObjectLibrary bool UsesPathLibrary bool UsesModRightsidePanel bool IsRightsidePanel </p>"},{"location":"reference/ToolPanel/#methods","title":"Methods","text":"<p> VBoxContainer BeginSection ( bool stretch = true ) VBoxContainer BeginNamedSection ( String name, bool stretch = true ) void EndSection ( ) Button CreateButton ( String label, String icon ) Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ) void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ) void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ) CheckButton CreateCheckButton ( String label, String property, bool default ) void CreateLabel ( String label ) void CreateSeparator ( ) void CreateNote ( String text ) CheckBox[] CreateRadioMenu ( String property, String[] options ) OptionButton CreateDropdownMenu ( String property, String[] options, String default ) OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ) OptionButton CreateLayerMenu ( ) void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ) HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ) RangeSlider CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ) void CreateFileSelector ( String property, String filter, String directory ) ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ) ColorPalette CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ) void CreateTextureListMenu ( String property, String[] textures, String[] labels ) GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ) GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ) void CreateTilesetMenu ( String property ) void CreateTerrainListMenu ( String property ) void CreateExpandSlotsButton ( ) TagsPanel CreateTagsPanel ( ) void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ) ToolPanel CreateRightsidePanel ( String title ) void ForwardMethod ( String method ) void ForwardProperty ( value, String property ) void ForwardProperty_Enum ( String value, String property ) </p>"},{"location":"reference/ToolPanel/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>VBoxContainer Align:   This is the control that every UI control is attached to unless inside a section. </li> </ul> <ul> <li>Tool Tool:   The Tool associated with this ToolPanel. </li> </ul> <ul> <li>bool UsesObjectLibrary:   Opens the Object Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesPathLibrary:   Opens the Path Library Panel on the right side when this tool is active. </li> </ul> <ul> <li>bool UsesModRightsidePanel:   Opens the Custom Mod Rightside Panel on the right side when this tool is active. DO NOT MANUALLY SET. </li> </ul> <ul> <li>bool IsRightsidePanel:   Tells Dungeondraft this panel is the mod rightside panel. DO NOT MANUALLY SET. </li> </ul>"},{"location":"reference/ToolPanel/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>VBoxContainer BeginSection ( bool stretch = true ):   Encloses all UI controls created afterwards inside a section. Must be closed with EndSection(). The parameter stretch causes the section to extend all the way to the bottom of the panel. </li> </ul> <ul> <li>VBoxContainer BeginNamedSection ( String name, bool stretch = true ):   Create a UI control section that can be referenced through Tool.Controls[name]. </li> </ul> <ul> <li>void EndSection ( ):   Ends the section and all UI controls created afterwards will not be included in the previous section. </li> </ul> <ul> <li>Button CreateButton ( String label, String icon ):   Creates and returns a Godot Button with label as display text and icon_path as the path to the icon displayed. </li> </ul> <ul> <li>Button CreateToggle ( String property, bool default, String onLabel, String onIcon, String offLabel, String offIcon ):   Creates and returns a toggle style Godot Button. </li> </ul> <ul> <li>void CreateSharedToggle ( String label, String property, bool default, String icon, ButtonGroup group ):   Creates a radio style Godot Button and pass in a ButtonGroup to allow a radio toggle. </li> </ul> <ul> <li>void CreateToggleGroup ( String property, String[] options, String[] labels, String[] icons, int default = 0 ):   Creates a set of radio toggle but looks like tabbed buttons. </li> </ul> <ul> <li>CheckButton CreateCheckButton ( String label, String property, bool default ):   Creates and returns a Godot CheckButton. </li> </ul> <ul> <li>void CreateLabel ( String label ):   Creates a label. </li> </ul> <ul> <li>void CreateSeparator ( ):   Creates a horizontal separator. </li> </ul> <ul> <li>void CreateNote ( String text ):   Creates a framed label for a dev note. </li> </ul> <ul> <li>CheckBox[] CreateRadioMenu ( String property, String[] options ):   Creates a radio menu and returns the array of all the CheckBox. </li> </ul> <ul> <li>OptionButton CreateDropdownMenu ( String property, String[] options, String default ):   Creates and returns a Godot OptionButton (which is a dropdown menu) and autofill the menu with options. </li> </ul> <ul> <li>OptionButton CreateLabeledDropdownMenu ( String property, String label, String[] options, String default ):   Creates a labelled dropdown menu. The option Array are of type String. </li> </ul> <ul> <li>OptionButton CreateLayerMenu ( ):   Creates and returns the dropdown menu representing the layer system for Objects, Paths, and Materials for Dungeondraft. There should only ever be a single instance of this UI control per tool if needed. To inspect the current selected layer, check the variable Global.Editor.Tools[\"mod_tool_id\"].ActiveLayer which returns the int of the layer value. </li> </ul> <ul> <li>void CreateIconMenu ( String property, int default, String[] options, bool sizeControl, ButtonGroup group ):   Create a horizontal set of icon menu buttons like those used to select brush shapes. </li> </ul> <ul> <li>HSlider CreateSlider ( String property, float default, float minimum, float maximum, float step, bool exponential ):   Creates and returns a Godot HSlider. The exponential parameter is an option that makes the slider use an exponential scale. </li> </ul> <ul> <li>RangeSlider CreateRange ( String property, float minimum, float maximum, float step, float minDefault, float maxDefault ):   Creates and returns a Dungeondraft unique UI control RangeSlider. This control allows the user to pick a range of values instead of a single value. </li> </ul> <ul> <li>void CreateFileSelector ( String property, String filter, String directory ):   Creates a special UI control dedicated to selecting a file. The file_filter parameter is the file extension filter that is unique to each operating system. A modder needs to account for Windows, OSX, and Linux in the filter. The directory is the path to the default starting location for the file dialog that opens. </li> </ul> <ul> <li>ColorPickerButton CreateColorButton ( String name, bool propertyOnly, String default, String[] presets ):   Create a simple color selection control without a color palette. The presets Array are of type String. </li> </ul> <ul> <li>ColorPalette CreateColorPalette ( String name, bool propertyOnly, String default, String[] presets, bool multiselect, bool initToolColor = true ):   Creates and returns a Dungeondraft UI control called a ColorPalette and fills it through the presets array. The Strings should be in hex color code format. The presets Array are of type String. </li> </ul> <ul> <li>void CreateTextureListMenu ( String property, String[] textures, String[] labels ):   Create a texture selection menu in list format. No longer used/deprecated. The Arrays are of type String. </li> </ul> <ul> <li>GridMenu CreateTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>GridMenu CreateWideTextureGridMenu ( String property, String textureCategory, bool showsPreview ):   Creates and returns a Godot GridMenu in wide format filled with assets from the specified Dungeondraft asset category. </li> </ul> <ul> <li>void CreateTilesetMenu ( String property ):   Generate the menu that displays the floor tile options. </li> </ul> <ul> <li>void CreateTerrainListMenu ( String property ):   Generate the menu to select Terrain options. Passes the index of the selected option to property. </li> </ul> <ul> <li>void CreateExpandSlotsButton ( ):   Generate the CheckButton used to expand the Terrain slots. </li> </ul> <ul> <li>TagsPanel CreateTagsPanel ( ):   Generate the TagsPanel and adds it to the UI. </li> </ul> <ul> <li>void UpdateToggleVisuals ( bool value, Button toggle, String onLabel, Texture onIcon, String offLabel, Texture offIcon ):   Update a toggle button's icons and labels. </li> </ul> <ul> <li>ToolPanel CreateRightsidePanel ( String title ):   Creates and returns a Dungeondraft right-side panel that behaves like the left-side tool panel and allows you to add more UI controls for your mod. Must be called from a ToolPanel you created for your mod tool, as it is registered to the tool. It will automatically open and close when your tool is selected. Only one is supported per tool. See Example UI Script for a usage example. </li> </ul> <ul> <li>void ForwardMethod ( String method ):   Helper function to forward a method invocation to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty ( value, String property ):   Helper function to forward a property change to the Tool. Not typically called manually. </li> </ul> <ul> <li>void ForwardProperty_Enum ( String value, String property ):   Helper function to forward an enum change to the Tool. Not typically called manually. </li> </ul>"},{"location":"reference/TraceImage/","title":"TraceImage","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/TraceImage/#description","title":"Description","text":"<p>The tool used to edit the trace image.</p> <p>Accessed by <code>Global.Editor.Tools[\"TraceImage\"]</code>.</p>"},{"location":"reference/TraceImage/#properties","title":"Properties","text":"<p> Range Scale Range Opacity bool isDragging </p>"},{"location":"reference/TraceImage/#methods","title":"Methods","text":"<p> Dictionary Save ( bool copy = false ) void Load ( Dictionary data ) void OnFileSelected ( String property, String path ) void OnFileCleared ( String property ) void SetScale ( float value ) void SetOpacity ( float value ) void Center ( ) </p>"},{"location":"reference/TraceImage/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>Range Scale:   Gets the Range representing the Trace Image scale. Call SetScale() to set instead. </li> </ul> <ul> <li>Range Opacity:   Gets the Range representing the Trace Image opacity. Call SetOpacity() to set instead. </li> </ul> <ul> <li>bool isDragging:   Gets if the user is dragging. DO NOT MODIFY. </li> </ul>"},{"location":"reference/TraceImage/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>Dictionary Save ( bool copy = false ):   Save the Trace Image into the save file format and return it as a Dictionary. The param copy is only used by copy-pasting feature of Dungeondraft. </li> </ul> <ul> <li>void Load ( Dictionary data ):   Load a saved Trace Image data. Used by a saved map file to load. </li> </ul> <ul> <li>void OnFileSelected ( String property, String path ):   Called when a file a selected. Call be called set a new image file. Param property is not used. </li> </ul> <ul> <li>void OnFileCleared ( String property ):   Called when a file is cleared. Call be called manually. Param property is not used. </li> </ul> <ul> <li>void SetScale ( float value ):   Sets the Trace Image scale. </li> </ul> <ul> <li>void SetOpacity ( float value ):   Sets the Trace Image opacity. </li> </ul> <ul> <li>void Center ( ):   Centers the image on the canvas. </li> </ul>"},{"location":"reference/WallTool/","title":"WallTool","text":"<p>Extends: Tool &lt; Object</p>"},{"location":"reference/WallTool/#description","title":"Description","text":"<p>The tool used to edit walls.</p> <p>Accessed by <code>Global.Editor.Tools[\"WallTool\"]</code>.</p>"},{"location":"reference/WallTool/#properties","title":"Properties","text":"<p> int Sorting Texture Texture Color Color bool Shadow bool Bevel bool isDrawing </p>"},{"location":"reference/WallTool/#methods","title":"Methods","text":"<p> void Confirm ( ) void EndWall ( bool loop ) void SetShadow ( bool value ) Color GetWallColor ( Texture texture = null ) void SetWallColor ( Color color ) </p>"},{"location":"reference/WallTool/#property-descriptions","title":"Property Descriptions","text":"<ul> <li>int Sorting:   Where the next wall will be sorted. Underlying type is an enum. 0 = Over, 1 = Under. </li> </ul> <ul> <li>Texture Texture:   Gets or sets the next wall's texture. </li> </ul> <ul> <li>Color Color:   Gets or sets the next wall's multiplied color. </li> </ul> <ul> <li>bool Shadow:   Gets and sets whether the wall has a shadow below it. </li> </ul> <ul> <li>bool Bevel:   Gets and sets whether the next wall should have beveled corners. </li> </ul> <ul> <li>bool isDrawing:   Whether the user is actively drawing. </li> </ul>"},{"location":"reference/WallTool/#method-descriptions","title":"Method Descriptions","text":"<ul> <li>void Confirm ( ):   Takes the polyline from WorldUI and turns it into a Wall and adds it into the Walls children. Automagically determines if it needs to loop or add new points. Calls EndWall(). </li> </ul> <ul> <li>void EndWall ( bool loop ):   Takes the polyline from WorldUI and turns it into a Wall and adds it into the Walls children. Better to call Confirm() rather than this directly. </li> </ul> <ul> <li>void SetShadow ( bool value ):   Set shadow option of all walls. </li> </ul> <ul> <li>Color GetWallColor ( Texture texture = null ):   Get the current selected wall style's color if applicable. </li> </ul> <ul> <li>void SetWallColor ( Color color ):   Set the current selected wall style's color if applicable. </li> </ul>"},{"location":"tutorials/SerializingModData/","title":"Serializing Mod Data","text":"<p>There may be times when you wish to store and load data for your mod. Perhaps you would like to remember things between sessions. Or perhaps you want to allow the user to configure your mod.</p>"},{"location":"tutorials/SerializingModData/#store-data","title":"Store Data","text":"<p>There is a good built-in way for the Godot Engine to do so called the File class. To create or overwrite a file to store your data, you would write code like this:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_var(data)\nfile.close()\n</code></pre> <p>The variable data is a Dictionary and functions like a table that you can store keyed information within. It also happens to save in nearly identical form in text, which makes it very readable.</p> <p>To store a file, you must first create a File, which is a helper to write files. Then, you must call open() and pass it the full path of the file location and the enum File.WRITE to tell Godot that you are writing, not reading the file. user:// is a special address that points to the User Folder of Dungeondraft, typically a safe place to store files not easily deleted.</p> <p>Once the file is opened, you should write to it any data you wish by calling store_var() or any other store_xxx() methods. There are different methods to store different types of data. Storing data in this way saves them in the binary format, which is faster to save and load. However, it makes the saved file unreadable by humans and also unfixable if corrupted. An alternate store method is to convert the data into JSON text prior to saving. Your code would look something like this if you do so:</p> <pre><code>var data = {\n\"key\": \"value\"\n}\nvar file = File.new()\nfile.open(\"user://mod_data.txt\", File.WRITE)\nfile.store_line(JSON.print(data, \"\\t\"))\nfile.close()\n</code></pre> <p>After you are finished, it is good to call close() to prevent a dangling access to a file.</p> <p>To see the official document on saving or loading files, visit File.</p> <p>Note: The value of any data entry can be any Godot Variant, including other Dictionaries.</p>"},{"location":"tutorials/SerializingModData/#retrieve-data","title":"Retrieve Data","text":"<p>When it comes time to load the data, perhaps during the next time a user opens your mod, you can do so by reversing the action you took during storing. If you saved it in JSON text format from above, then your load code would look like this:</p> <pre><code>var file = File.new()\nfile.open(\"user://mod_data.txt\", File.READ)\nvar line = file.get_as_text()\nvar data = JSON.parse(line).result\nfile.close()\n</code></pre> <p>Note that instead of get_line(), you call get_as_text(). That is because when you saved, the JSON format included newline characters. The data would parse incorrectly if you get_line() as it would only parse just the first line of the file. If your data was stored in the binary format, get_var() would be okay.</p>"},{"location":"tutorials/SerializingModData/#referencing-map-objects","title":"Referencing Map Objects","text":"<p>If you would like to remember specific map asset instances that the user placed in this file, you need to save that instance's NodeID. This is a special ID number that Dungeondraft assigns to the various type of asset instances that you can use to identify it. If you reference the asset instance without using the NodeID, you will not be able to find that instance the next session as the reference in Godot is temporary. It will be gone when the program closes.</p> <p>To get an Object's NodeID, you would call <code>var id = thing.get_meta(\"node_id\")</code> which returns an int that you can store.</p> <p>To retrieve that Object by its NodeID, you would call <code>var thing = Global.World.GetNodeByID(id)</code> which assigns the Object to the variable thing.</p> <p>Typically, if you are retrieving an Object beyond a single user session, you want to check the id before using it to gracefully prevent a crash. You can call <code>Global.World.HasNodeID(id)</code> which returns a bool you can check to see if it exists.</p>"}]}